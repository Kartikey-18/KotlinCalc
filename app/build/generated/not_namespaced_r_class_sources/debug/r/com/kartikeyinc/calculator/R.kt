/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package com.kartikeyinc.calculator

 class R {
 object anim {
 val abc_fade_in = 0x7f010000
 val abc_fade_out = 0x7f010001
 val abc_grow_fade_in_from_bottom = 0x7f010002
 val abc_popup_enter = 0x7f010003
 val abc_popup_exit = 0x7f010004
 val abc_shrink_fade_out_from_bottom = 0x7f010005
 val abc_slide_in_bottom = 0x7f010006
 val abc_slide_in_top = 0x7f010007
 val abc_slide_out_bottom = 0x7f010008
 val abc_slide_out_top = 0x7f010009
 val abc_tooltip_enter = 0x7f01000a
 val abc_tooltip_exit = 0x7f01000b
 val btn_checkbox_to_checked_box_inner_merged_animation = 0x7f01000c
 val btn_checkbox_to_checked_box_outer_merged_animation = 0x7f01000d
 val btn_checkbox_to_checked_icon_null_animation = 0x7f01000e
 val btn_checkbox_to_unchecked_box_inner_merged_animation = 0x7f01000f
 val btn_checkbox_to_unchecked_check_path_merged_animation = 0x7f010010
 val btn_checkbox_to_unchecked_icon_null_animation = 0x7f010011
 val btn_radio_to_off_mtrl_dot_group_animation = 0x7f010012
 val btn_radio_to_off_mtrl_ring_outer_animation = 0x7f010013
 val btn_radio_to_off_mtrl_ring_outer_path_animation = 0x7f010014
 val btn_radio_to_on_mtrl_dot_group_animation = 0x7f010015
 val btn_radio_to_on_mtrl_ring_outer_animation = 0x7f010016
 val btn_radio_to_on_mtrl_ring_outer_path_animation = 0x7f010017
}
 object attr {
/**
 * Custom divider drawable to use for elements in the action bar.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionBarDivider = 0x7f020000
/**
 * Custom item state list drawable background for action bar items.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionBarItemBackground = 0x7f020001
/**
 * Reference to a theme that should be used to inflate popups
 * shown by widgets in the action bar.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionBarPopupTheme = 0x7f020002
/**
 * Size of the Action Bar, including the contextual
 * bar used to present Action Modes.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap_content</td><td>0</td><td></td></tr>
</table> *
 */
     val actionBarSize = 0x7f020003
/**
 * Reference to a style for the split Action Bar. This style
 * controls the split component that holds the menu/action
 * buttons. actionBarStyle is still used for the primary
 * bar.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionBarSplitStyle = 0x7f020004
/**
 * Reference to a style for the Action Bar
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionBarStyle = 0x7f020005
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionBarTabBarStyle = 0x7f020006
/**
 * Default style for tabs within an action bar
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionBarTabStyle = 0x7f020007
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionBarTabTextStyle = 0x7f020008
/**
 * Reference to a theme that should be used to inflate the
 * action bar. This will be inherited by any widget inflated
 * into the action bar.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionBarTheme = 0x7f020009
/**
 * Reference to a theme that should be used to inflate widgets
 * and layouts destined for the action bar. Most of the time
 * this will be a reference to the current theme, but when
 * the action bar has a significantly different contrast
 * profile than the rest of the activity the difference
 * can become important. If this is set to @null the current
 * theme will be used.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionBarWidgetTheme = 0x7f02000a
/**
 * Default action button style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionButtonStyle = 0x7f02000b
/**
 * Default ActionBar dropdown style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionDropDownStyle = 0x7f02000c
/**
 * An optional layout to be used as an action view.
 * See [android.view.MenuItem.setActionView]
 * for more info.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionLayout = 0x7f02000d
/**
 * TextAppearance style that will be applied to text that
 * appears within action menu items.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionMenuTextAppearance = 0x7f02000e
/**
 * Color for text that appears within action menu items.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val actionMenuTextColor = 0x7f02000f
/**
 * Background drawable to use for action mode UI
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionModeBackground = 0x7f020010
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionModeCloseButtonStyle = 0x7f020011
/**
 * Drawable to use for the close action mode button
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionModeCloseDrawable = 0x7f020012
/**
 * Drawable to use for the Copy action button in Contextual Action Bar
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionModeCopyDrawable = 0x7f020013
/**
 * Drawable to use for the Cut action button in Contextual Action Bar
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionModeCutDrawable = 0x7f020014
/**
 * Drawable to use for the Find action button in WebView selection action modes
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionModeFindDrawable = 0x7f020015
/**
 * Drawable to use for the Paste action button in Contextual Action Bar
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionModePasteDrawable = 0x7f020016
/**
 * PopupWindow style to use for action modes when showing as a window overlay.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionModePopupWindowStyle = 0x7f020017
/**
 * Drawable to use for the Select all action button in Contextual Action Bar
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionModeSelectAllDrawable = 0x7f020018
/**
 * Drawable to use for the Share action button in WebView selection action modes
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionModeShareDrawable = 0x7f020019
/**
 * Background drawable to use for action mode UI in the lower split bar
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionModeSplitBackground = 0x7f02001a
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionModeStyle = 0x7f02001b
/**
 * Drawable to use for the Web Search action button in WebView selection action modes
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionModeWebSearchDrawable = 0x7f02001c
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionOverflowButtonStyle = 0x7f02001d
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val actionOverflowMenuStyle = 0x7f02001e
/**
 * The name of an optional ActionProvider class to instantiate an action view
 * and perform operations such as default action for that menu item.
 * See [android.view.MenuItem.setActionProvider]
 * for more info.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val actionProviderClass = 0x7f02001f
/**
 * The name of an optional View class to instantiate and use as an
 * action view. See [android.view.MenuItem.setActionView]
 * for more info.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val actionViewClass = 0x7f020020
/**
 * Default ActivityChooserView style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val activityChooserViewStyle = 0x7f020021
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val alertDialogButtonGroupStyle = 0x7f020022
/**
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val alertDialogCenterButtons = 0x7f020023
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val alertDialogStyle = 0x7f020024
/**
 * Theme to use for alert dialogs spawned from this theme.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val alertDialogTheme = 0x7f020025
/**
 * Whether to automatically stack the buttons when there is not
 * enough space to lay them out side-by-side.
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val allowStacking = 0x7f020026
/**
 * Alpha multiplier applied to the base color.
 *
 * May be a floating point value, such as "`1.2`".
 */
     val alpha = 0x7f020027
/**
 * The alphabetic modifier key. This is the modifier when using a keyboard
 * with alphabetic keys. The values should be kept in sync with KeyEvent
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>ALT</td><td>2</td><td></td></tr>
 * <tr><td>CTRL</td><td>1000</td><td></td></tr>
 * <tr><td>FUNCTION</td><td>8</td><td></td></tr>
 * <tr><td>META</td><td>10000</td><td></td></tr>
 * <tr><td>SHIFT</td><td>1</td><td></td></tr>
 * <tr><td>SYM</td><td>4</td><td></td></tr>
</table> *
 */
     val alphabeticModifiers = 0x7f020028
/**
 * The length of the arrow head when formed to make an arrow
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val arrowHeadLength = 0x7f020029
/**
 * The length of the shaft when formed to make an arrow
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val arrowShaftLength = 0x7f02002a
/**
 * Default AutoCompleteTextView style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val autoCompleteTextViewStyle = 0x7f02002b
/**
 * The maximum text size constraint to be used when auto-sizing text.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val autoSizeMaxTextSize = 0x7f02002c
/**
 * The minimum text size constraint to be used when auto-sizing text.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val autoSizeMinTextSize = 0x7f02002d
/**
 * Resource array of dimensions to be used in conjunction with
 * `autoSizeTextType` set to `uniform`. Overrides
 * `autoSizeStepGranularity` if set.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val autoSizePresetSizes = 0x7f02002e
/**
 * Specify the auto-size step size if `autoSizeTextType` is set to
 * `uniform`. The default is 1px. Overwrites
 * `autoSizePresetSizes` if set.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val autoSizeStepGranularity = 0x7f02002f
/**
 * Specify the type of auto-size. Note that this feature is not supported by EditText,
 * works only for TextView.
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>none</td><td>0</td><td>No auto-sizing (default).</td></tr>
 * <tr><td>uniform</td><td>1</td><td>Uniform horizontal and vertical text size scaling to fit within the
 * container.</td></tr>
</table> *
 */
     val autoSizeTextType = 0x7f020030
/**
 * Specifies a background drawable for the action bar.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val background = 0x7f020031
/**
 * Specifies a background drawable for the bottom component of a split action bar.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val backgroundSplit = 0x7f020032
/**
 * Specifies a background drawable for a second stacked row of the action bar.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val backgroundStacked = 0x7f020033
/**
 * Tint to apply to the background.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val backgroundTint = 0x7f020034
/**
 * Blending mode used to apply the background tint.
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and icon color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 */
     val backgroundTintMode = 0x7f020035
/**
 * The length of the bars when they are parallel to each other
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val barLength = 0x7f020036
/**
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val barrierAllowsGoneWidgets = 0x7f020037
/**
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>3</td><td></td></tr>
 * <tr><td>end</td><td>6</td><td></td></tr>
 * <tr><td>left</td><td>0</td><td></td></tr>
 * <tr><td>right</td><td>1</td><td></td></tr>
 * <tr><td>start</td><td>5</td><td></td></tr>
 * <tr><td>top</td><td>2</td><td></td></tr>
</table> *
 */
     val barrierDirection = 0x7f020038
/**
 * Style for buttons without an explicit border, often used in groups.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val borderlessButtonStyle = 0x7f020039
/**
 * Style for buttons within button bars
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val buttonBarButtonStyle = 0x7f02003a
/**
 * Style for the "negative" buttons within button bars
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val buttonBarNegativeButtonStyle = 0x7f02003b
/**
 * Style for the "neutral" buttons within button bars
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val buttonBarNeutralButtonStyle = 0x7f02003c
/**
 * Style for the "positive" buttons within button bars
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val buttonBarPositiveButtonStyle = 0x7f02003d
/**
 * Style for button bars
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val buttonBarStyle = 0x7f02003e
/**
 * Compat attr to load backported drawable types
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val buttonCompat = 0x7f02003f
/**
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
</table> *
 */
     val buttonGravity = 0x7f020040
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val buttonIconDimen = 0x7f020041
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val buttonPanelSideLayout = 0x7f020042
/**
 * Normal Button style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val buttonStyle = 0x7f020043
/**
 * Small Button style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val buttonStyleSmall = 0x7f020044
/**
 * Tint to apply to the button drawable.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val buttonTint = 0x7f020045
/**
 * Blending mode used to apply the button tint.
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and icon color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 */
     val buttonTintMode = 0x7f020046
/**
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val chainUseRtl = 0x7f020047
/**
 * Default Checkbox style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val checkboxStyle = 0x7f020048
/**
 * Default CheckedTextView style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val checkedTextViewStyle = 0x7f020049
/**
 * Close button icon
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val closeIcon = 0x7f02004a
/**
 * Specifies a layout to use for the "close" item at the starting edge.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val closeItemLayout = 0x7f02004b
/**
 * Text to set as the content description for the collapse button.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val collapseContentDescription = 0x7f02004c
/**
 * Icon drawable to use for the collapse button.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val collapseIcon = 0x7f02004d
/**
 * The drawing color for the bars
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val color = 0x7f02004e
/**
 * Bright complement to the primary branding color. By default, this is the color applied
 * to framework controls (via colorControlActivated).
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val colorAccent = 0x7f02004f
/**
 * Default color of background imagery for floating components, ex. dialogs, popups, and cards.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val colorBackgroundFloating = 0x7f020050
/**
 * The color applied to framework buttons in their normal state.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val colorButtonNormal = 0x7f020051
/**
 * The color applied to framework controls in their activated (ex. checked) state.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val colorControlActivated = 0x7f020052
/**
 * The color applied to framework control highlights (ex. ripples, list selectors).
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val colorControlHighlight = 0x7f020053
/**
 * The color applied to framework controls in their normal state.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val colorControlNormal = 0x7f020054
/**
 * Color used for error states and things that need to be drawn to
 * the user's attention.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val colorError = 0x7f020055
/**
 * The primary branding color for the app. By default, this is the color applied to the
 * action bar background.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val colorPrimary = 0x7f020056
/**
 * Dark variant of the primary branding color. By default, this is the color applied to
 * the status bar (via statusBarColor) and navigation bar (via navigationBarColor).
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val colorPrimaryDark = 0x7f020057
/**
 * The color applied to framework switch thumbs in their normal state.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val colorSwitchThumbNormal = 0x7f020058
/**
 * Commit icon shown in the query suggestion row
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val commitIcon = 0x7f020059
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val constraintSet = 0x7f02005a
/**
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val constraint_referenced_ids = 0x7f02005b
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val content = 0x7f02005c
/**
 * The content description associated with the item.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val contentDescription = 0x7f02005d
/**
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val contentInsetEnd = 0x7f02005e
/**
 * Minimum inset for content views within a bar when actions from a menu
 * are present. Only valid for some themes and configurations.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val contentInsetEndWithActions = 0x7f02005f
/**
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val contentInsetLeft = 0x7f020060
/**
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val contentInsetRight = 0x7f020061
/**
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val contentInsetStart = 0x7f020062
/**
 * Minimum inset for content views within a bar when a navigation button
 * is present, such as the Up button. Only valid for some themes and configurations.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val contentInsetStartWithNavigation = 0x7f020063
/**
 * The background used by framework controls.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val controlBackground = 0x7f020064
/**
 * Specifies a layout for custom navigation. Overrides navigationMode.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val customNavigationLayout = 0x7f020065
/**
 * Default query hint used when `queryHint` is undefined and
 * the search view's `SearchableInfo` does not provide a hint.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val defaultQueryHint = 0x7f020066
/**
 * Preferred corner radius of dialogs.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val dialogCornerRadius = 0x7f020067
/**
 * Preferred padding for dialog content.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val dialogPreferredPadding = 0x7f020068
/**
 * Theme to use for dialogs spawned from this theme.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val dialogTheme = 0x7f020069
/**
 * Options affecting how the action bar is displayed.
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>disableHome</td><td>20</td><td></td></tr>
 * <tr><td>homeAsUp</td><td>4</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>showCustom</td><td>10</td><td></td></tr>
 * <tr><td>showHome</td><td>2</td><td></td></tr>
 * <tr><td>showTitle</td><td>8</td><td></td></tr>
 * <tr><td>useLogo</td><td>1</td><td></td></tr>
</table> *
 */
     val displayOptions = 0x7f02006a
/**
 * Specifies the drawable used for item dividers.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val divider = 0x7f02006b
/**
 * A drawable that may be used as a horizontal divider between visual elements.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val dividerHorizontal = 0x7f02006c
/**
 * Size of padding on either end of a divider.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val dividerPadding = 0x7f02006d
/**
 * A drawable that may be used as a vertical divider between visual elements.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val dividerVertical = 0x7f02006e
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val drawableBottomCompat = 0x7f02006f
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val drawableEndCompat = 0x7f020070
/**
 * Compound drawables allowing the use of vector drawable when running on older versions
 * of the platform.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val drawableLeftCompat = 0x7f020071
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val drawableRightCompat = 0x7f020072
/**
 * The total size of the drawable
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val drawableSize = 0x7f020073
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val drawableStartCompat = 0x7f020074
/**
 * Tint to apply to the compound (left, top, etc.) drawables.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val drawableTint = 0x7f020075
/**
 * Blending mode used to apply the compound (left, top, etc.) drawables tint.
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 */
     val drawableTintMode = 0x7f020076
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val drawableTopCompat = 0x7f020077
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val drawerArrowStyle = 0x7f020078
/**
 * ListPopupWindow compatibility
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val dropDownListViewStyle = 0x7f020079
/**
 * The preferred item height for dropdown lists.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val dropdownListPreferredItemHeight = 0x7f02007a
/**
 * EditText background drawable.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val editTextBackground = 0x7f02007b
/**
 * EditText text foreground color.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val editTextColor = 0x7f02007c
/**
 * Default EditText style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val editTextStyle = 0x7f02007d
/**
 * Elevation for the action bar itself
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val elevation = 0x7f02007e
/**
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>gone</td><td>0</td><td></td></tr>
 * <tr><td>invisible</td><td>1</td><td></td></tr>
</table> *
 */
     val emptyVisibility = 0x7f02007f
/**
 * The drawable to show in the button for expanding the activities overflow popup.
 * **Note:** Clients would like to set this drawable
 * as a clue about the action the chosen activity will perform. For
 * example, if share activity is to be chosen the drawable should
 * give a clue that sharing is to be performed.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val expandActivityOverflowButtonDrawable = 0x7f020080
/**
 * Distance from the top of the TextView to the first text baseline. If set, this
 * overrides the value set for paddingTop.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val firstBaselineToTopHeight = 0x7f020081
/**
 * The reference to the font file to be used. This should be a file in the res/font folder
 * and should therefore have an R reference value. E.g. @font/myfont
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val font = 0x7f020082
/**
 * The attribute for the font family.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val fontFamily = 0x7f020083
/**
 * The authority of the Font Provider to be used for the request.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val fontProviderAuthority = 0x7f020084
/**
 * The sets of hashes for the certificates the provider should be signed with. This is
 * used to verify the identity of the provider, and is only required if the provider is not
 * part of the system image. This value may point to one list or a list of lists, where each
 * individual list represents one collection of signature hashes. Refer to your font provider's
 * documentation for these values.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val fontProviderCerts = 0x7f020085
/**
 * The strategy to be used when fetching font data from a font provider in XML layouts.
 * This attribute is ignored when the resource is loaded from code, as it is equivalent to the
 * choice of API between [ ][androidx.core.content.res.ResourcesCompat.getFont] (blocking) and
 * [ ][androidx.core.content.res.ResourcesCompat.getFont]
 * (async).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>async</td><td>1</td><td>The async font fetch works as follows.
 * First, check the local cache, then if the requeted font is not cached, trigger a
 * request the font and continue with layout inflation. Once the font fetch succeeds, the
 * target text view will be refreshed with the downloaded font data. The
 * fontProviderFetchTimeout will be ignored if async loading is specified.</td></tr>
 * <tr><td>blocking</td><td>0</td><td>The blocking font fetch works as follows.
 * First, check the local cache, then if the requested font is not cached, request the
 * font from the provider and wait until it is finished.  You can change the length of
 * the timeout by modifying fontProviderFetchTimeout.  If the timeout happens, the
 * default typeface will be used instead.</td></tr>
</table> *
 */
     val fontProviderFetchStrategy = 0x7f020086
/**
 * The length of the timeout during fetching.
 *
 * May be an integer value, such as "`100`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>forever</td><td>ffffffff</td><td>A special value for the timeout. In this case, the blocking font fetching will not
 * timeout and wait until a reply is received from the font provider.</td></tr>
</table> *
 */
     val fontProviderFetchTimeout = 0x7f020087
/**
 * The package for the Font Provider to be used for the request. This is used to verify
 * the identity of the provider.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val fontProviderPackage = 0x7f020088
/**
 * The query to be sent over to the provider. Refer to your font provider's documentation
 * on the format of this string.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val fontProviderQuery = 0x7f020089
/**
 * The style of the given font file. This will be used when the font is being loaded into
 * the font stack and will override any style information in the font's header tables. If
 * unspecified, the value in the font's header tables will be used.
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>italic</td><td>1</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
</table> *
 */
     val fontStyle = 0x7f02008a
/**
 * The variation settings to be applied to the font. The string should be in the following
 * format: "'tag1' value1, 'tag2' value2, ...". If the default variation settings should be
 * used, or the font used does not support variation settings, this attribute needs not be
 * specified.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val fontVariationSettings = 0x7f02008b
/**
 * The weight of the given font file. This will be used when the font is being loaded into
 * the font stack and will override any weight information in the font's header tables. Must
 * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
 * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
 * in the font's header tables will be used.
 *
 * May be an integer value, such as "`100`".
 */
     val fontWeight = 0x7f02008c
/**
 * The max gap between the bars when they are parallel to each other
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val gapBetweenBars = 0x7f02008d
/**
 * Go button icon
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val goIcon = 0x7f02008e
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val height = 0x7f02008f
/**
 * Set true to hide the action bar on a vertical nested scroll of content.
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val hideOnContentScroll = 0x7f020090
/**
 * Specifies a drawable to use for the 'home as up' indicator.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val homeAsUpIndicator = 0x7f020091
/**
 * Specifies a layout to use for the "home" section of the action bar.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val homeLayout = 0x7f020092
/**
 * Specifies the drawable used for the application icon.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val icon = 0x7f020093
/**
 * Tint to apply to the icon.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val iconTint = 0x7f020094
/**
 * Blending mode used to apply the icon tint.
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and icon color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the icon with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the icon, but with the icon’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the icon. The icon’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the icon.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 */
     val iconTintMode = 0x7f020095
/**
 * The default state of the SearchView. If true, it will be iconified when not in
 * use and expanded when clicked.
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val iconifiedByDefault = 0x7f020096
/**
 * ImageButton background drawable.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val imageButtonStyle = 0x7f020097
/**
 * Specifies a style resource to use for an indeterminate progress spinner.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val indeterminateProgressStyle = 0x7f020098
/**
 * The maximal number of items initially shown in the activity list.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val initialActivityCount = 0x7f020099
/**
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val isLightTheme = 0x7f02009a
/**
 * Specifies padding that should be applied to the left and right sides of
 * system-provided items in the bar.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val itemPadding = 0x7f02009b
/**
 * Distance from the bottom of the TextView to the last text baseline. If set, this
 * overrides the value set for paddingBottom.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val lastBaselineToBottomHeight = 0x7f02009c
/**
 * The layout to use for the search view.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val layout = 0x7f02009d
/**
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val layout_constrainedHeight = 0x7f02009e
/**
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val layout_constrainedWidth = 0x7f02009f
/**
 *
 * May be an integer value, such as "`100`".
 */
     val layout_constraintBaseline_creator = 0x7f0200a0
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 */
     val layout_constraintBaseline_toBaselineOf = 0x7f0200a1
/**
 *
 * May be an integer value, such as "`100`".
 */
     val layout_constraintBottom_creator = 0x7f0200a2
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 */
     val layout_constraintBottom_toBottomOf = 0x7f0200a3
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 */
     val layout_constraintBottom_toTopOf = 0x7f0200a4
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val layout_constraintCircle = 0x7f0200a5
/**
 *
 * May be an integer value, such as "`100`".
 */
     val layout_constraintCircleAngle = 0x7f0200a6
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val layout_constraintCircleRadius = 0x7f0200a7
/**
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val layout_constraintDimensionRatio = 0x7f0200a8
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 */
     val layout_constraintEnd_toEndOf = 0x7f0200a9
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 */
     val layout_constraintEnd_toStartOf = 0x7f0200aa
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val layout_constraintGuide_begin = 0x7f0200ab
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val layout_constraintGuide_end = 0x7f0200ac
/**
 *
 * May be a floating point value, such as "`1.2`".
 */
     val layout_constraintGuide_percent = 0x7f0200ad
/**
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>percent</td><td>2</td><td></td></tr>
 * <tr><td>spread</td><td>0</td><td></td></tr>
 * <tr><td>wrap</td><td>1</td><td></td></tr>
</table> *
 */
     val layout_constraintHeight_default = 0x7f0200ae
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap</td><td>fffffffe</td><td></td></tr>
</table> *
 */
     val layout_constraintHeight_max = 0x7f0200af
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap</td><td>fffffffe</td><td></td></tr>
</table> *
 */
     val layout_constraintHeight_min = 0x7f0200b0
/**
 *
 * May be a floating point value, such as "`1.2`".
 */
     val layout_constraintHeight_percent = 0x7f0200b1
/**
 *
 * May be a floating point value, such as "`1.2`".
 */
     val layout_constraintHorizontal_bias = 0x7f0200b2
/**
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>packed</td><td>2</td><td></td></tr>
 * <tr><td>spread</td><td>0</td><td></td></tr>
 * <tr><td>spread_inside</td><td>1</td><td></td></tr>
</table> *
 */
     val layout_constraintHorizontal_chainStyle = 0x7f0200b3
/**
 *
 * May be a floating point value, such as "`1.2`".
 */
     val layout_constraintHorizontal_weight = 0x7f0200b4
/**
 *
 * May be an integer value, such as "`100`".
 */
     val layout_constraintLeft_creator = 0x7f0200b5
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 */
     val layout_constraintLeft_toLeftOf = 0x7f0200b6
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 */
     val layout_constraintLeft_toRightOf = 0x7f0200b7
/**
 *
 * May be an integer value, such as "`100`".
 */
     val layout_constraintRight_creator = 0x7f0200b8
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 */
     val layout_constraintRight_toLeftOf = 0x7f0200b9
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 */
     val layout_constraintRight_toRightOf = 0x7f0200ba
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 */
     val layout_constraintStart_toEndOf = 0x7f0200bb
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 */
     val layout_constraintStart_toStartOf = 0x7f0200bc
/**
 *
 * May be an integer value, such as "`100`".
 */
     val layout_constraintTop_creator = 0x7f0200bd
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 */
     val layout_constraintTop_toBottomOf = 0x7f0200be
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 */
     val layout_constraintTop_toTopOf = 0x7f0200bf
/**
 *
 * May be a floating point value, such as "`1.2`".
 */
     val layout_constraintVertical_bias = 0x7f0200c0
/**
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>packed</td><td>2</td><td></td></tr>
 * <tr><td>spread</td><td>0</td><td></td></tr>
 * <tr><td>spread_inside</td><td>1</td><td></td></tr>
</table> *
 */
     val layout_constraintVertical_chainStyle = 0x7f0200c1
/**
 *
 * May be a floating point value, such as "`1.2`".
 */
     val layout_constraintVertical_weight = 0x7f0200c2
/**
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>percent</td><td>2</td><td></td></tr>
 * <tr><td>spread</td><td>0</td><td></td></tr>
 * <tr><td>wrap</td><td>1</td><td></td></tr>
</table> *
 */
     val layout_constraintWidth_default = 0x7f0200c3
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap</td><td>fffffffe</td><td></td></tr>
</table> *
 */
     val layout_constraintWidth_max = 0x7f0200c4
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap</td><td>fffffffe</td><td></td></tr>
</table> *
 */
     val layout_constraintWidth_min = 0x7f0200c5
/**
 *
 * May be a floating point value, such as "`1.2`".
 */
     val layout_constraintWidth_percent = 0x7f0200c6
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val layout_editor_absoluteX = 0x7f0200c7
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val layout_editor_absoluteY = 0x7f0200c8
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val layout_goneMarginBottom = 0x7f0200c9
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val layout_goneMarginEnd = 0x7f0200ca
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val layout_goneMarginLeft = 0x7f0200cb
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val layout_goneMarginRight = 0x7f0200cc
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val layout_goneMarginStart = 0x7f0200cd
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val layout_goneMarginTop = 0x7f0200ce
/**
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>barrier</td><td>2</td><td></td></tr>
 * <tr><td>chains</td><td>4</td><td></td></tr>
 * <tr><td>dimensions</td><td>8</td><td></td></tr>
 * <tr><td>direct</td><td>1</td><td>direct, barriers, chains</td></tr>
 * <tr><td>groups</td><td>20</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>standard</td><td>7</td><td></td></tr>
</table> *
 */
     val layout_optimizationLevel = 0x7f0200cf
/**
 * Explicit height between lines of text. If set, this will override the values set
 * for lineSpacingExtra and lineSpacingMultiplier.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val lineHeight = 0x7f0200d0
/**
 * Drawable used as a background for selected list items.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val listChoiceBackgroundIndicator = 0x7f0200d1
/**
 * Animated Drawable to use for single choice indicators.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val listChoiceIndicatorMultipleAnimated = 0x7f0200d2
/**
 * Animated Drawable to use for multiple choice indicators.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val listChoiceIndicatorSingleAnimated = 0x7f0200d3
/**
 * The list divider used in alert dialogs.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val listDividerAlertDialog = 0x7f0200d4
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val listItemLayout = 0x7f0200d5
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val listLayout = 0x7f0200d6
/**
 * Default menu-style ListView style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val listMenuViewStyle = 0x7f0200d7
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val listPopupWindowStyle = 0x7f0200d8
/**
 * The preferred list item height.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val listPreferredItemHeight = 0x7f0200d9
/**
 * A larger, more robust list item height.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val listPreferredItemHeightLarge = 0x7f0200da
/**
 * A smaller, sleeker list item height.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val listPreferredItemHeightSmall = 0x7f0200db
/**
 * The preferred padding along the end edge of list items.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val listPreferredItemPaddingEnd = 0x7f0200dc
/**
 * The preferred padding along the left edge of list items.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val listPreferredItemPaddingLeft = 0x7f0200dd
/**
 * The preferred padding along the right edge of list items.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val listPreferredItemPaddingRight = 0x7f0200de
/**
 * The preferred padding along the start edge of list items.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val listPreferredItemPaddingStart = 0x7f0200df
/**
 * Specifies the drawable used for the application logo.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val logo = 0x7f0200e0
/**
 * A content description string to describe the appearance of the
 * associated logo image.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val logoDescription = 0x7f0200e1
/**
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val maxButtonHeight = 0x7f0200e2
/**
 * When set to true, all children with a weight will be considered having
 * the minimum size of the largest child. If false, all children are
 * measured normally.
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val measureWithLargestChild = 0x7f0200e3
/**
 * Menu resource to inflate to be shown in the toolbar
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val menu = 0x7f0200e4
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val multiChoiceItemLayout = 0x7f0200e5
/**
 * Text to set as the content description for the navigation button
 * located at the start of the toolbar.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val navigationContentDescription = 0x7f0200e6
/**
 * Icon drawable to use for the navigation button located at
 * the start of the toolbar.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val navigationIcon = 0x7f0200e7
/**
 * The type of navigation to use.
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>listMode</td><td>1</td><td>The action bar will use a selection list for navigation.</td></tr>
 * <tr><td>normal</td><td>0</td><td>Normal static title text</td></tr>
 * <tr><td>tabMode</td><td>2</td><td>The action bar will use a series of horizontal tabs for navigation.</td></tr>
</table> *
 */
     val navigationMode = 0x7f0200e8
/**
 * The numeric modifier key. This is the modifier when using a numeric (e.g., 12-key)
 * keyboard. The values should be kept in sync with KeyEvent
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>ALT</td><td>2</td><td></td></tr>
 * <tr><td>CTRL</td><td>1000</td><td></td></tr>
 * <tr><td>FUNCTION</td><td>8</td><td></td></tr>
 * <tr><td>META</td><td>10000</td><td></td></tr>
 * <tr><td>SHIFT</td><td>1</td><td></td></tr>
 * <tr><td>SYM</td><td>4</td><td></td></tr>
</table> *
 */
     val numericModifiers = 0x7f0200e9
/**
 * Whether the popup window should overlap its anchor view.
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val overlapAnchor = 0x7f0200ea
/**
 * Bottom padding to use when no buttons are present.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val paddingBottomNoButtons = 0x7f0200eb
/**
 * Sets the padding, in pixels, of the end edge; see [android.R.attr.padding].
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val paddingEnd = 0x7f0200ec
/**
 * Sets the padding, in pixels, of the start edge; see [android.R.attr.padding].
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val paddingStart = 0x7f0200ed
/**
 * Top padding to use when no title is present.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val paddingTopNoTitle = 0x7f0200ee
/**
 * The background of a panel when it is inset from the left and right edges of the screen.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val panelBackground = 0x7f0200ef
/**
 * Default Panel Menu style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val panelMenuListTheme = 0x7f0200f0
/**
 * Default Panel Menu width.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val panelMenuListWidth = 0x7f0200f1
/**
 * Default PopupMenu style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val popupMenuStyle = 0x7f0200f2
/**
 * Reference to a theme that should be used to inflate popups
 * shown by widgets in the action bar.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val popupTheme = 0x7f0200f3
/**
 * Default PopupWindow style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val popupWindowStyle = 0x7f0200f4
/**
 * Whether space should be reserved in layout when an icon is missing.
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val preserveIconSpacing = 0x7f0200f5
/**
 * Specifies the horizontal padding on either end for an embedded progress bar.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val progressBarPadding = 0x7f0200f6
/**
 * Specifies a style resource to use for an embedded progress bar.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val progressBarStyle = 0x7f0200f7
/**
 * Background for the section containing the search query
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val queryBackground = 0x7f0200f8
/**
 * An optional user-defined query hint string to be displayed in the empty query field.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val queryHint = 0x7f0200f9
/**
 * Default RadioButton style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val radioButtonStyle = 0x7f0200fa
/**
 * Default RatingBar style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val ratingBarStyle = 0x7f0200fb
/**
 * Indicator RatingBar style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val ratingBarStyleIndicator = 0x7f0200fc
/**
 * Small indicator RatingBar style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val ratingBarStyleSmall = 0x7f0200fd
/**
 * Search icon displayed as a text field hint
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val searchHintIcon = 0x7f0200fe
/**
 * Search icon
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val searchIcon = 0x7f0200ff
/**
 * Style for the search query widget.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val searchViewStyle = 0x7f020100
/**
 * Default SeekBar style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val seekBarStyle = 0x7f020101
/**
 * A style that may be applied to buttons or other selectable items
 * that should react to pressed and focus states, but that do not
 * have a clear visual border along the edges.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val selectableItemBackground = 0x7f020102
/**
 * Background drawable for borderless standalone items that need focus/pressed states.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val selectableItemBackgroundBorderless = 0x7f020103
/**
 * How this item should display in the Action Bar, if present.
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>always</td><td>2</td><td>Always show this item in an actionbar, even if it would override
 * the system's limits of how much stuff to put there. This may make
 * your action bar look bad on some screens. In most cases you should
 * use "ifRoom" instead. Mutually exclusive with "ifRoom" and "never".</td></tr>
 * <tr><td>collapseActionView</td><td>8</td><td>This item's action view collapses to a normal menu
 * item. When expanded, the action view takes over a
 * larger segment of its container.</td></tr>
 * <tr><td>ifRoom</td><td>1</td><td>Show this item in an action bar if there is room for it as determined
 * by the system. Favor this option over "always" where possible.
 * Mutually exclusive with "never" and "always".</td></tr>
 * <tr><td>never</td><td>0</td><td>Never show this item in an action bar, show it in the overflow menu instead.
 * Mutually exclusive with "ifRoom" and "always".</td></tr>
 * <tr><td>withText</td><td>4</td><td>When this item is shown as an action in the action bar, show a text
 * label with it even if it has an icon representation.</td></tr>
</table> *
 */
     val showAsAction = 0x7f020104
/**
 * Setting for which dividers to show.
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>beginning</td><td>1</td><td></td></tr>
 * <tr><td>end</td><td>4</td><td></td></tr>
 * <tr><td>middle</td><td>2</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
</table> *
 */
     val showDividers = 0x7f020105
/**
 * Whether to draw on/off text.
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val showText = 0x7f020106
/**
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val showTitle = 0x7f020107
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val singleChoiceItemLayout = 0x7f020108
/**
 * Whether bars should rotate or not during transition
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val spinBars = 0x7f020109
/**
 * Default Spinner style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val spinnerDropDownItemStyle = 0x7f02010a
/**
 * Default Spinner style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val spinnerStyle = 0x7f02010b
/**
 * Whether to split the track and leave a gap for the thumb drawable.
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val splitTrack = 0x7f02010c
/**
 * Sets a drawable as the content of this ImageView. Allows the use of vector drawable
 * when running on older versions of the platform.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val srcCompat = 0x7f02010d
/**
 * State identifier indicating the popup will be above the anchor.
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val state_above_anchor = 0x7f02010e
/**
 * Drawable for the arrow icon indicating a particular item is a submenu.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val subMenuArrow = 0x7f02010f
/**
 * Background for the section containing the action (e.g. voice search)
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val submitBackground = 0x7f020110
/**
 * Specifies subtitle text used for navigationMode="normal"
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val subtitle = 0x7f020111
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val subtitleTextAppearance = 0x7f020112
/**
 * A color to apply to the subtitle string.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val subtitleTextColor = 0x7f020113
/**
 * Specifies a style to use for subtitle text.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val subtitleTextStyle = 0x7f020114
/**
 * Layout for query suggestion rows
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val suggestionRowLayout = 0x7f020115
/**
 * Minimum width for the switch component
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val switchMinWidth = 0x7f020116
/**
 * Minimum space between the switch and caption text
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val switchPadding = 0x7f020117
/**
 * Default style for the Switch widget.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val switchStyle = 0x7f020118
/**
 * TextAppearance style for text displayed on the switch thumb.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val switchTextAppearance = 0x7f020119
/**
 * Present the text in ALL CAPS. This may use a small-caps form when available.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val textAllCaps = 0x7f02011a
/**
 * Text color, typeface, size, and style for the text inside of a popup menu.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val textAppearanceLargePopupMenu = 0x7f02011b
/**
 * The preferred TextAppearance for the primary text of list items.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val textAppearanceListItem = 0x7f02011c
/**
 * The preferred TextAppearance for the secondary text of list items.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val textAppearanceListItemSecondary = 0x7f02011d
/**
 * The preferred TextAppearance for the primary text of small list items.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val textAppearanceListItemSmall = 0x7f02011e
/**
 * Text color, typeface, size, and style for header text inside of a popup menu.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val textAppearancePopupMenuHeader = 0x7f02011f
/**
 * Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val textAppearanceSearchResultSubtitle = 0x7f020120
/**
 * Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val textAppearanceSearchResultTitle = 0x7f020121
/**
 * Text color, typeface, size, and style for small text inside of a popup menu.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val textAppearanceSmallPopupMenu = 0x7f020122
/**
 * Color of list item text in alert dialogs.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val textColorAlertDialogListItem = 0x7f020123
/**
 * Text color for urls in search suggestions, used by things like global search
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val textColorSearchUrl = 0x7f020124
/**
 * Set the textLocale by a comma-separated language tag string,
 * for example "ja-JP,zh-CN". This attribute only takes effect on API 21 and above.
 * Before API 24, only the first language tag is used. Starting from API 24,
 * the string will be converted into a [android.os.LocaleList] and then used by
 * [android.widget.TextView]
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val textLocale = 0x7f020125
/**
 * Deprecated.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val theme = 0x7f020126
/**
 * The thickness (stroke size) for the bar paint
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val thickness = 0x7f020127
/**
 * Amount of padding on either side of text within the switch thumb.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val thumbTextPadding = 0x7f020128
/**
 * Tint to apply to the thumb drawable.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val thumbTint = 0x7f020129
/**
 * Blending mode used to apply the thumb tint.
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 */
     val thumbTintMode = 0x7f02012a
/**
 * Drawable displayed at each progress position on a seekbar.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val tickMark = 0x7f02012b
/**
 * Tint to apply to the tick mark drawable.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val tickMarkTint = 0x7f02012c
/**
 * Blending mode used to apply the tick mark tint.
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 */
     val tickMarkTintMode = 0x7f02012d
/**
 * Tint to apply to the image source.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val tint = 0x7f02012e
/**
 * Blending mode used to apply the image source tint.
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and icon color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 */
     val tintMode = 0x7f02012f
/**
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val title = 0x7f020130
/**
 * Specifies extra space on the left, start, right and end sides
 * of the toolbar's title. Margin values should be positive.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val titleMargin = 0x7f020131
/**
 * Specifies extra space on the bottom side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val titleMarginBottom = 0x7f020132
/**
 * Specifies extra space on the end side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val titleMarginEnd = 0x7f020133
/**
 * Specifies extra space on the start side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val titleMarginStart = 0x7f020134
/**
 * Specifies extra space on the top side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
     val titleMarginTop = 0x7f020135
/**
 * {@deprecated Use titleMargin}
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */
    @Deprecated("")
 val titleMargins = 0x7f020136
/**
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val titleTextAppearance = 0x7f020137
/**
 * A color to apply to the title string.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val titleTextColor = 0x7f020138
/**
 * Specifies a style to use for title text.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val titleTextStyle = 0x7f020139
/**
 * Default Toolar NavigationButtonStyle
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val toolbarNavigationButtonStyle = 0x7f02013a
/**
 * Default Toolbar style.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val toolbarStyle = 0x7f02013b
/**
 * Foreground color to use for tooltips
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val tooltipForegroundColor = 0x7f02013c
/**
 * Background to use for tooltips
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val tooltipFrameBackground = 0x7f02013d
/**
 * The tooltip text associated with the item.
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val tooltipText = 0x7f02013e
/**
 * Drawable to use as the "track" that the switch thumb slides within.
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val track = 0x7f02013f
/**
 * Tint to apply to the track.
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 */
     val trackTint = 0x7f020140
/**
 * Blending mode used to apply the track tint.
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 */
     val trackTintMode = 0x7f020141
/**
 * The index of the font in the tcc font file. If the font file referenced is not in the
 * tcc format, this attribute needs not be specified.
 *
 * May be an integer value, such as "`100`".
 */
     val ttcIndex = 0x7f020142
/**
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */
     val viewInflaterClass = 0x7f020143
/**
 * Voice button icon
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 */
     val voiceIcon = 0x7f020144
/**
 * Flag indicating whether this window should have an Action Bar
 * in place of the usual title bar.
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val windowActionBar = 0x7f020145
/**
 * Flag indicating whether this window's Action Bar should overlay
 * application content. Does nothing if the window would not
 * have an Action Bar.
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val windowActionBarOverlay = 0x7f020146
/**
 * Flag indicating whether action modes should overlay window content
 * when there is not reserved space for their UI (such as an Action Bar).
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val windowActionModeOverlay = 0x7f020147
/**
 * A fixed height for the window along the major axis of the screen,
 * that is, when in portrait. Can be either an absolute dimension
 * or a fraction of the screen size in that dimension.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */
     val windowFixedHeightMajor = 0x7f020148
/**
 * A fixed height for the window along the minor axis of the screen,
 * that is, when in landscape. Can be either an absolute dimension
 * or a fraction of the screen size in that dimension.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */
     val windowFixedHeightMinor = 0x7f020149
/**
 * A fixed width for the window along the major axis of the screen,
 * that is, when in landscape. Can be either an absolute dimension
 * or a fraction of the screen size in that dimension.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */
     val windowFixedWidthMajor = 0x7f02014a
/**
 * A fixed width for the window along the minor axis of the screen,
 * that is, when in portrait. Can be either an absolute dimension
 * or a fraction of the screen size in that dimension.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */
     val windowFixedWidthMinor = 0x7f02014b
/**
 * The minimum width the window is allowed to be, along the major
 * axis of the screen.  That is, when in landscape.  Can be either
 * an absolute dimension or a fraction of the screen size in that
 * dimension.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */
     val windowMinWidthMajor = 0x7f02014c
/**
 * The minimum width the window is allowed to be, along the minor
 * axis of the screen.  That is, when in portrait.  Can be either
 * an absolute dimension or a fraction of the screen size in that
 * dimension.
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */
     val windowMinWidthMinor = 0x7f02014d
/**
 * Flag indicating whether there should be no title on this window.
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 */
     val windowNoTitle = 0x7f02014e
}
 object bool {
 val abc_action_bar_embed_tabs = 0x7f030000
 val abc_allow_stacked_button_bar = 0x7f030001
 val abc_config_actionMenuItemAllCaps = 0x7f030002
}
 object color {
 val abc_background_cache_hint_selector_material_dark = 0x7f040000
 val abc_background_cache_hint_selector_material_light = 0x7f040001
 val abc_btn_colored_borderless_text_material = 0x7f040002
 val abc_btn_colored_text_material = 0x7f040003
 val abc_color_highlight_material = 0x7f040004
 val abc_hint_foreground_material_dark = 0x7f040005
 val abc_hint_foreground_material_light = 0x7f040006
 val abc_input_method_navigation_guard = 0x7f040007
 val abc_primary_text_disable_only_material_dark = 0x7f040008
 val abc_primary_text_disable_only_material_light = 0x7f040009
 val abc_primary_text_material_dark = 0x7f04000a
 val abc_primary_text_material_light = 0x7f04000b
 val abc_search_url_text = 0x7f04000c
 val abc_search_url_text_normal = 0x7f04000d
 val abc_search_url_text_pressed = 0x7f04000e
 val abc_search_url_text_selected = 0x7f04000f
 val abc_secondary_text_material_dark = 0x7f040010
 val abc_secondary_text_material_light = 0x7f040011
 val abc_tint_btn_checkable = 0x7f040012
 val abc_tint_default = 0x7f040013
 val abc_tint_edittext = 0x7f040014
 val abc_tint_seek_thumb = 0x7f040015
 val abc_tint_spinner = 0x7f040016
 val abc_tint_switch_track = 0x7f040017
 val accent_material_dark = 0x7f040018
 val accent_material_light = 0x7f040019
 val background_floating_material_dark = 0x7f04001a
 val background_floating_material_light = 0x7f04001b
 val background_material_dark = 0x7f04001c
 val background_material_light = 0x7f04001d
 val bright_foreground_disabled_material_dark = 0x7f04001e
 val bright_foreground_disabled_material_light = 0x7f04001f
 val bright_foreground_inverse_material_dark = 0x7f040020
 val bright_foreground_inverse_material_light = 0x7f040021
 val bright_foreground_material_dark = 0x7f040022
 val bright_foreground_material_light = 0x7f040023
 val button_material_dark = 0x7f040024
 val button_material_light = 0x7f040025
 val colorAccent = 0x7f040026
 val colorPrimary = 0x7f040027
 val colorPrimaryDark = 0x7f040028
 val dim_foreground_disabled_material_dark = 0x7f040029
 val dim_foreground_disabled_material_light = 0x7f04002a
 val dim_foreground_material_dark = 0x7f04002b
 val dim_foreground_material_light = 0x7f04002c
 val error_color_material_dark = 0x7f04002d
 val error_color_material_light = 0x7f04002e
 val foreground_material_dark = 0x7f04002f
 val foreground_material_light = 0x7f040030
 val highlighted_text_material_dark = 0x7f040031
 val highlighted_text_material_light = 0x7f040032
 val material_blue_grey_800 = 0x7f040033
 val material_blue_grey_900 = 0x7f040034
 val material_blue_grey_950 = 0x7f040035
 val material_deep_teal_200 = 0x7f040036
 val material_deep_teal_500 = 0x7f040037
 val material_grey_100 = 0x7f040038
 val material_grey_300 = 0x7f040039
 val material_grey_50 = 0x7f04003a
 val material_grey_600 = 0x7f04003b
 val material_grey_800 = 0x7f04003c
 val material_grey_850 = 0x7f04003d
 val material_grey_900 = 0x7f04003e
 val notification_action_color_filter = 0x7f04003f
 val notification_icon_bg_color = 0x7f040040
 val primary_dark_material_dark = 0x7f040041
 val primary_dark_material_light = 0x7f040042
 val primary_material_dark = 0x7f040043
 val primary_material_light = 0x7f040044
 val primary_text_default_material_dark = 0x7f040045
 val primary_text_default_material_light = 0x7f040046
 val primary_text_disabled_material_dark = 0x7f040047
 val primary_text_disabled_material_light = 0x7f040048
 val ripple_material_dark = 0x7f040049
 val ripple_material_light = 0x7f04004a
 val secondary_text_default_material_dark = 0x7f04004b
 val secondary_text_default_material_light = 0x7f04004c
 val secondary_text_disabled_material_dark = 0x7f04004d
 val secondary_text_disabled_material_light = 0x7f04004e
 val switch_thumb_disabled_material_dark = 0x7f04004f
 val switch_thumb_disabled_material_light = 0x7f040050
 val switch_thumb_material_dark = 0x7f040051
 val switch_thumb_material_light = 0x7f040052
 val switch_thumb_normal_material_dark = 0x7f040053
 val switch_thumb_normal_material_light = 0x7f040054
 val tooltip_background_dark = 0x7f040055
 val tooltip_background_light = 0x7f040056
}
 object dimen {
 val abc_action_bar_content_inset_material = 0x7f050000
 val abc_action_bar_content_inset_with_nav = 0x7f050001
 val abc_action_bar_default_height_material = 0x7f050002
 val abc_action_bar_default_padding_end_material = 0x7f050003
 val abc_action_bar_default_padding_start_material = 0x7f050004
 val abc_action_bar_elevation_material = 0x7f050005
 val abc_action_bar_icon_vertical_padding_material = 0x7f050006
 val abc_action_bar_overflow_padding_end_material = 0x7f050007
 val abc_action_bar_overflow_padding_start_material = 0x7f050008
 val abc_action_bar_stacked_max_height = 0x7f050009
 val abc_action_bar_stacked_tab_max_width = 0x7f05000a
 val abc_action_bar_subtitle_bottom_margin_material = 0x7f05000b
 val abc_action_bar_subtitle_top_margin_material = 0x7f05000c
 val abc_action_button_min_height_material = 0x7f05000d
 val abc_action_button_min_width_material = 0x7f05000e
 val abc_action_button_min_width_overflow_material = 0x7f05000f
 val abc_alert_dialog_button_bar_height = 0x7f050010
 val abc_alert_dialog_button_dimen = 0x7f050011
 val abc_button_inset_horizontal_material = 0x7f050012
 val abc_button_inset_vertical_material = 0x7f050013
 val abc_button_padding_horizontal_material = 0x7f050014
 val abc_button_padding_vertical_material = 0x7f050015
 val abc_cascading_menus_min_smallest_width = 0x7f050016
 val abc_config_prefDialogWidth = 0x7f050017
 val abc_control_corner_material = 0x7f050018
 val abc_control_inset_material = 0x7f050019
 val abc_control_padding_material = 0x7f05001a
 val abc_dialog_corner_radius_material = 0x7f05001b
 val abc_dialog_fixed_height_major = 0x7f05001c
 val abc_dialog_fixed_height_minor = 0x7f05001d
 val abc_dialog_fixed_width_major = 0x7f05001e
 val abc_dialog_fixed_width_minor = 0x7f05001f
 val abc_dialog_list_padding_bottom_no_buttons = 0x7f050020
 val abc_dialog_list_padding_top_no_title = 0x7f050021
 val abc_dialog_min_width_major = 0x7f050022
 val abc_dialog_min_width_minor = 0x7f050023
 val abc_dialog_padding_material = 0x7f050024
 val abc_dialog_padding_top_material = 0x7f050025
 val abc_dialog_title_divider_material = 0x7f050026
 val abc_disabled_alpha_material_dark = 0x7f050027
 val abc_disabled_alpha_material_light = 0x7f050028
 val abc_dropdownitem_icon_width = 0x7f050029
 val abc_dropdownitem_text_padding_left = 0x7f05002a
 val abc_dropdownitem_text_padding_right = 0x7f05002b
 val abc_edit_text_inset_bottom_material = 0x7f05002c
 val abc_edit_text_inset_horizontal_material = 0x7f05002d
 val abc_edit_text_inset_top_material = 0x7f05002e
 val abc_floating_window_z = 0x7f05002f
 val abc_list_item_height_large_material = 0x7f050030
 val abc_list_item_height_material = 0x7f050031
 val abc_list_item_height_small_material = 0x7f050032
 val abc_list_item_padding_horizontal_material = 0x7f050033
 val abc_panel_menu_list_width = 0x7f050034
 val abc_progress_bar_height_material = 0x7f050035
 val abc_search_view_preferred_height = 0x7f050036
 val abc_search_view_preferred_width = 0x7f050037
 val abc_seekbar_track_background_height_material = 0x7f050038
 val abc_seekbar_track_progress_height_material = 0x7f050039
 val abc_select_dialog_padding_start_material = 0x7f05003a
 val abc_switch_padding = 0x7f05003b
 val abc_text_size_body_1_material = 0x7f05003c
 val abc_text_size_body_2_material = 0x7f05003d
 val abc_text_size_button_material = 0x7f05003e
 val abc_text_size_caption_material = 0x7f05003f
 val abc_text_size_display_1_material = 0x7f050040
 val abc_text_size_display_2_material = 0x7f050041
 val abc_text_size_display_3_material = 0x7f050042
 val abc_text_size_display_4_material = 0x7f050043
 val abc_text_size_headline_material = 0x7f050044
 val abc_text_size_large_material = 0x7f050045
 val abc_text_size_medium_material = 0x7f050046
 val abc_text_size_menu_header_material = 0x7f050047
 val abc_text_size_menu_material = 0x7f050048
 val abc_text_size_small_material = 0x7f050049
 val abc_text_size_subhead_material = 0x7f05004a
 val abc_text_size_subtitle_material_toolbar = 0x7f05004b
 val abc_text_size_title_material = 0x7f05004c
 val abc_text_size_title_material_toolbar = 0x7f05004d
 val compat_button_inset_horizontal_material = 0x7f05004e
 val compat_button_inset_vertical_material = 0x7f05004f
 val compat_button_padding_horizontal_material = 0x7f050050
 val compat_button_padding_vertical_material = 0x7f050051
 val compat_control_corner_material = 0x7f050052
 val compat_notification_large_icon_max_height = 0x7f050053
 val compat_notification_large_icon_max_width = 0x7f050054
 val disabled_alpha_material_dark = 0x7f050055
 val disabled_alpha_material_light = 0x7f050056
 val highlight_alpha_material_colored = 0x7f050057
 val highlight_alpha_material_dark = 0x7f050058
 val highlight_alpha_material_light = 0x7f050059
 val hint_alpha_material_dark = 0x7f05005a
 val hint_alpha_material_light = 0x7f05005b
 val hint_pressed_alpha_material_dark = 0x7f05005c
 val hint_pressed_alpha_material_light = 0x7f05005d
 val notification_action_icon_size = 0x7f05005e
 val notification_action_text_size = 0x7f05005f
 val notification_big_circle_margin = 0x7f050060
 val notification_content_margin_start = 0x7f050061
 val notification_large_icon_height = 0x7f050062
 val notification_large_icon_width = 0x7f050063
 val notification_main_column_padding_top = 0x7f050064
 val notification_media_narrow_margin = 0x7f050065
 val notification_right_icon_size = 0x7f050066
 val notification_right_side_padding_top = 0x7f050067
 val notification_small_icon_background_padding = 0x7f050068
 val notification_small_icon_size_as_large = 0x7f050069
 val notification_subtext_size = 0x7f05006a
 val notification_top_pad = 0x7f05006b
 val notification_top_pad_large_text = 0x7f05006c
 val tooltip_corner_radius = 0x7f05006d
 val tooltip_horizontal_padding = 0x7f05006e
 val tooltip_margin = 0x7f05006f
 val tooltip_precise_anchor_extra_offset = 0x7f050070
 val tooltip_precise_anchor_threshold = 0x7f050071
 val tooltip_vertical_padding = 0x7f050072
 val tooltip_y_offset_non_touch = 0x7f050073
 val tooltip_y_offset_touch = 0x7f050074
}
 object drawable {
 val abc_ab_share_pack_mtrl_alpha = 0x7f060001
 val abc_action_bar_item_background_material = 0x7f060002
 val abc_btn_borderless_material = 0x7f060003
 val abc_btn_check_material = 0x7f060004
 val abc_btn_check_material_anim = 0x7f060005
 val abc_btn_check_to_on_mtrl_000 = 0x7f060006
 val abc_btn_check_to_on_mtrl_015 = 0x7f060007
 val abc_btn_colored_material = 0x7f060008
 val abc_btn_default_mtrl_shape = 0x7f060009
 val abc_btn_radio_material = 0x7f06000a
 val abc_btn_radio_material_anim = 0x7f06000b
 val abc_btn_radio_to_on_mtrl_000 = 0x7f06000c
 val abc_btn_radio_to_on_mtrl_015 = 0x7f06000d
 val abc_btn_switch_to_on_mtrl_00001 = 0x7f06000e
 val abc_btn_switch_to_on_mtrl_00012 = 0x7f06000f
 val abc_cab_background_internal_bg = 0x7f060010
 val abc_cab_background_top_material = 0x7f060011
 val abc_cab_background_top_mtrl_alpha = 0x7f060012
 val abc_control_background_material = 0x7f060013
 val abc_dialog_material_background = 0x7f060014
 val abc_edit_text_material = 0x7f060015
 val abc_ic_ab_back_material = 0x7f060016
 val abc_ic_arrow_drop_right_black_24dp = 0x7f060017
 val abc_ic_clear_material = 0x7f060018
 val abc_ic_commit_search_api_mtrl_alpha = 0x7f060019
 val abc_ic_go_search_api_material = 0x7f06001a
 val abc_ic_menu_copy_mtrl_am_alpha = 0x7f06001b
 val abc_ic_menu_cut_mtrl_alpha = 0x7f06001c
 val abc_ic_menu_overflow_material = 0x7f06001d
 val abc_ic_menu_paste_mtrl_am_alpha = 0x7f06001e
 val abc_ic_menu_selectall_mtrl_alpha = 0x7f06001f
 val abc_ic_menu_share_mtrl_alpha = 0x7f060020
 val abc_ic_search_api_material = 0x7f060021
 val abc_ic_star_black_16dp = 0x7f060022
 val abc_ic_star_black_36dp = 0x7f060023
 val abc_ic_star_black_48dp = 0x7f060024
 val abc_ic_star_half_black_16dp = 0x7f060025
 val abc_ic_star_half_black_36dp = 0x7f060026
 val abc_ic_star_half_black_48dp = 0x7f060027
 val abc_ic_voice_search_api_material = 0x7f060028
 val abc_item_background_holo_dark = 0x7f060029
 val abc_item_background_holo_light = 0x7f06002a
 val abc_list_divider_material = 0x7f06002b
 val abc_list_divider_mtrl_alpha = 0x7f06002c
 val abc_list_focused_holo = 0x7f06002d
 val abc_list_longpressed_holo = 0x7f06002e
 val abc_list_pressed_holo_dark = 0x7f06002f
 val abc_list_pressed_holo_light = 0x7f060030
 val abc_list_selector_background_transition_holo_dark = 0x7f060031
 val abc_list_selector_background_transition_holo_light = 0x7f060032
 val abc_list_selector_disabled_holo_dark = 0x7f060033
 val abc_list_selector_disabled_holo_light = 0x7f060034
 val abc_list_selector_holo_dark = 0x7f060035
 val abc_list_selector_holo_light = 0x7f060036
 val abc_menu_hardkey_panel_mtrl_mult = 0x7f060037
 val abc_popup_background_mtrl_mult = 0x7f060038
 val abc_ratingbar_indicator_material = 0x7f060039
 val abc_ratingbar_material = 0x7f06003a
 val abc_ratingbar_small_material = 0x7f06003b
 val abc_scrubber_control_off_mtrl_alpha = 0x7f06003c
 val abc_scrubber_control_to_pressed_mtrl_000 = 0x7f06003d
 val abc_scrubber_control_to_pressed_mtrl_005 = 0x7f06003e
 val abc_scrubber_primary_mtrl_alpha = 0x7f06003f
 val abc_scrubber_track_mtrl_alpha = 0x7f060040
 val abc_seekbar_thumb_material = 0x7f060041
 val abc_seekbar_tick_mark_material = 0x7f060042
 val abc_seekbar_track_material = 0x7f060043
 val abc_spinner_mtrl_am_alpha = 0x7f060044
 val abc_spinner_textfield_background_material = 0x7f060045
 val abc_switch_thumb_material = 0x7f060046
 val abc_switch_track_mtrl_alpha = 0x7f060047
 val abc_tab_indicator_material = 0x7f060048
 val abc_tab_indicator_mtrl_alpha = 0x7f060049
 val abc_text_cursor_material = 0x7f06004a
 val abc_text_select_handle_left_mtrl_dark = 0x7f06004b
 val abc_text_select_handle_left_mtrl_light = 0x7f06004c
 val abc_text_select_handle_middle_mtrl_dark = 0x7f06004d
 val abc_text_select_handle_middle_mtrl_light = 0x7f06004e
 val abc_text_select_handle_right_mtrl_dark = 0x7f06004f
 val abc_text_select_handle_right_mtrl_light = 0x7f060050
 val abc_textfield_activated_mtrl_alpha = 0x7f060051
 val abc_textfield_default_mtrl_alpha = 0x7f060052
 val abc_textfield_search_activated_mtrl_alpha = 0x7f060053
 val abc_textfield_search_default_mtrl_alpha = 0x7f060054
 val abc_textfield_search_material = 0x7f060055
 val abc_vector_test = 0x7f060056
 val btn_checkbox_checked_mtrl = 0x7f060057
 val btn_checkbox_checked_to_unchecked_mtrl_animation = 0x7f060058
 val btn_checkbox_unchecked_mtrl = 0x7f060059
 val btn_checkbox_unchecked_to_checked_mtrl_animation = 0x7f06005a
 val btn_radio_off_mtrl = 0x7f06005b
 val btn_radio_off_to_on_mtrl_animation = 0x7f06005c
 val btn_radio_on_mtrl = 0x7f06005d
 val btn_radio_on_to_off_mtrl_animation = 0x7f06005e
 val ic_backspace_black_24dp = 0x7f06005f
 val ic_launcher_background = 0x7f060060
 val ic_launcher_foreground = 0x7f060061
 val notification_action_background = 0x7f060062
 val notification_bg = 0x7f060063
 val notification_bg_low = 0x7f060064
 val notification_bg_low_normal = 0x7f060065
 val notification_bg_low_pressed = 0x7f060066
 val notification_bg_normal = 0x7f060067
 val notification_bg_normal_pressed = 0x7f060068
 val notification_icon_background = 0x7f060069
 val notification_template_icon_bg = 0x7f06006a
 val notification_template_icon_low_bg = 0x7f06006b
 val notification_tile_bg = 0x7f06006c
 val notify_panel_notification_icon_bg = 0x7f06006d
 val tooltip_frame_dark = 0x7f06006e
 val tooltip_frame_light = 0x7f06006f
}
 object id {
 val ALT = 0x7f070000
 val CTRL = 0x7f070001
 val Clear = 0x7f070002
 val Delete = 0x7f070003
 val Equal = 0x7f070004
 val FUNCTION = 0x7f070005
 val META = 0x7f070006
 val SHIFT = 0x7f070007
 val SYM = 0x7f070008
 val accessibility_action_clickable_span = 0x7f070009
 val accessibility_custom_action_0 = 0x7f07000a
 val accessibility_custom_action_1 = 0x7f07000b
 val accessibility_custom_action_10 = 0x7f07000c
 val accessibility_custom_action_11 = 0x7f07000d
 val accessibility_custom_action_12 = 0x7f07000e
 val accessibility_custom_action_13 = 0x7f07000f
 val accessibility_custom_action_14 = 0x7f070010
 val accessibility_custom_action_15 = 0x7f070011
 val accessibility_custom_action_16 = 0x7f070012
 val accessibility_custom_action_17 = 0x7f070013
 val accessibility_custom_action_18 = 0x7f070014
 val accessibility_custom_action_19 = 0x7f070015
 val accessibility_custom_action_2 = 0x7f070016
 val accessibility_custom_action_20 = 0x7f070017
 val accessibility_custom_action_21 = 0x7f070018
 val accessibility_custom_action_22 = 0x7f070019
 val accessibility_custom_action_23 = 0x7f07001a
 val accessibility_custom_action_24 = 0x7f07001b
 val accessibility_custom_action_25 = 0x7f07001c
 val accessibility_custom_action_26 = 0x7f07001d
 val accessibility_custom_action_27 = 0x7f07001e
 val accessibility_custom_action_28 = 0x7f07001f
 val accessibility_custom_action_29 = 0x7f070020
 val accessibility_custom_action_3 = 0x7f070021
 val accessibility_custom_action_30 = 0x7f070022
 val accessibility_custom_action_31 = 0x7f070023
 val accessibility_custom_action_4 = 0x7f070024
 val accessibility_custom_action_5 = 0x7f070025
 val accessibility_custom_action_6 = 0x7f070026
 val accessibility_custom_action_7 = 0x7f070027
 val accessibility_custom_action_8 = 0x7f070028
 val accessibility_custom_action_9 = 0x7f070029
 val action_bar = 0x7f07002a
 val action_bar_activity_content = 0x7f07002b
 val action_bar_container = 0x7f07002c
 val action_bar_root = 0x7f07002d
 val action_bar_spinner = 0x7f07002e
 val action_bar_subtitle = 0x7f07002f
 val action_bar_title = 0x7f070030
 val action_container = 0x7f070031
 val action_context_bar = 0x7f070032
 val action_divider = 0x7f070033
 val action_image = 0x7f070034
 val action_menu_divider = 0x7f070035
 val action_menu_presenter = 0x7f070036
 val action_mode_bar = 0x7f070037
 val action_mode_bar_stub = 0x7f070038
 val action_mode_close_button = 0x7f070039
 val action_text = 0x7f07003a
 val actions = 0x7f07003b
 val activity_chooser_view_content = 0x7f07003c
 val add = 0x7f07003d
 val alertTitle = 0x7f07003e
 val always = 0x7f07003f
 val async = 0x7f070040
 val barrier = 0x7f070041
 val beginning = 0x7f070042
 val blocking = 0x7f070043
 val bottom = 0x7f070044
 val buttonPanel = 0x7f070045
 val center_vertical = 0x7f070046
 val chains = 0x7f070047
 val checkbox = 0x7f070048
 val checked = 0x7f070049
 val chronometer = 0x7f07004a
 val collapseActionView = 0x7f07004b
 val content = 0x7f07004c
 val contentPanel = 0x7f07004d
 val custom = 0x7f07004e
 val customPanel = 0x7f07004f
 val decor_content_parent = 0x7f070050
 val default_activity_button = 0x7f070051
 val dialog_button = 0x7f070052
 val dimensions = 0x7f070053
 val direct = 0x7f070054
 val disableHome = 0x7f070055
 val edit_query = 0x7f070056
 val end = 0x7f070057
 val exp = 0x7f070058
 val expand_activities_button = 0x7f070059
 val expanded_menu = 0x7f07005a
 val forever = 0x7f07005b
 val gone = 0x7f07005c
 val group_divider = 0x7f07005d
 val groups = 0x7f07005e
 val home = 0x7f07005f
 val homeAsUp = 0x7f070060
 val icon = 0x7f070061
 val icon_group = 0x7f070062
 val ifRoom = 0x7f070063
 val image = 0x7f070064
 val info = 0x7f070065
 val invisible = 0x7f070066
 val italic = 0x7f070067
 val left = 0x7f070068
 val line1 = 0x7f070069
 val line3 = 0x7f07006a
 val listMode = 0x7f07006b
 val list_item = 0x7f07006c
 val message = 0x7f07006d
 val middle = 0x7f07006e
 val multiply = 0x7f07006f
 val never = 0x7f070070
 val none = 0x7f070071
 val normal = 0x7f070072
 val notification_background = 0x7f070073
 val notification_main_column = 0x7f070074
 val notification_main_column_container = 0x7f070075
 val off = 0x7f070076
 val on = 0x7f070077
 val packed = 0x7f070078
 val parent = 0x7f070079
 val parentPanel = 0x7f07007a
 val percent = 0x7f07007b
 val progress_circular = 0x7f07007c
 val progress_horizontal = 0x7f07007d
 val radio = 0x7f07007e
 val right = 0x7f07007f
 val right_icon = 0x7f070080
 val right_side = 0x7f070081
 val screen = 0x7f070082
 val scrollIndicatorDown = 0x7f070083
 val scrollIndicatorUp = 0x7f070084
 val scrollView = 0x7f070085
 val search_badge = 0x7f070086
 val search_bar = 0x7f070087
 val search_button = 0x7f070088
 val search_close_btn = 0x7f070089
 val search_edit_frame = 0x7f07008a
 val search_go_btn = 0x7f07008b
 val search_mag_icon = 0x7f07008c
 val search_plate = 0x7f07008d
 val search_src_text = 0x7f07008e
 val search_voice_btn = 0x7f07008f
 val select_dialog_listview = 0x7f070090
 val shortcut = 0x7f070091
 val showCustom = 0x7f070092
 val showHome = 0x7f070093
 val showTitle = 0x7f070094
 val spacer = 0x7f070095
 val split_action_bar = 0x7f070096
 val spread = 0x7f070097
 val spread_inside = 0x7f070098
 val src_atop = 0x7f070099
 val src_in = 0x7f07009a
 val src_over = 0x7f07009b
 val standard = 0x7f07009c
 val start = 0x7f07009d
 val submenuarrow = 0x7f07009e
 val submit_area = 0x7f07009f
 val tabMode = 0x7f0700a0
 val tag_accessibility_actions = 0x7f0700a1
 val tag_accessibility_clickable_spans = 0x7f0700a2
 val tag_accessibility_heading = 0x7f0700a3
 val tag_accessibility_pane_title = 0x7f0700a4
 val tag_screen_reader_focusable = 0x7f0700a5
 val tag_transition_group = 0x7f0700a6
 val tag_unhandled_key_event_manager = 0x7f0700a7
 val tag_unhandled_key_listeners = 0x7f0700a8
 val text = 0x7f0700a9
 val text2 = 0x7f0700aa
 val textSpacerNoButtons = 0x7f0700ab
 val textSpacerNoTitle = 0x7f0700ac
 val time = 0x7f0700ad
 val title = 0x7f0700ae
 val titleDividerNoCustom = 0x7f0700af
 val title_template = 0x7f0700b0
 val top = 0x7f0700b1
 val topPanel = 0x7f0700b2
 val unchecked = 0x7f0700b3
 val uniform = 0x7f0700b4
 val up = 0x7f0700b5
 val useLogo = 0x7f0700b6
 val withText = 0x7f0700b7
 val wrap = 0x7f0700b8
 val wrap_content = 0x7f0700b9
}
 object integer {
 val abc_config_activityDefaultDur = 0x7f080000
 val abc_config_activityShortDur = 0x7f080001
 val cancel_button_image_alpha = 0x7f080002
 val config_tooltipAnimTime = 0x7f080003
 val status_bar_notification_info_maxnum = 0x7f080004
}
 object interpolator {
 val btn_checkbox_checked_mtrl_animation_interpolator_0 = 0x7f090000
 val btn_checkbox_checked_mtrl_animation_interpolator_1 = 0x7f090001
 val btn_checkbox_unchecked_mtrl_animation_interpolator_0 = 0x7f090002
 val btn_checkbox_unchecked_mtrl_animation_interpolator_1 = 0x7f090003
 val btn_radio_to_off_mtrl_animation_interpolator_0 = 0x7f090004
 val btn_radio_to_on_mtrl_animation_interpolator_0 = 0x7f090005
 val fast_out_slow_in = 0x7f090006
}
 object layout {
 val abc_action_bar_title_item = 0x7f0a0000
 val abc_action_bar_up_container = 0x7f0a0001
 val abc_action_menu_item_layout = 0x7f0a0002
 val abc_action_menu_layout = 0x7f0a0003
 val abc_action_mode_bar = 0x7f0a0004
 val abc_action_mode_close_item_material = 0x7f0a0005
 val abc_activity_chooser_view = 0x7f0a0006
 val abc_activity_chooser_view_list_item = 0x7f0a0007
 val abc_alert_dialog_button_bar_material = 0x7f0a0008
 val abc_alert_dialog_material = 0x7f0a0009
 val abc_alert_dialog_title_material = 0x7f0a000a
 val abc_cascading_menu_item_layout = 0x7f0a000b
 val abc_dialog_title_material = 0x7f0a000c
 val abc_expanded_menu_layout = 0x7f0a000d
 val abc_list_menu_item_checkbox = 0x7f0a000e
 val abc_list_menu_item_icon = 0x7f0a000f
 val abc_list_menu_item_layout = 0x7f0a0010
 val abc_list_menu_item_radio = 0x7f0a0011
 val abc_popup_menu_header_item_layout = 0x7f0a0012
 val abc_popup_menu_item_layout = 0x7f0a0013
 val abc_screen_content_include = 0x7f0a0014
 val abc_screen_simple = 0x7f0a0015
 val abc_screen_simple_overlay_action_mode = 0x7f0a0016
 val abc_screen_toolbar = 0x7f0a0017
 val abc_search_dropdown_item_icons_2line = 0x7f0a0018
 val abc_search_view = 0x7f0a0019
 val abc_select_dialog_material = 0x7f0a001a
 val abc_tooltip = 0x7f0a001b
 val activity_main = 0x7f0a001c
 val custom_dialog = 0x7f0a001d
 val notification_action = 0x7f0a001e
 val notification_action_tombstone = 0x7f0a001f
 val notification_template_custom_big = 0x7f0a0020
 val notification_template_icon_group = 0x7f0a0021
 val notification_template_part_chronometer = 0x7f0a0022
 val notification_template_part_time = 0x7f0a0023
 val select_dialog_item_material = 0x7f0a0024
 val select_dialog_multichoice_material = 0x7f0a0025
 val select_dialog_singlechoice_material = 0x7f0a0026
 val support_simple_spinner_dropdown_item = 0x7f0a0027
}
 object mipmap {
 val ic_launcher = 0x7f0b0000
 val ic_launcher_background = 0x7f0b0001
 val ic_launcher_foreground = 0x7f0b0002
 val ic_launcher_round = 0x7f0b0003
}
 object string {
 val abc_action_bar_home_description = 0x7f0c0000
 val abc_action_bar_up_description = 0x7f0c0001
 val abc_action_menu_overflow_description = 0x7f0c0002
 val abc_action_mode_done = 0x7f0c0003
 val abc_activity_chooser_view_see_all = 0x7f0c0004
 val abc_activitychooserview_choose_application = 0x7f0c0005
 val abc_capital_off = 0x7f0c0006
 val abc_capital_on = 0x7f0c0007
 val abc_menu_alt_shortcut_label = 0x7f0c0008
 val abc_menu_ctrl_shortcut_label = 0x7f0c0009
 val abc_menu_delete_shortcut_label = 0x7f0c000a
 val abc_menu_enter_shortcut_label = 0x7f0c000b
 val abc_menu_function_shortcut_label = 0x7f0c000c
 val abc_menu_meta_shortcut_label = 0x7f0c000d
 val abc_menu_shift_shortcut_label = 0x7f0c000e
 val abc_menu_space_shortcut_label = 0x7f0c000f
 val abc_menu_sym_shortcut_label = 0x7f0c0010
 val abc_prepend_shortcut_label = 0x7f0c0011
 val abc_search_hint = 0x7f0c0012
 val abc_searchview_description_clear = 0x7f0c0013
 val abc_searchview_description_query = 0x7f0c0014
 val abc_searchview_description_search = 0x7f0c0015
 val abc_searchview_description_submit = 0x7f0c0016
 val abc_searchview_description_voice = 0x7f0c0017
 val abc_shareactionprovider_share_with = 0x7f0c0018
 val abc_shareactionprovider_share_with_application = 0x7f0c0019
 val abc_toolbar_collapse_description = 0x7f0c001a
 val app_name = 0x7f0c001b
 val search_menu_title = 0x7f0c001c
 val status_bar_notification_info_overflow = 0x7f0c001d
}
 object style {
 val AlertDialog_AppCompat = 0x7f0d0000
 val AlertDialog_AppCompat_Light = 0x7f0d0001
 val Animation_AppCompat_Dialog = 0x7f0d0002
 val Animation_AppCompat_DropDownUp = 0x7f0d0003
 val Animation_AppCompat_Tooltip = 0x7f0d0004
 val AppTheme = 0x7f0d0005
 val AppTheme_NoActionBar = 0x7f0d0006
 val Base_AlertDialog_AppCompat = 0x7f0d0007
 val Base_AlertDialog_AppCompat_Light = 0x7f0d0008
 val Base_Animation_AppCompat_Dialog = 0x7f0d0009
 val Base_Animation_AppCompat_DropDownUp = 0x7f0d000a
 val Base_Animation_AppCompat_Tooltip = 0x7f0d000b
 val Base_DialogWindowTitle_AppCompat = 0x7f0d000c
 val Base_DialogWindowTitleBackground_AppCompat = 0x7f0d000d
 val Base_TextAppearance_AppCompat = 0x7f0d000e
 val Base_TextAppearance_AppCompat_Body1 = 0x7f0d000f
 val Base_TextAppearance_AppCompat_Body2 = 0x7f0d0010
 val Base_TextAppearance_AppCompat_Button = 0x7f0d0011
 val Base_TextAppearance_AppCompat_Caption = 0x7f0d0012
 val Base_TextAppearance_AppCompat_Display1 = 0x7f0d0013
 val Base_TextAppearance_AppCompat_Display2 = 0x7f0d0014
 val Base_TextAppearance_AppCompat_Display3 = 0x7f0d0015
 val Base_TextAppearance_AppCompat_Display4 = 0x7f0d0016
 val Base_TextAppearance_AppCompat_Headline = 0x7f0d0017
 val Base_TextAppearance_AppCompat_Inverse = 0x7f0d0018
 val Base_TextAppearance_AppCompat_Large = 0x7f0d0019
 val Base_TextAppearance_AppCompat_Large_Inverse = 0x7f0d001a
 val Base_TextAppearance_AppCompat_Light_Widget_PopupMenu_Large = 0x7f0d001b
 val Base_TextAppearance_AppCompat_Light_Widget_PopupMenu_Small = 0x7f0d001c
 val Base_TextAppearance_AppCompat_Medium = 0x7f0d001d
 val Base_TextAppearance_AppCompat_Medium_Inverse = 0x7f0d001e
 val Base_TextAppearance_AppCompat_Menu = 0x7f0d001f
 val Base_TextAppearance_AppCompat_SearchResult = 0x7f0d0020
 val Base_TextAppearance_AppCompat_SearchResult_Subtitle = 0x7f0d0021
 val Base_TextAppearance_AppCompat_SearchResult_Title = 0x7f0d0022
 val Base_TextAppearance_AppCompat_Small = 0x7f0d0023
 val Base_TextAppearance_AppCompat_Small_Inverse = 0x7f0d0024
 val Base_TextAppearance_AppCompat_Subhead = 0x7f0d0025
 val Base_TextAppearance_AppCompat_Subhead_Inverse = 0x7f0d0026
 val Base_TextAppearance_AppCompat_Title = 0x7f0d0027
 val Base_TextAppearance_AppCompat_Title_Inverse = 0x7f0d0028
 val Base_TextAppearance_AppCompat_Tooltip = 0x7f0d0029
 val Base_TextAppearance_AppCompat_Widget_ActionBar_Menu = 0x7f0d002a
 val Base_TextAppearance_AppCompat_Widget_ActionBar_Subtitle = 0x7f0d002b
 val Base_TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse = 0x7f0d002c
 val Base_TextAppearance_AppCompat_Widget_ActionBar_Title = 0x7f0d002d
 val Base_TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse = 0x7f0d002e
 val Base_TextAppearance_AppCompat_Widget_ActionMode_Subtitle = 0x7f0d002f
 val Base_TextAppearance_AppCompat_Widget_ActionMode_Title = 0x7f0d0030
 val Base_TextAppearance_AppCompat_Widget_Button = 0x7f0d0031
 val Base_TextAppearance_AppCompat_Widget_Button_Borderless_Colored = 0x7f0d0032
 val Base_TextAppearance_AppCompat_Widget_Button_Colored = 0x7f0d0033
 val Base_TextAppearance_AppCompat_Widget_Button_Inverse = 0x7f0d0034
 val Base_TextAppearance_AppCompat_Widget_DropDownItem = 0x7f0d0035
 val Base_TextAppearance_AppCompat_Widget_PopupMenu_Header = 0x7f0d0036
 val Base_TextAppearance_AppCompat_Widget_PopupMenu_Large = 0x7f0d0037
 val Base_TextAppearance_AppCompat_Widget_PopupMenu_Small = 0x7f0d0038
 val Base_TextAppearance_AppCompat_Widget_Switch = 0x7f0d0039
 val Base_TextAppearance_AppCompat_Widget_TextView_SpinnerItem = 0x7f0d003a
 val Base_TextAppearance_Widget_AppCompat_ExpandedMenu_Item = 0x7f0d003b
 val Base_TextAppearance_Widget_AppCompat_Toolbar_Subtitle = 0x7f0d003c
 val Base_TextAppearance_Widget_AppCompat_Toolbar_Title = 0x7f0d003d
 val Base_Theme_AppCompat = 0x7f0d003e
 val Base_Theme_AppCompat_CompactMenu = 0x7f0d003f
 val Base_Theme_AppCompat_Dialog = 0x7f0d0040
 val Base_Theme_AppCompat_Dialog_Alert = 0x7f0d0041
 val Base_Theme_AppCompat_Dialog_FixedSize = 0x7f0d0042
 val Base_Theme_AppCompat_Dialog_MinWidth = 0x7f0d0043
 val Base_Theme_AppCompat_DialogWhenLarge = 0x7f0d0044
 val Base_Theme_AppCompat_Light = 0x7f0d0045
 val Base_Theme_AppCompat_Light_DarkActionBar = 0x7f0d0046
 val Base_Theme_AppCompat_Light_Dialog = 0x7f0d0047
 val Base_Theme_AppCompat_Light_Dialog_Alert = 0x7f0d0048
 val Base_Theme_AppCompat_Light_Dialog_FixedSize = 0x7f0d0049
 val Base_Theme_AppCompat_Light_Dialog_MinWidth = 0x7f0d004a
 val Base_Theme_AppCompat_Light_DialogWhenLarge = 0x7f0d004b
 val Base_ThemeOverlay_AppCompat = 0x7f0d004c
 val Base_ThemeOverlay_AppCompat_ActionBar = 0x7f0d004d
 val Base_ThemeOverlay_AppCompat_Dark = 0x7f0d004e
 val Base_ThemeOverlay_AppCompat_Dark_ActionBar = 0x7f0d004f
 val Base_ThemeOverlay_AppCompat_Dialog = 0x7f0d0050
 val Base_ThemeOverlay_AppCompat_Dialog_Alert = 0x7f0d0051
 val Base_ThemeOverlay_AppCompat_Light = 0x7f0d0052
 val Base_V21_Theme_AppCompat = 0x7f0d0053
 val Base_V21_Theme_AppCompat_Dialog = 0x7f0d0054
 val Base_V21_Theme_AppCompat_Light = 0x7f0d0055
 val Base_V21_Theme_AppCompat_Light_Dialog = 0x7f0d0056
 val Base_V21_ThemeOverlay_AppCompat_Dialog = 0x7f0d0057
 val Base_V22_Theme_AppCompat = 0x7f0d0058
 val Base_V22_Theme_AppCompat_Light = 0x7f0d0059
 val Base_V23_Theme_AppCompat = 0x7f0d005a
 val Base_V23_Theme_AppCompat_Light = 0x7f0d005b
 val Base_V26_Theme_AppCompat = 0x7f0d005c
 val Base_V26_Theme_AppCompat_Light = 0x7f0d005d
 val Base_V26_Widget_AppCompat_Toolbar = 0x7f0d005e
 val Base_V28_Theme_AppCompat = 0x7f0d005f
 val Base_V28_Theme_AppCompat_Light = 0x7f0d0060
 val Base_V7_Theme_AppCompat = 0x7f0d0061
 val Base_V7_Theme_AppCompat_Dialog = 0x7f0d0062
 val Base_V7_Theme_AppCompat_Light = 0x7f0d0063
 val Base_V7_Theme_AppCompat_Light_Dialog = 0x7f0d0064
 val Base_V7_ThemeOverlay_AppCompat_Dialog = 0x7f0d0065
 val Base_V7_Widget_AppCompat_AutoCompleteTextView = 0x7f0d0066
 val Base_V7_Widget_AppCompat_EditText = 0x7f0d0067
 val Base_V7_Widget_AppCompat_Toolbar = 0x7f0d0068
 val Base_Widget_AppCompat_ActionBar = 0x7f0d0069
 val Base_Widget_AppCompat_ActionBar_Solid = 0x7f0d006a
 val Base_Widget_AppCompat_ActionBar_TabBar = 0x7f0d006b
 val Base_Widget_AppCompat_ActionBar_TabText = 0x7f0d006c
 val Base_Widget_AppCompat_ActionBar_TabView = 0x7f0d006d
 val Base_Widget_AppCompat_ActionButton = 0x7f0d006e
 val Base_Widget_AppCompat_ActionButton_CloseMode = 0x7f0d006f
 val Base_Widget_AppCompat_ActionButton_Overflow = 0x7f0d0070
 val Base_Widget_AppCompat_ActionMode = 0x7f0d0071
 val Base_Widget_AppCompat_ActivityChooserView = 0x7f0d0072
 val Base_Widget_AppCompat_AutoCompleteTextView = 0x7f0d0073
 val Base_Widget_AppCompat_Button = 0x7f0d0074
 val Base_Widget_AppCompat_Button_Borderless = 0x7f0d0075
 val Base_Widget_AppCompat_Button_Borderless_Colored = 0x7f0d0076
 val Base_Widget_AppCompat_Button_ButtonBar_AlertDialog = 0x7f0d0077
 val Base_Widget_AppCompat_Button_Colored = 0x7f0d0078
 val Base_Widget_AppCompat_Button_Small = 0x7f0d0079
 val Base_Widget_AppCompat_ButtonBar = 0x7f0d007a
 val Base_Widget_AppCompat_ButtonBar_AlertDialog = 0x7f0d007b
 val Base_Widget_AppCompat_CompoundButton_CheckBox = 0x7f0d007c
 val Base_Widget_AppCompat_CompoundButton_RadioButton = 0x7f0d007d
 val Base_Widget_AppCompat_CompoundButton_Switch = 0x7f0d007e
 val Base_Widget_AppCompat_DrawerArrowToggle = 0x7f0d007f
 val Base_Widget_AppCompat_DrawerArrowToggle_Common = 0x7f0d0080
 val Base_Widget_AppCompat_DropDownItem_Spinner = 0x7f0d0081
 val Base_Widget_AppCompat_EditText = 0x7f0d0082
 val Base_Widget_AppCompat_ImageButton = 0x7f0d0083
 val Base_Widget_AppCompat_Light_ActionBar = 0x7f0d0084
 val Base_Widget_AppCompat_Light_ActionBar_Solid = 0x7f0d0085
 val Base_Widget_AppCompat_Light_ActionBar_TabBar = 0x7f0d0086
 val Base_Widget_AppCompat_Light_ActionBar_TabText = 0x7f0d0087
 val Base_Widget_AppCompat_Light_ActionBar_TabText_Inverse = 0x7f0d0088
 val Base_Widget_AppCompat_Light_ActionBar_TabView = 0x7f0d0089
 val Base_Widget_AppCompat_Light_PopupMenu = 0x7f0d008a
 val Base_Widget_AppCompat_Light_PopupMenu_Overflow = 0x7f0d008b
 val Base_Widget_AppCompat_ListMenuView = 0x7f0d008c
 val Base_Widget_AppCompat_ListPopupWindow = 0x7f0d008d
 val Base_Widget_AppCompat_ListView = 0x7f0d008e
 val Base_Widget_AppCompat_ListView_DropDown = 0x7f0d008f
 val Base_Widget_AppCompat_ListView_Menu = 0x7f0d0090
 val Base_Widget_AppCompat_PopupMenu = 0x7f0d0091
 val Base_Widget_AppCompat_PopupMenu_Overflow = 0x7f0d0092
 val Base_Widget_AppCompat_PopupWindow = 0x7f0d0093
 val Base_Widget_AppCompat_ProgressBar = 0x7f0d0094
 val Base_Widget_AppCompat_ProgressBar_Horizontal = 0x7f0d0095
 val Base_Widget_AppCompat_RatingBar = 0x7f0d0096
 val Base_Widget_AppCompat_RatingBar_Indicator = 0x7f0d0097
 val Base_Widget_AppCompat_RatingBar_Small = 0x7f0d0098
 val Base_Widget_AppCompat_SearchView = 0x7f0d0099
 val Base_Widget_AppCompat_SearchView_ActionBar = 0x7f0d009a
 val Base_Widget_AppCompat_SeekBar = 0x7f0d009b
 val Base_Widget_AppCompat_SeekBar_Discrete = 0x7f0d009c
 val Base_Widget_AppCompat_Spinner = 0x7f0d009d
 val Base_Widget_AppCompat_Spinner_Underlined = 0x7f0d009e
 val Base_Widget_AppCompat_TextView = 0x7f0d009f
 val Base_Widget_AppCompat_TextView_SpinnerItem = 0x7f0d00a0
 val Base_Widget_AppCompat_Toolbar = 0x7f0d00a1
 val Base_Widget_AppCompat_Toolbar_Button_Navigation = 0x7f0d00a2
 val FunctionalButtons = 0x7f0d00a3
 val NumberButtons = 0x7f0d00a4
 val Platform_AppCompat = 0x7f0d00a5
 val Platform_AppCompat_Light = 0x7f0d00a6
 val Platform_ThemeOverlay_AppCompat = 0x7f0d00a7
 val Platform_ThemeOverlay_AppCompat_Dark = 0x7f0d00a8
 val Platform_ThemeOverlay_AppCompat_Light = 0x7f0d00a9
 val Platform_V21_AppCompat = 0x7f0d00aa
 val Platform_V21_AppCompat_Light = 0x7f0d00ab
 val Platform_V25_AppCompat = 0x7f0d00ac
 val Platform_V25_AppCompat_Light = 0x7f0d00ad
 val Platform_Widget_AppCompat_Spinner = 0x7f0d00ae
 val RtlOverlay_DialogWindowTitle_AppCompat = 0x7f0d00af
 val RtlOverlay_Widget_AppCompat_ActionBar_TitleItem = 0x7f0d00b0
 val RtlOverlay_Widget_AppCompat_DialogTitle_Icon = 0x7f0d00b1
 val RtlOverlay_Widget_AppCompat_PopupMenuItem = 0x7f0d00b2
 val RtlOverlay_Widget_AppCompat_PopupMenuItem_InternalGroup = 0x7f0d00b3
 val RtlOverlay_Widget_AppCompat_PopupMenuItem_Shortcut = 0x7f0d00b4
 val RtlOverlay_Widget_AppCompat_PopupMenuItem_SubmenuArrow = 0x7f0d00b5
 val RtlOverlay_Widget_AppCompat_PopupMenuItem_Text = 0x7f0d00b6
 val RtlOverlay_Widget_AppCompat_PopupMenuItem_Title = 0x7f0d00b7
 val RtlOverlay_Widget_AppCompat_Search_DropDown = 0x7f0d00b8
 val RtlOverlay_Widget_AppCompat_Search_DropDown_Icon1 = 0x7f0d00b9
 val RtlOverlay_Widget_AppCompat_Search_DropDown_Icon2 = 0x7f0d00ba
 val RtlOverlay_Widget_AppCompat_Search_DropDown_Query = 0x7f0d00bb
 val RtlOverlay_Widget_AppCompat_Search_DropDown_Text = 0x7f0d00bc
 val RtlOverlay_Widget_AppCompat_SearchView_MagIcon = 0x7f0d00bd
 val RtlUnderlay_Widget_AppCompat_ActionButton = 0x7f0d00be
 val RtlUnderlay_Widget_AppCompat_ActionButton_Overflow = 0x7f0d00bf
 val TextAppearance_AppCompat = 0x7f0d00c0
 val TextAppearance_AppCompat_Body1 = 0x7f0d00c1
 val TextAppearance_AppCompat_Body2 = 0x7f0d00c2
 val TextAppearance_AppCompat_Button = 0x7f0d00c3
 val TextAppearance_AppCompat_Caption = 0x7f0d00c4
 val TextAppearance_AppCompat_Display1 = 0x7f0d00c5
 val TextAppearance_AppCompat_Display2 = 0x7f0d00c6
 val TextAppearance_AppCompat_Display3 = 0x7f0d00c7
 val TextAppearance_AppCompat_Display4 = 0x7f0d00c8
 val TextAppearance_AppCompat_Headline = 0x7f0d00c9
 val TextAppearance_AppCompat_Inverse = 0x7f0d00ca
 val TextAppearance_AppCompat_Large = 0x7f0d00cb
 val TextAppearance_AppCompat_Large_Inverse = 0x7f0d00cc
 val TextAppearance_AppCompat_Light_SearchResult_Subtitle = 0x7f0d00cd
 val TextAppearance_AppCompat_Light_SearchResult_Title = 0x7f0d00ce
 val TextAppearance_AppCompat_Light_Widget_PopupMenu_Large = 0x7f0d00cf
 val TextAppearance_AppCompat_Light_Widget_PopupMenu_Small = 0x7f0d00d0
 val TextAppearance_AppCompat_Medium = 0x7f0d00d1
 val TextAppearance_AppCompat_Medium_Inverse = 0x7f0d00d2
 val TextAppearance_AppCompat_Menu = 0x7f0d00d3
 val TextAppearance_AppCompat_SearchResult_Subtitle = 0x7f0d00d4
 val TextAppearance_AppCompat_SearchResult_Title = 0x7f0d00d5
 val TextAppearance_AppCompat_Small = 0x7f0d00d6
 val TextAppearance_AppCompat_Small_Inverse = 0x7f0d00d7
 val TextAppearance_AppCompat_Subhead = 0x7f0d00d8
 val TextAppearance_AppCompat_Subhead_Inverse = 0x7f0d00d9
 val TextAppearance_AppCompat_Title = 0x7f0d00da
 val TextAppearance_AppCompat_Title_Inverse = 0x7f0d00db
 val TextAppearance_AppCompat_Tooltip = 0x7f0d00dc
 val TextAppearance_AppCompat_Widget_ActionBar_Menu = 0x7f0d00dd
 val TextAppearance_AppCompat_Widget_ActionBar_Subtitle = 0x7f0d00de
 val TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse = 0x7f0d00df
 val TextAppearance_AppCompat_Widget_ActionBar_Title = 0x7f0d00e0
 val TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse = 0x7f0d00e1
 val TextAppearance_AppCompat_Widget_ActionMode_Subtitle = 0x7f0d00e2
 val TextAppearance_AppCompat_Widget_ActionMode_Subtitle_Inverse = 0x7f0d00e3
 val TextAppearance_AppCompat_Widget_ActionMode_Title = 0x7f0d00e4
 val TextAppearance_AppCompat_Widget_ActionMode_Title_Inverse = 0x7f0d00e5
 val TextAppearance_AppCompat_Widget_Button = 0x7f0d00e6
 val TextAppearance_AppCompat_Widget_Button_Borderless_Colored = 0x7f0d00e7
 val TextAppearance_AppCompat_Widget_Button_Colored = 0x7f0d00e8
 val TextAppearance_AppCompat_Widget_Button_Inverse = 0x7f0d00e9
 val TextAppearance_AppCompat_Widget_DropDownItem = 0x7f0d00ea
 val TextAppearance_AppCompat_Widget_PopupMenu_Header = 0x7f0d00eb
 val TextAppearance_AppCompat_Widget_PopupMenu_Large = 0x7f0d00ec
 val TextAppearance_AppCompat_Widget_PopupMenu_Small = 0x7f0d00ed
 val TextAppearance_AppCompat_Widget_Switch = 0x7f0d00ee
 val TextAppearance_AppCompat_Widget_TextView_SpinnerItem = 0x7f0d00ef
 val TextAppearance_Compat_Notification = 0x7f0d00f0
 val TextAppearance_Compat_Notification_Info = 0x7f0d00f1
 val TextAppearance_Compat_Notification_Line2 = 0x7f0d00f2
 val TextAppearance_Compat_Notification_Time = 0x7f0d00f3
 val TextAppearance_Compat_Notification_Title = 0x7f0d00f4
 val TextAppearance_Widget_AppCompat_ExpandedMenu_Item = 0x7f0d00f5
 val TextAppearance_Widget_AppCompat_Toolbar_Subtitle = 0x7f0d00f6
 val TextAppearance_Widget_AppCompat_Toolbar_Title = 0x7f0d00f7
 val Theme_AppCompat = 0x7f0d00f8
 val Theme_AppCompat_CompactMenu = 0x7f0d00f9
 val Theme_AppCompat_DayNight = 0x7f0d00fa
 val Theme_AppCompat_DayNight_DarkActionBar = 0x7f0d00fb
 val Theme_AppCompat_DayNight_Dialog = 0x7f0d00fc
 val Theme_AppCompat_DayNight_Dialog_Alert = 0x7f0d00fd
 val Theme_AppCompat_DayNight_Dialog_MinWidth = 0x7f0d00fe
 val Theme_AppCompat_DayNight_DialogWhenLarge = 0x7f0d00ff
 val Theme_AppCompat_DayNight_NoActionBar = 0x7f0d0100
 val Theme_AppCompat_Dialog = 0x7f0d0101
 val Theme_AppCompat_Dialog_Alert = 0x7f0d0102
 val Theme_AppCompat_Dialog_MinWidth = 0x7f0d0103
 val Theme_AppCompat_DialogWhenLarge = 0x7f0d0104
 val Theme_AppCompat_Light = 0x7f0d0105
 val Theme_AppCompat_Light_DarkActionBar = 0x7f0d0106
 val Theme_AppCompat_Light_Dialog = 0x7f0d0107
 val Theme_AppCompat_Light_Dialog_Alert = 0x7f0d0108
 val Theme_AppCompat_Light_Dialog_MinWidth = 0x7f0d0109
 val Theme_AppCompat_Light_DialogWhenLarge = 0x7f0d010a
 val Theme_AppCompat_Light_NoActionBar = 0x7f0d010b
 val Theme_AppCompat_NoActionBar = 0x7f0d010c
 val ThemeOverlay_AppCompat = 0x7f0d010d
 val ThemeOverlay_AppCompat_ActionBar = 0x7f0d010e
 val ThemeOverlay_AppCompat_Dark = 0x7f0d010f
 val ThemeOverlay_AppCompat_Dark_ActionBar = 0x7f0d0110
 val ThemeOverlay_AppCompat_DayNight = 0x7f0d0111
 val ThemeOverlay_AppCompat_DayNight_ActionBar = 0x7f0d0112
 val ThemeOverlay_AppCompat_Dialog = 0x7f0d0113
 val ThemeOverlay_AppCompat_Dialog_Alert = 0x7f0d0114
 val ThemeOverlay_AppCompat_Light = 0x7f0d0115
 val Widget_AppCompat_ActionBar = 0x7f0d0116
 val Widget_AppCompat_ActionBar_Solid = 0x7f0d0117
 val Widget_AppCompat_ActionBar_TabBar = 0x7f0d0118
 val Widget_AppCompat_ActionBar_TabText = 0x7f0d0119
 val Widget_AppCompat_ActionBar_TabView = 0x7f0d011a
 val Widget_AppCompat_ActionButton = 0x7f0d011b
 val Widget_AppCompat_ActionButton_CloseMode = 0x7f0d011c
 val Widget_AppCompat_ActionButton_Overflow = 0x7f0d011d
 val Widget_AppCompat_ActionMode = 0x7f0d011e
 val Widget_AppCompat_ActivityChooserView = 0x7f0d011f
 val Widget_AppCompat_AutoCompleteTextView = 0x7f0d0120
 val Widget_AppCompat_Button = 0x7f0d0121
 val Widget_AppCompat_Button_Borderless = 0x7f0d0122
 val Widget_AppCompat_Button_Borderless_Colored = 0x7f0d0123
 val Widget_AppCompat_Button_ButtonBar_AlertDialog = 0x7f0d0124
 val Widget_AppCompat_Button_Colored = 0x7f0d0125
 val Widget_AppCompat_Button_Small = 0x7f0d0126
 val Widget_AppCompat_ButtonBar = 0x7f0d0127
 val Widget_AppCompat_ButtonBar_AlertDialog = 0x7f0d0128
 val Widget_AppCompat_CompoundButton_CheckBox = 0x7f0d0129
 val Widget_AppCompat_CompoundButton_RadioButton = 0x7f0d012a
 val Widget_AppCompat_CompoundButton_Switch = 0x7f0d012b
 val Widget_AppCompat_DrawerArrowToggle = 0x7f0d012c
 val Widget_AppCompat_DropDownItem_Spinner = 0x7f0d012d
 val Widget_AppCompat_EditText = 0x7f0d012e
 val Widget_AppCompat_ImageButton = 0x7f0d012f
 val Widget_AppCompat_Light_ActionBar = 0x7f0d0130
 val Widget_AppCompat_Light_ActionBar_Solid = 0x7f0d0131
 val Widget_AppCompat_Light_ActionBar_Solid_Inverse = 0x7f0d0132
 val Widget_AppCompat_Light_ActionBar_TabBar = 0x7f0d0133
 val Widget_AppCompat_Light_ActionBar_TabBar_Inverse = 0x7f0d0134
 val Widget_AppCompat_Light_ActionBar_TabText = 0x7f0d0135
 val Widget_AppCompat_Light_ActionBar_TabText_Inverse = 0x7f0d0136
 val Widget_AppCompat_Light_ActionBar_TabView = 0x7f0d0137
 val Widget_AppCompat_Light_ActionBar_TabView_Inverse = 0x7f0d0138
 val Widget_AppCompat_Light_ActionButton = 0x7f0d0139
 val Widget_AppCompat_Light_ActionButton_CloseMode = 0x7f0d013a
 val Widget_AppCompat_Light_ActionButton_Overflow = 0x7f0d013b
 val Widget_AppCompat_Light_ActionMode_Inverse = 0x7f0d013c
 val Widget_AppCompat_Light_ActivityChooserView = 0x7f0d013d
 val Widget_AppCompat_Light_AutoCompleteTextView = 0x7f0d013e
 val Widget_AppCompat_Light_DropDownItem_Spinner = 0x7f0d013f
 val Widget_AppCompat_Light_ListPopupWindow = 0x7f0d0140
 val Widget_AppCompat_Light_ListView_DropDown = 0x7f0d0141
 val Widget_AppCompat_Light_PopupMenu = 0x7f0d0142
 val Widget_AppCompat_Light_PopupMenu_Overflow = 0x7f0d0143
 val Widget_AppCompat_Light_SearchView = 0x7f0d0144
 val Widget_AppCompat_Light_Spinner_DropDown_ActionBar = 0x7f0d0145
 val Widget_AppCompat_ListMenuView = 0x7f0d0146
 val Widget_AppCompat_ListPopupWindow = 0x7f0d0147
 val Widget_AppCompat_ListView = 0x7f0d0148
 val Widget_AppCompat_ListView_DropDown = 0x7f0d0149
 val Widget_AppCompat_ListView_Menu = 0x7f0d014a
 val Widget_AppCompat_PopupMenu = 0x7f0d014b
 val Widget_AppCompat_PopupMenu_Overflow = 0x7f0d014c
 val Widget_AppCompat_PopupWindow = 0x7f0d014d
 val Widget_AppCompat_ProgressBar = 0x7f0d014e
 val Widget_AppCompat_ProgressBar_Horizontal = 0x7f0d014f
 val Widget_AppCompat_RatingBar = 0x7f0d0150
 val Widget_AppCompat_RatingBar_Indicator = 0x7f0d0151
 val Widget_AppCompat_RatingBar_Small = 0x7f0d0152
 val Widget_AppCompat_SearchView = 0x7f0d0153
 val Widget_AppCompat_SearchView_ActionBar = 0x7f0d0154
 val Widget_AppCompat_SeekBar = 0x7f0d0155
 val Widget_AppCompat_SeekBar_Discrete = 0x7f0d0156
 val Widget_AppCompat_Spinner = 0x7f0d0157
 val Widget_AppCompat_Spinner_DropDown = 0x7f0d0158
 val Widget_AppCompat_Spinner_DropDown_ActionBar = 0x7f0d0159
 val Widget_AppCompat_Spinner_Underlined = 0x7f0d015a
 val Widget_AppCompat_TextView = 0x7f0d015b
 val Widget_AppCompat_TextView_SpinnerItem = 0x7f0d015c
 val Widget_AppCompat_Toolbar = 0x7f0d015d
 val Widget_AppCompat_Toolbar_Button_Navigation = 0x7f0d015e
 val Widget_Compat_NotificationActionContainer = 0x7f0d015f
 val Widget_Compat_NotificationActionText = 0x7f0d0160
}
 object styleable {
/**
 * Attributes that can be used with a ActionBar.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[com.kartikeyinc.calculator:background][.ActionBar_background]`</td><td>Specifies a background drawable for the action bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:backgroundSplit][.ActionBar_backgroundSplit]`</td><td>Specifies a background drawable for the bottom component of a split action bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:backgroundStacked][.ActionBar_backgroundStacked]`</td><td>Specifies a background drawable for a second stacked row of the action bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:contentInsetEnd][.ActionBar_contentInsetEnd]`</td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:contentInsetEndWithActions][.ActionBar_contentInsetEndWithActions]`</td><td>Minimum inset for content views within a bar when actions from a menu
 * are present.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:contentInsetLeft][.ActionBar_contentInsetLeft]`</td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:contentInsetRight][.ActionBar_contentInsetRight]`</td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:contentInsetStart][.ActionBar_contentInsetStart]`</td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:contentInsetStartWithNavigation][.ActionBar_contentInsetStartWithNavigation]`</td><td>Minimum inset for content views within a bar when a navigation button
 * is present, such as the Up button.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:customNavigationLayout][.ActionBar_customNavigationLayout]`</td><td>Specifies a layout for custom navigation.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:displayOptions][.ActionBar_displayOptions]`</td><td>Options affecting how the action bar is displayed.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:divider][.ActionBar_divider]`</td><td>Specifies the drawable used for item dividers.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:elevation][.ActionBar_elevation]`</td><td>Elevation for the action bar itself</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:height][.ActionBar_height]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:hideOnContentScroll][.ActionBar_hideOnContentScroll]`</td><td>Set true to hide the action bar on a vertical nested scroll of content.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:homeAsUpIndicator][.ActionBar_homeAsUpIndicator]`</td><td>Specifies a drawable to use for the 'home as up' indicator.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:homeLayout][.ActionBar_homeLayout]`</td><td>Specifies a layout to use for the "home" section of the action bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:icon][.ActionBar_icon]`</td><td>Specifies the drawable used for the application icon.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:indeterminateProgressStyle][.ActionBar_indeterminateProgressStyle]`</td><td>Specifies a style resource to use for an indeterminate progress spinner.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:itemPadding][.ActionBar_itemPadding]`</td><td>Specifies padding that should be applied to the left and right sides of
 * system-provided items in the bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:logo][.ActionBar_logo]`</td><td>Specifies the drawable used for the application logo.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:navigationMode][.ActionBar_navigationMode]`</td><td>The type of navigation to use.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:popupTheme][.ActionBar_popupTheme]`</td><td>Reference to a theme that should be used to inflate popups
 * shown by widgets in the action bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:progressBarPadding][.ActionBar_progressBarPadding]`</td><td>Specifies the horizontal padding on either end for an embedded progress bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:progressBarStyle][.ActionBar_progressBarStyle]`</td><td>Specifies a style resource to use for an embedded progress bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:subtitle][.ActionBar_subtitle]`</td><td>Specifies subtitle text used for navigationMode="normal"</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:subtitleTextStyle][.ActionBar_subtitleTextStyle]`</td><td>Specifies a style to use for subtitle text.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:title][.ActionBar_title]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:titleTextStyle][.ActionBar_titleTextStyle]`</td><td>Specifies a style to use for title text.</td></tr>
</table> *
 * @see .ActionBar_background
 *
 * @see .ActionBar_backgroundSplit
 *
 * @see .ActionBar_backgroundStacked
 *
 * @see .ActionBar_contentInsetEnd
 *
 * @see .ActionBar_contentInsetEndWithActions
 *
 * @see .ActionBar_contentInsetLeft
 *
 * @see .ActionBar_contentInsetRight
 *
 * @see .ActionBar_contentInsetStart
 *
 * @see .ActionBar_contentInsetStartWithNavigation
 *
 * @see .ActionBar_customNavigationLayout
 *
 * @see .ActionBar_displayOptions
 *
 * @see .ActionBar_divider
 *
 * @see .ActionBar_elevation
 *
 * @see .ActionBar_height
 *
 * @see .ActionBar_hideOnContentScroll
 *
 * @see .ActionBar_homeAsUpIndicator
 *
 * @see .ActionBar_homeLayout
 *
 * @see .ActionBar_icon
 *
 * @see .ActionBar_indeterminateProgressStyle
 *
 * @see .ActionBar_itemPadding
 *
 * @see .ActionBar_logo
 *
 * @see .ActionBar_navigationMode
 *
 * @see .ActionBar_popupTheme
 *
 * @see .ActionBar_progressBarPadding
 *
 * @see .ActionBar_progressBarStyle
 *
 * @see .ActionBar_subtitle
 *
 * @see .ActionBar_subtitleTextStyle
 *
 * @see .ActionBar_title
 *
 * @see .ActionBar_titleTextStyle
 */
     val ActionBar = intArrayOf(0x7f020031, 0x7f020032, 0x7f020033, 0x7f02005e, 0x7f02005f, 0x7f020060, 0x7f020061, 0x7f020062, 0x7f020063, 0x7f020065, 0x7f02006a, 0x7f02006b, 0x7f02007e, 0x7f02008f, 0x7f020090, 0x7f020091, 0x7f020092, 0x7f020093, 0x7f020098, 0x7f02009b, 0x7f0200e0, 0x7f0200e8, 0x7f0200f3, 0x7f0200f6, 0x7f0200f7, 0x7f020111, 0x7f020114, 0x7f020130, 0x7f020139)
/**
 *
 *
 * @attr description
 * Specifies a background drawable for the action bar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:background
 */
     val ActionBar_background = 0
/**
 *
 *
 * @attr description
 * Specifies a background drawable for the bottom component of a split action bar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:backgroundSplit
 */
     val ActionBar_backgroundSplit = 1
/**
 *
 *
 * @attr description
 * Specifies a background drawable for a second stacked row of the action bar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:backgroundStacked
 */
     val ActionBar_backgroundStacked = 2
/**
 *
 *
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:contentInsetEnd
 */
     val ActionBar_contentInsetEnd = 3
/**
 *
 *
 * @attr description
 * Minimum inset for content views within a bar when actions from a menu
 * are present. Only valid for some themes and configurations.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:contentInsetEndWithActions
 */
     val ActionBar_contentInsetEndWithActions = 4
/**
 *
 *
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:contentInsetLeft
 */
     val ActionBar_contentInsetLeft = 5
/**
 *
 *
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:contentInsetRight
 */
     val ActionBar_contentInsetRight = 6
/**
 *
 *
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:contentInsetStart
 */
     val ActionBar_contentInsetStart = 7
/**
 *
 *
 * @attr description
 * Minimum inset for content views within a bar when a navigation button
 * is present, such as the Up button. Only valid for some themes and configurations.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:contentInsetStartWithNavigation
 */
     val ActionBar_contentInsetStartWithNavigation = 8
/**
 *
 *
 * @attr description
 * Specifies a layout for custom navigation. Overrides navigationMode.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:customNavigationLayout
 */
     val ActionBar_customNavigationLayout = 9
/**
 *
 *
 * @attr description
 * Options affecting how the action bar is displayed.
 *
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>disableHome</td><td>20</td><td></td></tr>
 * <tr><td>homeAsUp</td><td>4</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>showCustom</td><td>10</td><td></td></tr>
 * <tr><td>showHome</td><td>2</td><td></td></tr>
 * <tr><td>showTitle</td><td>8</td><td></td></tr>
 * <tr><td>useLogo</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:displayOptions
 */
     val ActionBar_displayOptions = 10
/**
 *
 *
 * @attr description
 * Specifies the drawable used for item dividers.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:divider
 */
     val ActionBar_divider = 11
/**
 *
 *
 * @attr description
 * Elevation for the action bar itself
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:elevation
 */
     val ActionBar_elevation = 12
/**
 *
 *
 * @attr description
 * Specifies a fixed height.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:height
 */
     val ActionBar_height = 13
/**
 *
 *
 * @attr description
 * Set true to hide the action bar on a vertical nested scroll of content.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:hideOnContentScroll
 */
     val ActionBar_hideOnContentScroll = 14
/**
 *
 *
 * @attr description
 * Up navigation glyph
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:homeAsUpIndicator
 */
     val ActionBar_homeAsUpIndicator = 15
/**
 *
 *
 * @attr description
 * Specifies a layout to use for the "home" section of the action bar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:homeLayout
 */
     val ActionBar_homeLayout = 16
/**
 *
 *
 * @attr description
 * Specifies the drawable used for the application icon.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:icon
 */
     val ActionBar_icon = 17
/**
 *
 *
 * @attr description
 * Specifies a style resource to use for an indeterminate progress spinner.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:indeterminateProgressStyle
 */
     val ActionBar_indeterminateProgressStyle = 18
/**
 *
 *
 * @attr description
 * Specifies padding that should be applied to the left and right sides of
 * system-provided items in the bar.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:itemPadding
 */
     val ActionBar_itemPadding = 19
/**
 *
 *
 * @attr description
 * Specifies the drawable used for the application logo.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:logo
 */
     val ActionBar_logo = 20
/**
 *
 *
 * @attr description
 * The type of navigation to use.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>listMode</td><td>1</td><td>The action bar will use a selection list for navigation.</td></tr>
 * <tr><td>normal</td><td>0</td><td>Normal static title text</td></tr>
 * <tr><td>tabMode</td><td>2</td><td>The action bar will use a series of horizontal tabs for navigation.</td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:navigationMode
 */
     val ActionBar_navigationMode = 21
/**
 *
 *
 * @attr description
 * Reference to a theme that should be used to inflate popups
 * shown by widgets in the action bar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:popupTheme
 */
     val ActionBar_popupTheme = 22
/**
 *
 *
 * @attr description
 * Specifies the horizontal padding on either end for an embedded progress bar.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:progressBarPadding
 */
     val ActionBar_progressBarPadding = 23
/**
 *
 *
 * @attr description
 * Specifies a style resource to use for an embedded progress bar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:progressBarStyle
 */
     val ActionBar_progressBarStyle = 24
/**
 *
 *
 * @attr description
 * Specifies subtitle text used for navigationMode="normal"
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:subtitle
 */
     val ActionBar_subtitle = 25
/**
 *
 *
 * @attr description
 * Specifies a style to use for subtitle text.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:subtitleTextStyle
 */
     val ActionBar_subtitleTextStyle = 26
/**
 *
 *
 * @attr description
 * Specifies title text used for navigationMode="normal"
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:title
 */
     val ActionBar_title = 27
/**
 *
 *
 * @attr description
 * Specifies a style to use for title text.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:titleTextStyle
 */
     val ActionBar_titleTextStyle = 28
/**
 * Attributes that can be used with a ActionBarLayout.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:layout_gravity][.ActionBarLayout_android_layout_gravity]`</td><td></td></tr>
</table> *
 * @see .ActionBarLayout_android_layout_gravity
 */
     val ActionBarLayout = intArrayOf(0x010100b3)
/**
 *
 * This symbol is the offset where the [android.R.attr.layout_gravity]
 * attribute's value can be found in the [.ActionBarLayout] array.
 *
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td></td></tr>
 * <tr><td>center</td><td>11</td><td></td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td></td></tr>
 * <tr><td>center_vertical</td><td>10</td><td></td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td></td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td></td></tr>
 * <tr><td>end</td><td>800005</td><td></td></tr>
 * <tr><td>fill</td><td>77</td><td></td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td></td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td></td></tr>
 * <tr><td>left</td><td>3</td><td></td></tr>
 * <tr><td>right</td><td>5</td><td></td></tr>
 * <tr><td>start</td><td>800003</td><td></td></tr>
 * <tr><td>top</td><td>30</td><td></td></tr>
</table> *
 *
 * @attr name android:layout_gravity
 */
     val ActionBarLayout_android_layout_gravity = 0
/**
 * Attributes that can be used with a ActionMenuItemView.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:minWidth][.ActionMenuItemView_android_minWidth]`</td><td></td></tr>
</table> *
 * @see .ActionMenuItemView_android_minWidth
 */
     val ActionMenuItemView = intArrayOf(0x0101013f)
/**
 *
 * This symbol is the offset where the [android.R.attr.minWidth]
 * attribute's value can be found in the [.ActionMenuItemView] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minWidth
 */
     val ActionMenuItemView_android_minWidth = 0
 val ActionMenuView = intArrayOf()
/**
 * Attributes that can be used with a ActionMode.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[com.kartikeyinc.calculator:background][.ActionMode_background]`</td><td>Specifies a background drawable for the action bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:backgroundSplit][.ActionMode_backgroundSplit]`</td><td>Specifies a background drawable for the bottom component of a split action bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:closeItemLayout][.ActionMode_closeItemLayout]`</td><td>Specifies a layout to use for the "close" item at the starting edge.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:height][.ActionMode_height]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:subtitleTextStyle][.ActionMode_subtitleTextStyle]`</td><td>Specifies a style to use for subtitle text.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:titleTextStyle][.ActionMode_titleTextStyle]`</td><td>Specifies a style to use for title text.</td></tr>
</table> *
 * @see .ActionMode_background
 *
 * @see .ActionMode_backgroundSplit
 *
 * @see .ActionMode_closeItemLayout
 *
 * @see .ActionMode_height
 *
 * @see .ActionMode_subtitleTextStyle
 *
 * @see .ActionMode_titleTextStyle
 */
     val ActionMode = intArrayOf(0x7f020031, 0x7f020032, 0x7f02004b, 0x7f02008f, 0x7f020114, 0x7f020139)
/**
 *
 *
 * @attr description
 * Specifies a background for the action mode bar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:background
 */
     val ActionMode_background = 0
/**
 *
 *
 * @attr description
 * Specifies a background for the split action mode bar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:backgroundSplit
 */
     val ActionMode_backgroundSplit = 1
/**
 *
 *
 * @attr description
 * Specifies a layout to use for the "close" item at the starting edge.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:closeItemLayout
 */
     val ActionMode_closeItemLayout = 2
/**
 *
 *
 * @attr description
 * Specifies a fixed height for the action mode bar.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:height
 */
     val ActionMode_height = 3
/**
 *
 *
 * @attr description
 * Specifies a style to use for subtitle text.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:subtitleTextStyle
 */
     val ActionMode_subtitleTextStyle = 4
/**
 *
 *
 * @attr description
 * Specifies a style to use for title text.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:titleTextStyle
 */
     val ActionMode_titleTextStyle = 5
/**
 * Attributes that can be used with a ActivityChooserView.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[com.kartikeyinc.calculator:expandActivityOverflowButtonDrawable][.ActivityChooserView_expandActivityOverflowButtonDrawable]`</td><td>The drawable to show in the button for expanding the activities overflow popup.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:initialActivityCount][.ActivityChooserView_initialActivityCount]`</td><td>The maximal number of items initially shown in the activity list.</td></tr>
</table> *
 * @see .ActivityChooserView_expandActivityOverflowButtonDrawable
 *
 * @see .ActivityChooserView_initialActivityCount
 */
     val ActivityChooserView = intArrayOf(0x7f020080, 0x7f020099)
/**
 *
 *
 * @attr description
 * The drawable to show in the button for expanding the activities overflow popup.
 * **Note:** Clients would like to set this drawable
 * as a clue about the action the chosen activity will perform. For
 * example, if share activity is to be chosen the drawable should
 * give a clue that sharing is to be performed.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:expandActivityOverflowButtonDrawable
 */
     val ActivityChooserView_expandActivityOverflowButtonDrawable = 0
/**
 *
 *
 * @attr description
 * The maximal number of items initially shown in the activity list.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:initialActivityCount
 */
     val ActivityChooserView_initialActivityCount = 1
/**
 * Attributes that can be used with a AlertDialog.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:layout][.AlertDialog_android_layout]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:buttonIconDimen][.AlertDialog_buttonIconDimen]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:buttonPanelSideLayout][.AlertDialog_buttonPanelSideLayout]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listItemLayout][.AlertDialog_listItemLayout]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listLayout][.AlertDialog_listLayout]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:multiChoiceItemLayout][.AlertDialog_multiChoiceItemLayout]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:showTitle][.AlertDialog_showTitle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:singleChoiceItemLayout][.AlertDialog_singleChoiceItemLayout]`</td><td></td></tr>
</table> *
 * @see .AlertDialog_android_layout
 *
 * @see .AlertDialog_buttonIconDimen
 *
 * @see .AlertDialog_buttonPanelSideLayout
 *
 * @see .AlertDialog_listItemLayout
 *
 * @see .AlertDialog_listLayout
 *
 * @see .AlertDialog_multiChoiceItemLayout
 *
 * @see .AlertDialog_showTitle
 *
 * @see .AlertDialog_singleChoiceItemLayout
 */
     val AlertDialog = intArrayOf(0x010100f2, 0x7f020041, 0x7f020042, 0x7f0200d5, 0x7f0200d6, 0x7f0200e5, 0x7f020107, 0x7f020108)
/**
 *
 * This symbol is the offset where the [android.R.attr.layout]
 * attribute's value can be found in the [.AlertDialog] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:layout
 */
     val AlertDialog_android_layout = 0
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.buttonIconDimen]
 * attribute's value can be found in the [.AlertDialog] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:buttonIconDimen
 */
     val AlertDialog_buttonIconDimen = 1
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.buttonPanelSideLayout]
 * attribute's value can be found in the [.AlertDialog] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:buttonPanelSideLayout
 */
     val AlertDialog_buttonPanelSideLayout = 2
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.listItemLayout]
 * attribute's value can be found in the [.AlertDialog] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:listItemLayout
 */
     val AlertDialog_listItemLayout = 3
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.listLayout]
 * attribute's value can be found in the [.AlertDialog] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:listLayout
 */
     val AlertDialog_listLayout = 4
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.multiChoiceItemLayout]
 * attribute's value can be found in the [.AlertDialog] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:multiChoiceItemLayout
 */
     val AlertDialog_multiChoiceItemLayout = 5
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.showTitle]
 * attribute's value can be found in the [.AlertDialog] array.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:showTitle
 */
     val AlertDialog_showTitle = 6
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.singleChoiceItemLayout]
 * attribute's value can be found in the [.AlertDialog] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:singleChoiceItemLayout
 */
     val AlertDialog_singleChoiceItemLayout = 7
/**
 * Attributes that can be used with a AnimatedStateListDrawableCompat.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:dither][.AnimatedStateListDrawableCompat_android_dither]`</td><td></td></tr>
 * <tr><td>`[android:visible][.AnimatedStateListDrawableCompat_android_visible]`</td><td></td></tr>
 * <tr><td>`[android:variablePadding][.AnimatedStateListDrawableCompat_android_variablePadding]`</td><td></td></tr>
 * <tr><td>`[android:constantSize][.AnimatedStateListDrawableCompat_android_constantSize]`</td><td></td></tr>
 * <tr><td>`[android:enterFadeDuration][.AnimatedStateListDrawableCompat_android_enterFadeDuration]`</td><td></td></tr>
 * <tr><td>`[android:exitFadeDuration][.AnimatedStateListDrawableCompat_android_exitFadeDuration]`</td><td></td></tr>
</table> *
 * @see .AnimatedStateListDrawableCompat_android_dither
 *
 * @see .AnimatedStateListDrawableCompat_android_visible
 *
 * @see .AnimatedStateListDrawableCompat_android_variablePadding
 *
 * @see .AnimatedStateListDrawableCompat_android_constantSize
 *
 * @see .AnimatedStateListDrawableCompat_android_enterFadeDuration
 *
 * @see .AnimatedStateListDrawableCompat_android_exitFadeDuration
 */
     val AnimatedStateListDrawableCompat = intArrayOf(0x0101011c, 0x01010194, 0x01010195, 0x01010196, 0x0101030c, 0x0101030d)
/**
 *
 *
 * @attr description
 * Enables or disables dithering of the bitmap if the bitmap does not have the
 * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
 * an RGB 565 screen).
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:dither
 */
     val AnimatedStateListDrawableCompat_android_dither = 0
/**
 *
 *
 * @attr description
 * Indicates whether the drawable should be initially visible.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:visible
 */
     val AnimatedStateListDrawableCompat_android_visible = 1
/**
 *
 *
 * @attr description
 * If true, allows the drawable's padding to change based on the
 * current state that is selected.  If false, the padding will
 * stay the same (based on the maximum padding of all the states).
 * Enabling this feature requires that the owner of the drawable
 * deal with performing layout when the state changes, which is
 * often not supported.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:variablePadding
 */
     val AnimatedStateListDrawableCompat_android_variablePadding = 2
/**
 *
 *
 * @attr description
 * If true, the drawable's reported internal size will remain
 * constant as the state changes; the size is the maximum of all
 * of the states.  If false, the size will vary based on the
 * current state.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:constantSize
 */
     val AnimatedStateListDrawableCompat_android_constantSize = 3
/**
 *
 *
 * @attr description
 * Amount of time (in milliseconds) to fade in a new state drawable.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name android:enterFadeDuration
 */
     val AnimatedStateListDrawableCompat_android_enterFadeDuration = 4
/**
 *
 *
 * @attr description
 * Amount of time (in milliseconds) to fade out an old state drawable.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name android:exitFadeDuration
 */
     val AnimatedStateListDrawableCompat_android_exitFadeDuration = 5
/**
 * Attributes that can be used with a AnimatedStateListDrawableItem.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:id][.AnimatedStateListDrawableItem_android_id]`</td><td></td></tr>
 * <tr><td>`[android:drawable][.AnimatedStateListDrawableItem_android_drawable]`</td><td></td></tr>
</table> *
 * @see .AnimatedStateListDrawableItem_android_id
 *
 * @see .AnimatedStateListDrawableItem_android_drawable
 */
     val AnimatedStateListDrawableItem = intArrayOf(0x010100d0, 0x01010199)
/**
 *
 *
 * @attr description
 * Keyframe identifier for use in specifying transitions.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:id
 */
     val AnimatedStateListDrawableItem_android_id = 0
/**
 *
 *
 * @attr description
 * Reference to a drawable resource to use for the frame.  If not
 * given, the drawable must be defined by the first child tag.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:drawable
 */
     val AnimatedStateListDrawableItem_android_drawable = 1
/**
 * Attributes that can be used with a AnimatedStateListDrawableTransition.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:drawable][.AnimatedStateListDrawableTransition_android_drawable]`</td><td></td></tr>
 * <tr><td>`[android:toId][.AnimatedStateListDrawableTransition_android_toId]`</td><td></td></tr>
 * <tr><td>`[android:fromId][.AnimatedStateListDrawableTransition_android_fromId]`</td><td></td></tr>
 * <tr><td>`[android:reversible][.AnimatedStateListDrawableTransition_android_reversible]`</td><td></td></tr>
</table> *
 * @see .AnimatedStateListDrawableTransition_android_drawable
 *
 * @see .AnimatedStateListDrawableTransition_android_toId
 *
 * @see .AnimatedStateListDrawableTransition_android_fromId
 *
 * @see .AnimatedStateListDrawableTransition_android_reversible
 */
     val AnimatedStateListDrawableTransition = intArrayOf(0x01010199, 0x01010449, 0x0101044a, 0x0101044b)
/**
 *
 *
 * @attr description
 * Reference to a animation drawable resource to use for the frame.  If not
 * given, the animation drawable must be defined by the first child tag.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:drawable
 */
     val AnimatedStateListDrawableTransition_android_drawable = 0
/**
 *
 *
 * @attr description
 * Keyframe identifier for the ending state.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:toId
 */
     val AnimatedStateListDrawableTransition_android_toId = 1
/**
 *
 *
 * @attr description
 * Keyframe identifier for the starting state.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:fromId
 */
     val AnimatedStateListDrawableTransition_android_fromId = 2
/**
 *
 *
 * @attr description
 * Whether this transition is reversible.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:reversible
 */
     val AnimatedStateListDrawableTransition_android_reversible = 3
/**
 * Attributes that can be used with a AppCompatImageView.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:src][.AppCompatImageView_android_src]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:srcCompat][.AppCompatImageView_srcCompat]`</td><td>Sets a drawable as the content of this ImageView.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:tint][.AppCompatImageView_tint]`</td><td>Tint to apply to the image source.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:tintMode][.AppCompatImageView_tintMode]`</td><td>Blending mode used to apply the image source tint.</td></tr>
</table> *
 * @see .AppCompatImageView_android_src
 *
 * @see .AppCompatImageView_srcCompat
 *
 * @see .AppCompatImageView_tint
 *
 * @see .AppCompatImageView_tintMode
 */
     val AppCompatImageView = intArrayOf(0x01010119, 0x7f02010d, 0x7f02012e, 0x7f02012f)
/**
 *
 * This symbol is the offset where the [android.R.attr.src]
 * attribute's value can be found in the [.AppCompatImageView] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:src
 */
     val AppCompatImageView_android_src = 0
/**
 *
 *
 * @attr description
 * Sets a drawable as the content of this ImageView. Allows the use of vector drawable
 * when running on older versions of the platform.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:srcCompat
 */
     val AppCompatImageView_srcCompat = 1
/**
 *
 *
 * @attr description
 * Tint to apply to the image source.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:tint
 */
     val AppCompatImageView_tint = 2
/**
 *
 *
 * @attr description
 * Blending mode used to apply the image source tint.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and icon color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:tintMode
 */
     val AppCompatImageView_tintMode = 3
/**
 * Attributes that can be used with a AppCompatSeekBar.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:thumb][.AppCompatSeekBar_android_thumb]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:tickMark][.AppCompatSeekBar_tickMark]`</td><td>Drawable displayed at each progress position on a seekbar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:tickMarkTint][.AppCompatSeekBar_tickMarkTint]`</td><td>Tint to apply to the tick mark drawable.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:tickMarkTintMode][.AppCompatSeekBar_tickMarkTintMode]`</td><td>Blending mode used to apply the tick mark tint.</td></tr>
</table> *
 * @see .AppCompatSeekBar_android_thumb
 *
 * @see .AppCompatSeekBar_tickMark
 *
 * @see .AppCompatSeekBar_tickMarkTint
 *
 * @see .AppCompatSeekBar_tickMarkTintMode
 */
     val AppCompatSeekBar = intArrayOf(0x01010142, 0x7f02012b, 0x7f02012c, 0x7f02012d)
/**
 *
 * This symbol is the offset where the [android.R.attr.thumb]
 * attribute's value can be found in the [.AppCompatSeekBar] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:thumb
 */
     val AppCompatSeekBar_android_thumb = 0
/**
 *
 *
 * @attr description
 * Drawable displayed at each progress position on a seekbar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:tickMark
 */
     val AppCompatSeekBar_tickMark = 1
/**
 *
 *
 * @attr description
 * Tint to apply to the tick mark drawable.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:tickMarkTint
 */
     val AppCompatSeekBar_tickMarkTint = 2
/**
 *
 *
 * @attr description
 * Blending mode used to apply the tick mark tint.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:tickMarkTintMode
 */
     val AppCompatSeekBar_tickMarkTintMode = 3
/**
 * Attributes that can be used with a AppCompatTextHelper.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:textAppearance][.AppCompatTextHelper_android_textAppearance]`</td><td></td></tr>
 * <tr><td>`[android:drawableTop][.AppCompatTextHelper_android_drawableTop]`</td><td></td></tr>
 * <tr><td>`[android:drawableBottom][.AppCompatTextHelper_android_drawableBottom]`</td><td></td></tr>
 * <tr><td>`[android:drawableLeft][.AppCompatTextHelper_android_drawableLeft]`</td><td></td></tr>
 * <tr><td>`[android:drawableRight][.AppCompatTextHelper_android_drawableRight]`</td><td></td></tr>
 * <tr><td>`[android:drawableStart][.AppCompatTextHelper_android_drawableStart]`</td><td></td></tr>
 * <tr><td>`[android:drawableEnd][.AppCompatTextHelper_android_drawableEnd]`</td><td></td></tr>
</table> *
 * @see .AppCompatTextHelper_android_textAppearance
 *
 * @see .AppCompatTextHelper_android_drawableTop
 *
 * @see .AppCompatTextHelper_android_drawableBottom
 *
 * @see .AppCompatTextHelper_android_drawableLeft
 *
 * @see .AppCompatTextHelper_android_drawableRight
 *
 * @see .AppCompatTextHelper_android_drawableStart
 *
 * @see .AppCompatTextHelper_android_drawableEnd
 */
     val AppCompatTextHelper = intArrayOf(0x01010034, 0x0101016d, 0x0101016e, 0x0101016f, 0x01010170, 0x01010392, 0x01010393)
/**
 *
 * This symbol is the offset where the [android.R.attr.textAppearance]
 * attribute's value can be found in the [.AppCompatTextHelper] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:textAppearance
 */
     val AppCompatTextHelper_android_textAppearance = 0
/**
 *
 * This symbol is the offset where the [android.R.attr.drawableTop]
 * attribute's value can be found in the [.AppCompatTextHelper] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:drawableTop
 */
     val AppCompatTextHelper_android_drawableTop = 1
/**
 *
 * This symbol is the offset where the [android.R.attr.drawableBottom]
 * attribute's value can be found in the [.AppCompatTextHelper] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:drawableBottom
 */
     val AppCompatTextHelper_android_drawableBottom = 2
/**
 *
 * This symbol is the offset where the [android.R.attr.drawableLeft]
 * attribute's value can be found in the [.AppCompatTextHelper] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:drawableLeft
 */
     val AppCompatTextHelper_android_drawableLeft = 3
/**
 *
 * This symbol is the offset where the [android.R.attr.drawableRight]
 * attribute's value can be found in the [.AppCompatTextHelper] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:drawableRight
 */
     val AppCompatTextHelper_android_drawableRight = 4
/**
 *
 * This symbol is the offset where the [android.R.attr.drawableStart]
 * attribute's value can be found in the [.AppCompatTextHelper] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:drawableStart
 */
     val AppCompatTextHelper_android_drawableStart = 5
/**
 *
 * This symbol is the offset where the [android.R.attr.drawableEnd]
 * attribute's value can be found in the [.AppCompatTextHelper] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:drawableEnd
 */
     val AppCompatTextHelper_android_drawableEnd = 6
/**
 * Attributes that can be used with a AppCompatTextView.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:textAppearance][.AppCompatTextView_android_textAppearance]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:autoSizeMaxTextSize][.AppCompatTextView_autoSizeMaxTextSize]`</td><td>The maximum text size constraint to be used when auto-sizing text.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:autoSizeMinTextSize][.AppCompatTextView_autoSizeMinTextSize]`</td><td>The minimum text size constraint to be used when auto-sizing text.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:autoSizePresetSizes][.AppCompatTextView_autoSizePresetSizes]`</td><td>Resource array of dimensions to be used in conjunction with
 * `autoSizeTextType` set to `uniform`.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:autoSizeStepGranularity][.AppCompatTextView_autoSizeStepGranularity]`</td><td>Specify the auto-size step size if `autoSizeTextType` is set to
 * `uniform`.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:autoSizeTextType][.AppCompatTextView_autoSizeTextType]`</td><td>Specify the type of auto-size.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:drawableBottomCompat][.AppCompatTextView_drawableBottomCompat]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:drawableEndCompat][.AppCompatTextView_drawableEndCompat]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:drawableLeftCompat][.AppCompatTextView_drawableLeftCompat]`</td><td>Compound drawables allowing the use of vector drawable when running on older versions
 * of the platform.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:drawableRightCompat][.AppCompatTextView_drawableRightCompat]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:drawableStartCompat][.AppCompatTextView_drawableStartCompat]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:drawableTint][.AppCompatTextView_drawableTint]`</td><td>Tint to apply to the compound (left, top, etc.) drawables.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:drawableTintMode][.AppCompatTextView_drawableTintMode]`</td><td>Blending mode used to apply the compound (left, top, etc.) drawables tint.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:drawableTopCompat][.AppCompatTextView_drawableTopCompat]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:firstBaselineToTopHeight][.AppCompatTextView_firstBaselineToTopHeight]`</td><td>Distance from the top of the TextView to the first text baseline.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:fontFamily][.AppCompatTextView_fontFamily]`</td><td>The attribute for the font family.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:fontVariationSettings][.AppCompatTextView_fontVariationSettings]`</td><td>The variation settings to be applied to the font.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:lastBaselineToBottomHeight][.AppCompatTextView_lastBaselineToBottomHeight]`</td><td>Distance from the bottom of the TextView to the last text baseline.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:lineHeight][.AppCompatTextView_lineHeight]`</td><td>Explicit height between lines of text.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:textAllCaps][.AppCompatTextView_textAllCaps]`</td><td>Present the text in ALL CAPS.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:textLocale][.AppCompatTextView_textLocale]`</td><td>Set the textLocale by a comma-separated language tag string,
 * for example "ja-JP,zh-CN".</td></tr>
</table> *
 * @see .AppCompatTextView_android_textAppearance
 *
 * @see .AppCompatTextView_autoSizeMaxTextSize
 *
 * @see .AppCompatTextView_autoSizeMinTextSize
 *
 * @see .AppCompatTextView_autoSizePresetSizes
 *
 * @see .AppCompatTextView_autoSizeStepGranularity
 *
 * @see .AppCompatTextView_autoSizeTextType
 *
 * @see .AppCompatTextView_drawableBottomCompat
 *
 * @see .AppCompatTextView_drawableEndCompat
 *
 * @see .AppCompatTextView_drawableLeftCompat
 *
 * @see .AppCompatTextView_drawableRightCompat
 *
 * @see .AppCompatTextView_drawableStartCompat
 *
 * @see .AppCompatTextView_drawableTint
 *
 * @see .AppCompatTextView_drawableTintMode
 *
 * @see .AppCompatTextView_drawableTopCompat
 *
 * @see .AppCompatTextView_firstBaselineToTopHeight
 *
 * @see .AppCompatTextView_fontFamily
 *
 * @see .AppCompatTextView_fontVariationSettings
 *
 * @see .AppCompatTextView_lastBaselineToBottomHeight
 *
 * @see .AppCompatTextView_lineHeight
 *
 * @see .AppCompatTextView_textAllCaps
 *
 * @see .AppCompatTextView_textLocale
 */
     val AppCompatTextView = intArrayOf(0x01010034, 0x7f02002c, 0x7f02002d, 0x7f02002e, 0x7f02002f, 0x7f020030, 0x7f02006f, 0x7f020070, 0x7f020071, 0x7f020072, 0x7f020074, 0x7f020075, 0x7f020076, 0x7f020077, 0x7f020081, 0x7f020083, 0x7f02008b, 0x7f02009c, 0x7f0200d0, 0x7f02011a, 0x7f020125)
/**
 *
 * This symbol is the offset where the [android.R.attr.textAppearance]
 * attribute's value can be found in the [.AppCompatTextView] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:textAppearance
 */
     val AppCompatTextView_android_textAppearance = 0
/**
 *
 *
 * @attr description
 * The maximum text size constraint to be used when auto-sizing text.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:autoSizeMaxTextSize
 */
     val AppCompatTextView_autoSizeMaxTextSize = 1
/**
 *
 *
 * @attr description
 * The minimum text size constraint to be used when auto-sizing text.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:autoSizeMinTextSize
 */
     val AppCompatTextView_autoSizeMinTextSize = 2
/**
 *
 *
 * @attr description
 * Resource array of dimensions to be used in conjunction with
 * `autoSizeTextType` set to `uniform`. Overrides
 * `autoSizeStepGranularity` if set.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:autoSizePresetSizes
 */
     val AppCompatTextView_autoSizePresetSizes = 3
/**
 *
 *
 * @attr description
 * Specify the auto-size step size if `autoSizeTextType` is set to
 * `uniform`. The default is 1px. Overwrites
 * `autoSizePresetSizes` if set.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:autoSizeStepGranularity
 */
     val AppCompatTextView_autoSizeStepGranularity = 4
/**
 *
 *
 * @attr description
 * Specify the type of auto-size. Note that this feature is not supported by EditText,
 * works only for TextView.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>none</td><td>0</td><td>No auto-sizing (default).</td></tr>
 * <tr><td>uniform</td><td>1</td><td>Uniform horizontal and vertical text size scaling to fit within the
 * container.</td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:autoSizeTextType
 */
     val AppCompatTextView_autoSizeTextType = 5
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.drawableBottomCompat]
 * attribute's value can be found in the [.AppCompatTextView] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:drawableBottomCompat
 */
     val AppCompatTextView_drawableBottomCompat = 6
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.drawableEndCompat]
 * attribute's value can be found in the [.AppCompatTextView] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:drawableEndCompat
 */
     val AppCompatTextView_drawableEndCompat = 7
/**
 *
 *
 * @attr description
 * Compound drawables allowing the use of vector drawable when running on older versions
 * of the platform.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:drawableLeftCompat
 */
     val AppCompatTextView_drawableLeftCompat = 8
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.drawableRightCompat]
 * attribute's value can be found in the [.AppCompatTextView] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:drawableRightCompat
 */
     val AppCompatTextView_drawableRightCompat = 9
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.drawableStartCompat]
 * attribute's value can be found in the [.AppCompatTextView] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:drawableStartCompat
 */
     val AppCompatTextView_drawableStartCompat = 10
/**
 *
 *
 * @attr description
 * Tint to apply to the compound (left, top, etc.) drawables.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:drawableTint
 */
     val AppCompatTextView_drawableTint = 11
/**
 *
 *
 * @attr description
 * Blending mode used to apply the compound (left, top, etc.) drawables tint.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:drawableTintMode
 */
     val AppCompatTextView_drawableTintMode = 12
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.drawableTopCompat]
 * attribute's value can be found in the [.AppCompatTextView] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:drawableTopCompat
 */
     val AppCompatTextView_drawableTopCompat = 13
/**
 *
 *
 * @attr description
 * Distance from the top of the TextView to the first text baseline. If set, this
 * overrides the value set for paddingTop.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:firstBaselineToTopHeight
 */
     val AppCompatTextView_firstBaselineToTopHeight = 14
/**
 *
 *
 * @attr description
 * The attribute for the font family.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:fontFamily
 */
     val AppCompatTextView_fontFamily = 15
/**
 *
 *
 * @attr description
 * OpenType font variation settings, available after api 26.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:fontVariationSettings
 */
     val AppCompatTextView_fontVariationSettings = 16
/**
 *
 *
 * @attr description
 * Distance from the bottom of the TextView to the last text baseline. If set, this
 * overrides the value set for paddingBottom.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:lastBaselineToBottomHeight
 */
     val AppCompatTextView_lastBaselineToBottomHeight = 17
/**
 *
 *
 * @attr description
 * Explicit height between lines of text. If set, this will override the values set
 * for lineSpacingExtra and lineSpacingMultiplier.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:lineHeight
 */
     val AppCompatTextView_lineHeight = 18
/**
 *
 *
 * @attr description
 * Present the text in ALL CAPS. This may use a small-caps form when available.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:textAllCaps
 */
     val AppCompatTextView_textAllCaps = 19
/**
 *
 *
 * @attr description
 * Set the textLocale by a comma-separated language tag string,
 * for example "ja-JP,zh-CN". This attribute only takes effect on API 21 and above.
 * Before API 24, only the first language tag is used. Starting from API 24,
 * the string will be converted into a [android.os.LocaleList] and then used by
 * [android.widget.TextView]
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:textLocale
 */
     val AppCompatTextView_textLocale = 20
/**
 * Attributes that can be used with a AppCompatTheme.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:windowIsFloating][.AppCompatTheme_android_windowIsFloating]`</td><td></td></tr>
 * <tr><td>`[android:windowAnimationStyle][.AppCompatTheme_android_windowAnimationStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionBarDivider][.AppCompatTheme_actionBarDivider]`</td><td>Custom divider drawable to use for elements in the action bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionBarItemBackground][.AppCompatTheme_actionBarItemBackground]`</td><td>Custom item state list drawable background for action bar items.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionBarPopupTheme][.AppCompatTheme_actionBarPopupTheme]`</td><td>Reference to a theme that should be used to inflate popups
 * shown by widgets in the action bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionBarSize][.AppCompatTheme_actionBarSize]`</td><td>Size of the Action Bar, including the contextual
 * bar used to present Action Modes.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionBarSplitStyle][.AppCompatTheme_actionBarSplitStyle]`</td><td>Reference to a style for the split Action Bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionBarStyle][.AppCompatTheme_actionBarStyle]`</td><td>Reference to a style for the Action Bar</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionBarTabBarStyle][.AppCompatTheme_actionBarTabBarStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionBarTabStyle][.AppCompatTheme_actionBarTabStyle]`</td><td>Default style for tabs within an action bar</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionBarTabTextStyle][.AppCompatTheme_actionBarTabTextStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionBarTheme][.AppCompatTheme_actionBarTheme]`</td><td>Reference to a theme that should be used to inflate the
 * action bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionBarWidgetTheme][.AppCompatTheme_actionBarWidgetTheme]`</td><td>Reference to a theme that should be used to inflate widgets
 * and layouts destined for the action bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionButtonStyle][.AppCompatTheme_actionButtonStyle]`</td><td>Default action button style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionDropDownStyle][.AppCompatTheme_actionDropDownStyle]`</td><td>Default ActionBar dropdown style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionMenuTextAppearance][.AppCompatTheme_actionMenuTextAppearance]`</td><td>TextAppearance style that will be applied to text that
 * appears within action menu items.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionMenuTextColor][.AppCompatTheme_actionMenuTextColor]`</td><td>Color for text that appears within action menu items.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionModeBackground][.AppCompatTheme_actionModeBackground]`</td><td>Background drawable to use for action mode UI</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionModeCloseButtonStyle][.AppCompatTheme_actionModeCloseButtonStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionModeCloseDrawable][.AppCompatTheme_actionModeCloseDrawable]`</td><td>Drawable to use for the close action mode button</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionModeCopyDrawable][.AppCompatTheme_actionModeCopyDrawable]`</td><td>Drawable to use for the Copy action button in Contextual Action Bar</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionModeCutDrawable][.AppCompatTheme_actionModeCutDrawable]`</td><td>Drawable to use for the Cut action button in Contextual Action Bar</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionModeFindDrawable][.AppCompatTheme_actionModeFindDrawable]`</td><td>Drawable to use for the Find action button in WebView selection action modes</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionModePasteDrawable][.AppCompatTheme_actionModePasteDrawable]`</td><td>Drawable to use for the Paste action button in Contextual Action Bar</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionModePopupWindowStyle][.AppCompatTheme_actionModePopupWindowStyle]`</td><td>PopupWindow style to use for action modes when showing as a window overlay.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionModeSelectAllDrawable][.AppCompatTheme_actionModeSelectAllDrawable]`</td><td>Drawable to use for the Select all action button in Contextual Action Bar</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionModeShareDrawable][.AppCompatTheme_actionModeShareDrawable]`</td><td>Drawable to use for the Share action button in WebView selection action modes</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionModeSplitBackground][.AppCompatTheme_actionModeSplitBackground]`</td><td>Background drawable to use for action mode UI in the lower split bar</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionModeStyle][.AppCompatTheme_actionModeStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionModeWebSearchDrawable][.AppCompatTheme_actionModeWebSearchDrawable]`</td><td>Drawable to use for the Web Search action button in WebView selection action modes</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionOverflowButtonStyle][.AppCompatTheme_actionOverflowButtonStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionOverflowMenuStyle][.AppCompatTheme_actionOverflowMenuStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:activityChooserViewStyle][.AppCompatTheme_activityChooserViewStyle]`</td><td>Default ActivityChooserView style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:alertDialogButtonGroupStyle][.AppCompatTheme_alertDialogButtonGroupStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:alertDialogCenterButtons][.AppCompatTheme_alertDialogCenterButtons]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:alertDialogStyle][.AppCompatTheme_alertDialogStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:alertDialogTheme][.AppCompatTheme_alertDialogTheme]`</td><td>Theme to use for alert dialogs spawned from this theme.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:autoCompleteTextViewStyle][.AppCompatTheme_autoCompleteTextViewStyle]`</td><td>Default AutoCompleteTextView style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:borderlessButtonStyle][.AppCompatTheme_borderlessButtonStyle]`</td><td>Style for buttons without an explicit border, often used in groups.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:buttonBarButtonStyle][.AppCompatTheme_buttonBarButtonStyle]`</td><td>Style for buttons within button bars</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:buttonBarNegativeButtonStyle][.AppCompatTheme_buttonBarNegativeButtonStyle]`</td><td>Style for the "negative" buttons within button bars</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:buttonBarNeutralButtonStyle][.AppCompatTheme_buttonBarNeutralButtonStyle]`</td><td>Style for the "neutral" buttons within button bars</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:buttonBarPositiveButtonStyle][.AppCompatTheme_buttonBarPositiveButtonStyle]`</td><td>Style for the "positive" buttons within button bars</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:buttonBarStyle][.AppCompatTheme_buttonBarStyle]`</td><td>Style for button bars</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:buttonStyle][.AppCompatTheme_buttonStyle]`</td><td>Normal Button style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:buttonStyleSmall][.AppCompatTheme_buttonStyleSmall]`</td><td>Small Button style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:checkboxStyle][.AppCompatTheme_checkboxStyle]`</td><td>Default Checkbox style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:checkedTextViewStyle][.AppCompatTheme_checkedTextViewStyle]`</td><td>Default CheckedTextView style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:colorAccent][.AppCompatTheme_colorAccent]`</td><td>Bright complement to the primary branding color.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:colorBackgroundFloating][.AppCompatTheme_colorBackgroundFloating]`</td><td>Default color of background imagery for floating components, ex.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:colorButtonNormal][.AppCompatTheme_colorButtonNormal]`</td><td>The color applied to framework buttons in their normal state.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:colorControlActivated][.AppCompatTheme_colorControlActivated]`</td><td>The color applied to framework controls in their activated (ex.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:colorControlHighlight][.AppCompatTheme_colorControlHighlight]`</td><td>The color applied to framework control highlights (ex.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:colorControlNormal][.AppCompatTheme_colorControlNormal]`</td><td>The color applied to framework controls in their normal state.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:colorError][.AppCompatTheme_colorError]`</td><td>Color used for error states and things that need to be drawn to
 * the user's attention.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:colorPrimary][.AppCompatTheme_colorPrimary]`</td><td>The primary branding color for the app.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:colorPrimaryDark][.AppCompatTheme_colorPrimaryDark]`</td><td>Dark variant of the primary branding color.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:colorSwitchThumbNormal][.AppCompatTheme_colorSwitchThumbNormal]`</td><td>The color applied to framework switch thumbs in their normal state.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:controlBackground][.AppCompatTheme_controlBackground]`</td><td>The background used by framework controls.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:dialogCornerRadius][.AppCompatTheme_dialogCornerRadius]`</td><td>Preferred corner radius of dialogs.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:dialogPreferredPadding][.AppCompatTheme_dialogPreferredPadding]`</td><td>Preferred padding for dialog content.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:dialogTheme][.AppCompatTheme_dialogTheme]`</td><td>Theme to use for dialogs spawned from this theme.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:dividerHorizontal][.AppCompatTheme_dividerHorizontal]`</td><td>A drawable that may be used as a horizontal divider between visual elements.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:dividerVertical][.AppCompatTheme_dividerVertical]`</td><td>A drawable that may be used as a vertical divider between visual elements.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:dropDownListViewStyle][.AppCompatTheme_dropDownListViewStyle]`</td><td>ListPopupWindow compatibility</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:dropdownListPreferredItemHeight][.AppCompatTheme_dropdownListPreferredItemHeight]`</td><td>The preferred item height for dropdown lists.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:editTextBackground][.AppCompatTheme_editTextBackground]`</td><td>EditText background drawable.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:editTextColor][.AppCompatTheme_editTextColor]`</td><td>EditText text foreground color.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:editTextStyle][.AppCompatTheme_editTextStyle]`</td><td>Default EditText style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:homeAsUpIndicator][.AppCompatTheme_homeAsUpIndicator]`</td><td>Specifies a drawable to use for the 'home as up' indicator.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:imageButtonStyle][.AppCompatTheme_imageButtonStyle]`</td><td>ImageButton background drawable.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listChoiceBackgroundIndicator][.AppCompatTheme_listChoiceBackgroundIndicator]`</td><td>Drawable used as a background for selected list items.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listChoiceIndicatorMultipleAnimated][.AppCompatTheme_listChoiceIndicatorMultipleAnimated]`</td><td>Animated Drawable to use for single choice indicators.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listChoiceIndicatorSingleAnimated][.AppCompatTheme_listChoiceIndicatorSingleAnimated]`</td><td>Animated Drawable to use for multiple choice indicators.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listDividerAlertDialog][.AppCompatTheme_listDividerAlertDialog]`</td><td>The list divider used in alert dialogs.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listMenuViewStyle][.AppCompatTheme_listMenuViewStyle]`</td><td>Default menu-style ListView style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listPopupWindowStyle][.AppCompatTheme_listPopupWindowStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listPreferredItemHeight][.AppCompatTheme_listPreferredItemHeight]`</td><td>The preferred list item height.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listPreferredItemHeightLarge][.AppCompatTheme_listPreferredItemHeightLarge]`</td><td>A larger, more robust list item height.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listPreferredItemHeightSmall][.AppCompatTheme_listPreferredItemHeightSmall]`</td><td>A smaller, sleeker list item height.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listPreferredItemPaddingEnd][.AppCompatTheme_listPreferredItemPaddingEnd]`</td><td>The preferred padding along the end edge of list items.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listPreferredItemPaddingLeft][.AppCompatTheme_listPreferredItemPaddingLeft]`</td><td>The preferred padding along the left edge of list items.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listPreferredItemPaddingRight][.AppCompatTheme_listPreferredItemPaddingRight]`</td><td>The preferred padding along the right edge of list items.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:listPreferredItemPaddingStart][.AppCompatTheme_listPreferredItemPaddingStart]`</td><td>The preferred padding along the start edge of list items.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:panelBackground][.AppCompatTheme_panelBackground]`</td><td>The background of a panel when it is inset from the left and right edges of the screen.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:panelMenuListTheme][.AppCompatTheme_panelMenuListTheme]`</td><td>Default Panel Menu style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:panelMenuListWidth][.AppCompatTheme_panelMenuListWidth]`</td><td>Default Panel Menu width.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:popupMenuStyle][.AppCompatTheme_popupMenuStyle]`</td><td>Default PopupMenu style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:popupWindowStyle][.AppCompatTheme_popupWindowStyle]`</td><td>Default PopupWindow style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:radioButtonStyle][.AppCompatTheme_radioButtonStyle]`</td><td>Default RadioButton style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:ratingBarStyle][.AppCompatTheme_ratingBarStyle]`</td><td>Default RatingBar style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:ratingBarStyleIndicator][.AppCompatTheme_ratingBarStyleIndicator]`</td><td>Indicator RatingBar style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:ratingBarStyleSmall][.AppCompatTheme_ratingBarStyleSmall]`</td><td>Small indicator RatingBar style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:searchViewStyle][.AppCompatTheme_searchViewStyle]`</td><td>Style for the search query widget.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:seekBarStyle][.AppCompatTheme_seekBarStyle]`</td><td>Default SeekBar style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:selectableItemBackground][.AppCompatTheme_selectableItemBackground]`</td><td>A style that may be applied to buttons or other selectable items
 * that should react to pressed and focus states, but that do not
 * have a clear visual border along the edges.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:selectableItemBackgroundBorderless][.AppCompatTheme_selectableItemBackgroundBorderless]`</td><td>Background drawable for borderless standalone items that need focus/pressed states.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:spinnerDropDownItemStyle][.AppCompatTheme_spinnerDropDownItemStyle]`</td><td>Default Spinner style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:spinnerStyle][.AppCompatTheme_spinnerStyle]`</td><td>Default Spinner style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:switchStyle][.AppCompatTheme_switchStyle]`</td><td>Default style for the Switch widget.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:textAppearanceLargePopupMenu][.AppCompatTheme_textAppearanceLargePopupMenu]`</td><td>Text color, typeface, size, and style for the text inside of a popup menu.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:textAppearanceListItem][.AppCompatTheme_textAppearanceListItem]`</td><td>The preferred TextAppearance for the primary text of list items.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:textAppearanceListItemSecondary][.AppCompatTheme_textAppearanceListItemSecondary]`</td><td>The preferred TextAppearance for the secondary text of list items.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:textAppearanceListItemSmall][.AppCompatTheme_textAppearanceListItemSmall]`</td><td>The preferred TextAppearance for the primary text of small list items.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:textAppearancePopupMenuHeader][.AppCompatTheme_textAppearancePopupMenuHeader]`</td><td>Text color, typeface, size, and style for header text inside of a popup menu.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:textAppearanceSearchResultSubtitle][.AppCompatTheme_textAppearanceSearchResultSubtitle]`</td><td>Text color, typeface, size, and style for system search result subtitle.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:textAppearanceSearchResultTitle][.AppCompatTheme_textAppearanceSearchResultTitle]`</td><td>Text color, typeface, size, and style for system search result title.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:textAppearanceSmallPopupMenu][.AppCompatTheme_textAppearanceSmallPopupMenu]`</td><td>Text color, typeface, size, and style for small text inside of a popup menu.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:textColorAlertDialogListItem][.AppCompatTheme_textColorAlertDialogListItem]`</td><td>Color of list item text in alert dialogs.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:textColorSearchUrl][.AppCompatTheme_textColorSearchUrl]`</td><td>Text color for urls in search suggestions, used by things like global search</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:toolbarNavigationButtonStyle][.AppCompatTheme_toolbarNavigationButtonStyle]`</td><td>Default Toolar NavigationButtonStyle</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:toolbarStyle][.AppCompatTheme_toolbarStyle]`</td><td>Default Toolbar style.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:tooltipForegroundColor][.AppCompatTheme_tooltipForegroundColor]`</td><td>Foreground color to use for tooltips</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:tooltipFrameBackground][.AppCompatTheme_tooltipFrameBackground]`</td><td>Background to use for tooltips</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:viewInflaterClass][.AppCompatTheme_viewInflaterClass]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:windowActionBar][.AppCompatTheme_windowActionBar]`</td><td>Flag indicating whether this window should have an Action Bar
 * in place of the usual title bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:windowActionBarOverlay][.AppCompatTheme_windowActionBarOverlay]`</td><td>Flag indicating whether this window's Action Bar should overlay
 * application content.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:windowActionModeOverlay][.AppCompatTheme_windowActionModeOverlay]`</td><td>Flag indicating whether action modes should overlay window content
 * when there is not reserved space for their UI (such as an Action Bar).</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:windowFixedHeightMajor][.AppCompatTheme_windowFixedHeightMajor]`</td><td>A fixed height for the window along the major axis of the screen,
 * that is, when in portrait.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:windowFixedHeightMinor][.AppCompatTheme_windowFixedHeightMinor]`</td><td>A fixed height for the window along the minor axis of the screen,
 * that is, when in landscape.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:windowFixedWidthMajor][.AppCompatTheme_windowFixedWidthMajor]`</td><td>A fixed width for the window along the major axis of the screen,
 * that is, when in landscape.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:windowFixedWidthMinor][.AppCompatTheme_windowFixedWidthMinor]`</td><td>A fixed width for the window along the minor axis of the screen,
 * that is, when in portrait.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:windowMinWidthMajor][.AppCompatTheme_windowMinWidthMajor]`</td><td>The minimum width the window is allowed to be, along the major
 * axis of the screen.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:windowMinWidthMinor][.AppCompatTheme_windowMinWidthMinor]`</td><td>The minimum width the window is allowed to be, along the minor
 * axis of the screen.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:windowNoTitle][.AppCompatTheme_windowNoTitle]`</td><td>Flag indicating whether there should be no title on this window.</td></tr>
</table> *
 * @see .AppCompatTheme_android_windowIsFloating
 *
 * @see .AppCompatTheme_android_windowAnimationStyle
 *
 * @see .AppCompatTheme_actionBarDivider
 *
 * @see .AppCompatTheme_actionBarItemBackground
 *
 * @see .AppCompatTheme_actionBarPopupTheme
 *
 * @see .AppCompatTheme_actionBarSize
 *
 * @see .AppCompatTheme_actionBarSplitStyle
 *
 * @see .AppCompatTheme_actionBarStyle
 *
 * @see .AppCompatTheme_actionBarTabBarStyle
 *
 * @see .AppCompatTheme_actionBarTabStyle
 *
 * @see .AppCompatTheme_actionBarTabTextStyle
 *
 * @see .AppCompatTheme_actionBarTheme
 *
 * @see .AppCompatTheme_actionBarWidgetTheme
 *
 * @see .AppCompatTheme_actionButtonStyle
 *
 * @see .AppCompatTheme_actionDropDownStyle
 *
 * @see .AppCompatTheme_actionMenuTextAppearance
 *
 * @see .AppCompatTheme_actionMenuTextColor
 *
 * @see .AppCompatTheme_actionModeBackground
 *
 * @see .AppCompatTheme_actionModeCloseButtonStyle
 *
 * @see .AppCompatTheme_actionModeCloseDrawable
 *
 * @see .AppCompatTheme_actionModeCopyDrawable
 *
 * @see .AppCompatTheme_actionModeCutDrawable
 *
 * @see .AppCompatTheme_actionModeFindDrawable
 *
 * @see .AppCompatTheme_actionModePasteDrawable
 *
 * @see .AppCompatTheme_actionModePopupWindowStyle
 *
 * @see .AppCompatTheme_actionModeSelectAllDrawable
 *
 * @see .AppCompatTheme_actionModeShareDrawable
 *
 * @see .AppCompatTheme_actionModeSplitBackground
 *
 * @see .AppCompatTheme_actionModeStyle
 *
 * @see .AppCompatTheme_actionModeWebSearchDrawable
 *
 * @see .AppCompatTheme_actionOverflowButtonStyle
 *
 * @see .AppCompatTheme_actionOverflowMenuStyle
 *
 * @see .AppCompatTheme_activityChooserViewStyle
 *
 * @see .AppCompatTheme_alertDialogButtonGroupStyle
 *
 * @see .AppCompatTheme_alertDialogCenterButtons
 *
 * @see .AppCompatTheme_alertDialogStyle
 *
 * @see .AppCompatTheme_alertDialogTheme
 *
 * @see .AppCompatTheme_autoCompleteTextViewStyle
 *
 * @see .AppCompatTheme_borderlessButtonStyle
 *
 * @see .AppCompatTheme_buttonBarButtonStyle
 *
 * @see .AppCompatTheme_buttonBarNegativeButtonStyle
 *
 * @see .AppCompatTheme_buttonBarNeutralButtonStyle
 *
 * @see .AppCompatTheme_buttonBarPositiveButtonStyle
 *
 * @see .AppCompatTheme_buttonBarStyle
 *
 * @see .AppCompatTheme_buttonStyle
 *
 * @see .AppCompatTheme_buttonStyleSmall
 *
 * @see .AppCompatTheme_checkboxStyle
 *
 * @see .AppCompatTheme_checkedTextViewStyle
 *
 * @see .AppCompatTheme_colorAccent
 *
 * @see .AppCompatTheme_colorBackgroundFloating
 *
 * @see .AppCompatTheme_colorButtonNormal
 *
 * @see .AppCompatTheme_colorControlActivated
 *
 * @see .AppCompatTheme_colorControlHighlight
 *
 * @see .AppCompatTheme_colorControlNormal
 *
 * @see .AppCompatTheme_colorError
 *
 * @see .AppCompatTheme_colorPrimary
 *
 * @see .AppCompatTheme_colorPrimaryDark
 *
 * @see .AppCompatTheme_colorSwitchThumbNormal
 *
 * @see .AppCompatTheme_controlBackground
 *
 * @see .AppCompatTheme_dialogCornerRadius
 *
 * @see .AppCompatTheme_dialogPreferredPadding
 *
 * @see .AppCompatTheme_dialogTheme
 *
 * @see .AppCompatTheme_dividerHorizontal
 *
 * @see .AppCompatTheme_dividerVertical
 *
 * @see .AppCompatTheme_dropDownListViewStyle
 *
 * @see .AppCompatTheme_dropdownListPreferredItemHeight
 *
 * @see .AppCompatTheme_editTextBackground
 *
 * @see .AppCompatTheme_editTextColor
 *
 * @see .AppCompatTheme_editTextStyle
 *
 * @see .AppCompatTheme_homeAsUpIndicator
 *
 * @see .AppCompatTheme_imageButtonStyle
 *
 * @see .AppCompatTheme_listChoiceBackgroundIndicator
 *
 * @see .AppCompatTheme_listChoiceIndicatorMultipleAnimated
 *
 * @see .AppCompatTheme_listChoiceIndicatorSingleAnimated
 *
 * @see .AppCompatTheme_listDividerAlertDialog
 *
 * @see .AppCompatTheme_listMenuViewStyle
 *
 * @see .AppCompatTheme_listPopupWindowStyle
 *
 * @see .AppCompatTheme_listPreferredItemHeight
 *
 * @see .AppCompatTheme_listPreferredItemHeightLarge
 *
 * @see .AppCompatTheme_listPreferredItemHeightSmall
 *
 * @see .AppCompatTheme_listPreferredItemPaddingEnd
 *
 * @see .AppCompatTheme_listPreferredItemPaddingLeft
 *
 * @see .AppCompatTheme_listPreferredItemPaddingRight
 *
 * @see .AppCompatTheme_listPreferredItemPaddingStart
 *
 * @see .AppCompatTheme_panelBackground
 *
 * @see .AppCompatTheme_panelMenuListTheme
 *
 * @see .AppCompatTheme_panelMenuListWidth
 *
 * @see .AppCompatTheme_popupMenuStyle
 *
 * @see .AppCompatTheme_popupWindowStyle
 *
 * @see .AppCompatTheme_radioButtonStyle
 *
 * @see .AppCompatTheme_ratingBarStyle
 *
 * @see .AppCompatTheme_ratingBarStyleIndicator
 *
 * @see .AppCompatTheme_ratingBarStyleSmall
 *
 * @see .AppCompatTheme_searchViewStyle
 *
 * @see .AppCompatTheme_seekBarStyle
 *
 * @see .AppCompatTheme_selectableItemBackground
 *
 * @see .AppCompatTheme_selectableItemBackgroundBorderless
 *
 * @see .AppCompatTheme_spinnerDropDownItemStyle
 *
 * @see .AppCompatTheme_spinnerStyle
 *
 * @see .AppCompatTheme_switchStyle
 *
 * @see .AppCompatTheme_textAppearanceLargePopupMenu
 *
 * @see .AppCompatTheme_textAppearanceListItem
 *
 * @see .AppCompatTheme_textAppearanceListItemSecondary
 *
 * @see .AppCompatTheme_textAppearanceListItemSmall
 *
 * @see .AppCompatTheme_textAppearancePopupMenuHeader
 *
 * @see .AppCompatTheme_textAppearanceSearchResultSubtitle
 *
 * @see .AppCompatTheme_textAppearanceSearchResultTitle
 *
 * @see .AppCompatTheme_textAppearanceSmallPopupMenu
 *
 * @see .AppCompatTheme_textColorAlertDialogListItem
 *
 * @see .AppCompatTheme_textColorSearchUrl
 *
 * @see .AppCompatTheme_toolbarNavigationButtonStyle
 *
 * @see .AppCompatTheme_toolbarStyle
 *
 * @see .AppCompatTheme_tooltipForegroundColor
 *
 * @see .AppCompatTheme_tooltipFrameBackground
 *
 * @see .AppCompatTheme_viewInflaterClass
 *
 * @see .AppCompatTheme_windowActionBar
 *
 * @see .AppCompatTheme_windowActionBarOverlay
 *
 * @see .AppCompatTheme_windowActionModeOverlay
 *
 * @see .AppCompatTheme_windowFixedHeightMajor
 *
 * @see .AppCompatTheme_windowFixedHeightMinor
 *
 * @see .AppCompatTheme_windowFixedWidthMajor
 *
 * @see .AppCompatTheme_windowFixedWidthMinor
 *
 * @see .AppCompatTheme_windowMinWidthMajor
 *
 * @see .AppCompatTheme_windowMinWidthMinor
 *
 * @see .AppCompatTheme_windowNoTitle
 */
     val AppCompatTheme = intArrayOf(0x01010057, 0x010100ae, 0x7f020000, 0x7f020001, 0x7f020002, 0x7f020003, 0x7f020004, 0x7f020005, 0x7f020006, 0x7f020007, 0x7f020008, 0x7f020009, 0x7f02000a, 0x7f02000b, 0x7f02000c, 0x7f02000e, 0x7f02000f, 0x7f020010, 0x7f020011, 0x7f020012, 0x7f020013, 0x7f020014, 0x7f020015, 0x7f020016, 0x7f020017, 0x7f020018, 0x7f020019, 0x7f02001a, 0x7f02001b, 0x7f02001c, 0x7f02001d, 0x7f02001e, 0x7f020021, 0x7f020022, 0x7f020023, 0x7f020024, 0x7f020025, 0x7f02002b, 0x7f020039, 0x7f02003a, 0x7f02003b, 0x7f02003c, 0x7f02003d, 0x7f02003e, 0x7f020043, 0x7f020044, 0x7f020048, 0x7f020049, 0x7f02004f, 0x7f020050, 0x7f020051, 0x7f020052, 0x7f020053, 0x7f020054, 0x7f020055, 0x7f020056, 0x7f020057, 0x7f020058, 0x7f020064, 0x7f020067, 0x7f020068, 0x7f020069, 0x7f02006c, 0x7f02006e, 0x7f020079, 0x7f02007a, 0x7f02007b, 0x7f02007c, 0x7f02007d, 0x7f020091, 0x7f020097, 0x7f0200d1, 0x7f0200d2, 0x7f0200d3, 0x7f0200d4, 0x7f0200d7, 0x7f0200d8, 0x7f0200d9, 0x7f0200da, 0x7f0200db, 0x7f0200dc, 0x7f0200dd, 0x7f0200de, 0x7f0200df, 0x7f0200ef, 0x7f0200f0, 0x7f0200f1, 0x7f0200f2, 0x7f0200f4, 0x7f0200fa, 0x7f0200fb, 0x7f0200fc, 0x7f0200fd, 0x7f020100, 0x7f020101, 0x7f020102, 0x7f020103, 0x7f02010a, 0x7f02010b, 0x7f020118, 0x7f02011b, 0x7f02011c, 0x7f02011d, 0x7f02011e, 0x7f02011f, 0x7f020120, 0x7f020121, 0x7f020122, 0x7f020123, 0x7f020124, 0x7f02013a, 0x7f02013b, 0x7f02013c, 0x7f02013d, 0x7f020143, 0x7f020145, 0x7f020146, 0x7f020147, 0x7f020148, 0x7f020149, 0x7f02014a, 0x7f02014b, 0x7f02014c, 0x7f02014d, 0x7f02014e)
/**
 *
 * This symbol is the offset where the [android.R.attr.windowIsFloating]
 * attribute's value can be found in the [.AppCompatTheme] array.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:windowIsFloating
 */
     val AppCompatTheme_android_windowIsFloating = 0
/**
 *
 * This symbol is the offset where the [android.R.attr.windowAnimationStyle]
 * attribute's value can be found in the [.AppCompatTheme] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:windowAnimationStyle
 */
     val AppCompatTheme_android_windowAnimationStyle = 1
/**
 *
 *
 * @attr description
 * Custom divider drawable to use for elements in the action bar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionBarDivider
 */
     val AppCompatTheme_actionBarDivider = 2
/**
 *
 *
 * @attr description
 * Custom item state list drawable background for action bar items.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionBarItemBackground
 */
     val AppCompatTheme_actionBarItemBackground = 3
/**
 *
 *
 * @attr description
 * Reference to a theme that should be used to inflate popups
 * shown by widgets in the action bar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionBarPopupTheme
 */
     val AppCompatTheme_actionBarPopupTheme = 4
/**
 *
 *
 * @attr description
 * Size of the Action Bar, including the contextual
 * bar used to present Action Modes.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap_content</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:actionBarSize
 */
     val AppCompatTheme_actionBarSize = 5
/**
 *
 *
 * @attr description
 * Reference to a style for the split Action Bar. This style
 * controls the split component that holds the menu/action
 * buttons. actionBarStyle is still used for the primary
 * bar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionBarSplitStyle
 */
     val AppCompatTheme_actionBarSplitStyle = 6
/**
 *
 *
 * @attr description
 * Reference to a style for the Action Bar
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionBarStyle
 */
     val AppCompatTheme_actionBarStyle = 7
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.actionBarTabBarStyle]
 * attribute's value can be found in the [.AppCompatTheme] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionBarTabBarStyle
 */
     val AppCompatTheme_actionBarTabBarStyle = 8
/**
 *
 *
 * @attr description
 * Default style for tabs within an action bar
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionBarTabStyle
 */
     val AppCompatTheme_actionBarTabStyle = 9
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.actionBarTabTextStyle]
 * attribute's value can be found in the [.AppCompatTheme] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionBarTabTextStyle
 */
     val AppCompatTheme_actionBarTabTextStyle = 10
/**
 *
 *
 * @attr description
 * Reference to a theme that should be used to inflate the
 * action bar. This will be inherited by any widget inflated
 * into the action bar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionBarTheme
 */
     val AppCompatTheme_actionBarTheme = 11
/**
 *
 *
 * @attr description
 * Reference to a theme that should be used to inflate widgets
 * and layouts destined for the action bar. Most of the time
 * this will be a reference to the current theme, but when
 * the action bar has a significantly different contrast
 * profile than the rest of the activity the difference
 * can become important. If this is set to @null the current
 * theme will be used.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionBarWidgetTheme
 */
     val AppCompatTheme_actionBarWidgetTheme = 12
/**
 *
 *
 * @attr description
 * Default action button style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionButtonStyle
 */
     val AppCompatTheme_actionButtonStyle = 13
/**
 *
 *
 * @attr description
 * Default ActionBar dropdown style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionDropDownStyle
 */
     val AppCompatTheme_actionDropDownStyle = 14
/**
 *
 *
 * @attr description
 * TextAppearance style that will be applied to text that
 * appears within action menu items.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionMenuTextAppearance
 */
     val AppCompatTheme_actionMenuTextAppearance = 15
/**
 *
 *
 * @attr description
 * Color for text that appears within action menu items.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:actionMenuTextColor
 */
     val AppCompatTheme_actionMenuTextColor = 16
/**
 *
 *
 * @attr description
 * Background drawable to use for action mode UI
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionModeBackground
 */
     val AppCompatTheme_actionModeBackground = 17
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.actionModeCloseButtonStyle]
 * attribute's value can be found in the [.AppCompatTheme] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionModeCloseButtonStyle
 */
     val AppCompatTheme_actionModeCloseButtonStyle = 18
/**
 *
 *
 * @attr description
 * Drawable to use for the close action mode button
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionModeCloseDrawable
 */
     val AppCompatTheme_actionModeCloseDrawable = 19
/**
 *
 *
 * @attr description
 * Drawable to use for the Copy action button in Contextual Action Bar
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionModeCopyDrawable
 */
     val AppCompatTheme_actionModeCopyDrawable = 20
/**
 *
 *
 * @attr description
 * Drawable to use for the Cut action button in Contextual Action Bar
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionModeCutDrawable
 */
     val AppCompatTheme_actionModeCutDrawable = 21
/**
 *
 *
 * @attr description
 * Drawable to use for the Find action button in WebView selection action modes
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionModeFindDrawable
 */
     val AppCompatTheme_actionModeFindDrawable = 22
/**
 *
 *
 * @attr description
 * Drawable to use for the Paste action button in Contextual Action Bar
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionModePasteDrawable
 */
     val AppCompatTheme_actionModePasteDrawable = 23
/**
 *
 *
 * @attr description
 * PopupWindow style to use for action modes when showing as a window overlay.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionModePopupWindowStyle
 */
     val AppCompatTheme_actionModePopupWindowStyle = 24
/**
 *
 *
 * @attr description
 * Drawable to use for the Select all action button in Contextual Action Bar
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionModeSelectAllDrawable
 */
     val AppCompatTheme_actionModeSelectAllDrawable = 25
/**
 *
 *
 * @attr description
 * Drawable to use for the Share action button in WebView selection action modes
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionModeShareDrawable
 */
     val AppCompatTheme_actionModeShareDrawable = 26
/**
 *
 *
 * @attr description
 * Background drawable to use for action mode UI in the lower split bar
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionModeSplitBackground
 */
     val AppCompatTheme_actionModeSplitBackground = 27
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.actionModeStyle]
 * attribute's value can be found in the [.AppCompatTheme] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionModeStyle
 */
     val AppCompatTheme_actionModeStyle = 28
/**
 *
 *
 * @attr description
 * Drawable to use for the Web Search action button in WebView selection action modes
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionModeWebSearchDrawable
 */
     val AppCompatTheme_actionModeWebSearchDrawable = 29
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.actionOverflowButtonStyle]
 * attribute's value can be found in the [.AppCompatTheme] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionOverflowButtonStyle
 */
     val AppCompatTheme_actionOverflowButtonStyle = 30
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.actionOverflowMenuStyle]
 * attribute's value can be found in the [.AppCompatTheme] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionOverflowMenuStyle
 */
     val AppCompatTheme_actionOverflowMenuStyle = 31
/**
 *
 *
 * @attr description
 * Default ActivityChooserView style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:activityChooserViewStyle
 */
     val AppCompatTheme_activityChooserViewStyle = 32
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.alertDialogButtonGroupStyle]
 * attribute's value can be found in the [.AppCompatTheme] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:alertDialogButtonGroupStyle
 */
     val AppCompatTheme_alertDialogButtonGroupStyle = 33
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.alertDialogCenterButtons]
 * attribute's value can be found in the [.AppCompatTheme] array.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:alertDialogCenterButtons
 */
     val AppCompatTheme_alertDialogCenterButtons = 34
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.alertDialogStyle]
 * attribute's value can be found in the [.AppCompatTheme] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:alertDialogStyle
 */
     val AppCompatTheme_alertDialogStyle = 35
/**
 *
 *
 * @attr description
 * Theme to use for alert dialogs spawned from this theme.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:alertDialogTheme
 */
     val AppCompatTheme_alertDialogTheme = 36
/**
 *
 *
 * @attr description
 * Default AutoCompleteTextView style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:autoCompleteTextViewStyle
 */
     val AppCompatTheme_autoCompleteTextViewStyle = 37
/**
 *
 *
 * @attr description
 * Style for buttons without an explicit border, often used in groups.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:borderlessButtonStyle
 */
     val AppCompatTheme_borderlessButtonStyle = 38
/**
 *
 *
 * @attr description
 * Style for buttons within button bars
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:buttonBarButtonStyle
 */
     val AppCompatTheme_buttonBarButtonStyle = 39
/**
 *
 *
 * @attr description
 * Style for the "negative" buttons within button bars
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:buttonBarNegativeButtonStyle
 */
     val AppCompatTheme_buttonBarNegativeButtonStyle = 40
/**
 *
 *
 * @attr description
 * Style for the "neutral" buttons within button bars
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:buttonBarNeutralButtonStyle
 */
     val AppCompatTheme_buttonBarNeutralButtonStyle = 41
/**
 *
 *
 * @attr description
 * Style for the "positive" buttons within button bars
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:buttonBarPositiveButtonStyle
 */
     val AppCompatTheme_buttonBarPositiveButtonStyle = 42
/**
 *
 *
 * @attr description
 * Style for button bars
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:buttonBarStyle
 */
     val AppCompatTheme_buttonBarStyle = 43
/**
 *
 *
 * @attr description
 * Normal Button style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:buttonStyle
 */
     val AppCompatTheme_buttonStyle = 44
/**
 *
 *
 * @attr description
 * Small Button style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:buttonStyleSmall
 */
     val AppCompatTheme_buttonStyleSmall = 45
/**
 *
 *
 * @attr description
 * Default Checkbox style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:checkboxStyle
 */
     val AppCompatTheme_checkboxStyle = 46
/**
 *
 *
 * @attr description
 * Default CheckedTextView style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:checkedTextViewStyle
 */
     val AppCompatTheme_checkedTextViewStyle = 47
/**
 *
 *
 * @attr description
 * Bright complement to the primary branding color. By default, this is the color applied
 * to framework controls (via colorControlActivated).
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:colorAccent
 */
     val AppCompatTheme_colorAccent = 48
/**
 *
 *
 * @attr description
 * Default color of background imagery for floating components, ex. dialogs, popups, and cards.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:colorBackgroundFloating
 */
     val AppCompatTheme_colorBackgroundFloating = 49
/**
 *
 *
 * @attr description
 * The color applied to framework buttons in their normal state.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:colorButtonNormal
 */
     val AppCompatTheme_colorButtonNormal = 50
/**
 *
 *
 * @attr description
 * The color applied to framework controls in their activated (ex. checked) state.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:colorControlActivated
 */
     val AppCompatTheme_colorControlActivated = 51
/**
 *
 *
 * @attr description
 * The color applied to framework control highlights (ex. ripples, list selectors).
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:colorControlHighlight
 */
     val AppCompatTheme_colorControlHighlight = 52
/**
 *
 *
 * @attr description
 * The color applied to framework controls in their normal state.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:colorControlNormal
 */
     val AppCompatTheme_colorControlNormal = 53
/**
 *
 *
 * @attr description
 * Color used for error states and things that need to be drawn to
 * the user's attention.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:colorError
 */
     val AppCompatTheme_colorError = 54
/**
 *
 *
 * @attr description
 * The primary branding color for the app. By default, this is the color applied to the
 * action bar background.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:colorPrimary
 */
     val AppCompatTheme_colorPrimary = 55
/**
 *
 *
 * @attr description
 * Dark variant of the primary branding color. By default, this is the color applied to
 * the status bar (via statusBarColor) and navigation bar (via navigationBarColor).
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:colorPrimaryDark
 */
     val AppCompatTheme_colorPrimaryDark = 56
/**
 *
 *
 * @attr description
 * The color applied to framework switch thumbs in their normal state.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:colorSwitchThumbNormal
 */
     val AppCompatTheme_colorSwitchThumbNormal = 57
/**
 *
 *
 * @attr description
 * The background used by framework controls.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:controlBackground
 */
     val AppCompatTheme_controlBackground = 58
/**
 *
 *
 * @attr description
 * Preferred corner radius of dialogs.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:dialogCornerRadius
 */
     val AppCompatTheme_dialogCornerRadius = 59
/**
 *
 *
 * @attr description
 * Preferred padding for dialog content.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:dialogPreferredPadding
 */
     val AppCompatTheme_dialogPreferredPadding = 60
/**
 *
 *
 * @attr description
 * Theme to use for dialogs spawned from this theme.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:dialogTheme
 */
     val AppCompatTheme_dialogTheme = 61
/**
 *
 *
 * @attr description
 * A drawable that may be used as a horizontal divider between visual elements.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:dividerHorizontal
 */
     val AppCompatTheme_dividerHorizontal = 62
/**
 *
 *
 * @attr description
 * A drawable that may be used as a vertical divider between visual elements.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:dividerVertical
 */
     val AppCompatTheme_dividerVertical = 63
/**
 *
 *
 * @attr description
 * ListPopupWindow compatibility
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:dropDownListViewStyle
 */
     val AppCompatTheme_dropDownListViewStyle = 64
/**
 *
 *
 * @attr description
 * The preferred item height for dropdown lists.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:dropdownListPreferredItemHeight
 */
     val AppCompatTheme_dropdownListPreferredItemHeight = 65
/**
 *
 *
 * @attr description
 * EditText background drawable.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:editTextBackground
 */
     val AppCompatTheme_editTextBackground = 66
/**
 *
 *
 * @attr description
 * EditText text foreground color.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:editTextColor
 */
     val AppCompatTheme_editTextColor = 67
/**
 *
 *
 * @attr description
 * Default EditText style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:editTextStyle
 */
     val AppCompatTheme_editTextStyle = 68
/**
 *
 *
 * @attr description
 * Specifies a drawable to use for the 'home as up' indicator.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:homeAsUpIndicator
 */
     val AppCompatTheme_homeAsUpIndicator = 69
/**
 *
 *
 * @attr description
 * ImageButton background drawable.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:imageButtonStyle
 */
     val AppCompatTheme_imageButtonStyle = 70
/**
 *
 *
 * @attr description
 * Drawable used as a background for selected list items.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:listChoiceBackgroundIndicator
 */
     val AppCompatTheme_listChoiceBackgroundIndicator = 71
/**
 *
 *
 * @attr description
 * Animated Drawable to use for single choice indicators.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:listChoiceIndicatorMultipleAnimated
 */
     val AppCompatTheme_listChoiceIndicatorMultipleAnimated = 72
/**
 *
 *
 * @attr description
 * Animated Drawable to use for multiple choice indicators.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:listChoiceIndicatorSingleAnimated
 */
     val AppCompatTheme_listChoiceIndicatorSingleAnimated = 73
/**
 *
 *
 * @attr description
 * The list divider used in alert dialogs.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:listDividerAlertDialog
 */
     val AppCompatTheme_listDividerAlertDialog = 74
/**
 *
 *
 * @attr description
 * Default menu-style ListView style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:listMenuViewStyle
 */
     val AppCompatTheme_listMenuViewStyle = 75
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.listPopupWindowStyle]
 * attribute's value can be found in the [.AppCompatTheme] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:listPopupWindowStyle
 */
     val AppCompatTheme_listPopupWindowStyle = 76
/**
 *
 *
 * @attr description
 * The preferred list item height.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:listPreferredItemHeight
 */
     val AppCompatTheme_listPreferredItemHeight = 77
/**
 *
 *
 * @attr description
 * A larger, more robust list item height.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:listPreferredItemHeightLarge
 */
     val AppCompatTheme_listPreferredItemHeightLarge = 78
/**
 *
 *
 * @attr description
 * A smaller, sleeker list item height.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:listPreferredItemHeightSmall
 */
     val AppCompatTheme_listPreferredItemHeightSmall = 79
/**
 *
 *
 * @attr description
 * The preferred padding along the end edge of list items.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:listPreferredItemPaddingEnd
 */
     val AppCompatTheme_listPreferredItemPaddingEnd = 80
/**
 *
 *
 * @attr description
 * The preferred padding along the left edge of list items.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:listPreferredItemPaddingLeft
 */
     val AppCompatTheme_listPreferredItemPaddingLeft = 81
/**
 *
 *
 * @attr description
 * The preferred padding along the right edge of list items.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:listPreferredItemPaddingRight
 */
     val AppCompatTheme_listPreferredItemPaddingRight = 82
/**
 *
 *
 * @attr description
 * The preferred padding along the start edge of list items.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:listPreferredItemPaddingStart
 */
     val AppCompatTheme_listPreferredItemPaddingStart = 83
/**
 *
 *
 * @attr description
 * The background of a panel when it is inset from the left and right edges of the screen.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:panelBackground
 */
     val AppCompatTheme_panelBackground = 84
/**
 *
 *
 * @attr description
 * Default Panel Menu style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:panelMenuListTheme
 */
     val AppCompatTheme_panelMenuListTheme = 85
/**
 *
 *
 * @attr description
 * Default Panel Menu width.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:panelMenuListWidth
 */
     val AppCompatTheme_panelMenuListWidth = 86
/**
 *
 *
 * @attr description
 * Default PopupMenu style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:popupMenuStyle
 */
     val AppCompatTheme_popupMenuStyle = 87
/**
 *
 *
 * @attr description
 * Default PopupWindow style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:popupWindowStyle
 */
     val AppCompatTheme_popupWindowStyle = 88
/**
 *
 *
 * @attr description
 * Default RadioButton style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:radioButtonStyle
 */
     val AppCompatTheme_radioButtonStyle = 89
/**
 *
 *
 * @attr description
 * Default RatingBar style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:ratingBarStyle
 */
     val AppCompatTheme_ratingBarStyle = 90
/**
 *
 *
 * @attr description
 * Indicator RatingBar style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:ratingBarStyleIndicator
 */
     val AppCompatTheme_ratingBarStyleIndicator = 91
/**
 *
 *
 * @attr description
 * Small indicator RatingBar style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:ratingBarStyleSmall
 */
     val AppCompatTheme_ratingBarStyleSmall = 92
/**
 *
 *
 * @attr description
 * Style for the search query widget.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:searchViewStyle
 */
     val AppCompatTheme_searchViewStyle = 93
/**
 *
 *
 * @attr description
 * Default SeekBar style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:seekBarStyle
 */
     val AppCompatTheme_seekBarStyle = 94
/**
 *
 *
 * @attr description
 * A style that may be applied to buttons or other selectable items
 * that should react to pressed and focus states, but that do not
 * have a clear visual border along the edges.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:selectableItemBackground
 */
     val AppCompatTheme_selectableItemBackground = 95
/**
 *
 *
 * @attr description
 * Background drawable for borderless standalone items that need focus/pressed states.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:selectableItemBackgroundBorderless
 */
     val AppCompatTheme_selectableItemBackgroundBorderless = 96
/**
 *
 *
 * @attr description
 * Default Spinner style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:spinnerDropDownItemStyle
 */
     val AppCompatTheme_spinnerDropDownItemStyle = 97
/**
 *
 *
 * @attr description
 * Default Spinner style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:spinnerStyle
 */
     val AppCompatTheme_spinnerStyle = 98
/**
 *
 *
 * @attr description
 * Default style for the Switch widget.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:switchStyle
 */
     val AppCompatTheme_switchStyle = 99
/**
 *
 *
 * @attr description
 * Text color, typeface, size, and style for the text inside of a popup menu.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:textAppearanceLargePopupMenu
 */
     val AppCompatTheme_textAppearanceLargePopupMenu = 100
/**
 *
 *
 * @attr description
 * The preferred TextAppearance for the primary text of list items.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:textAppearanceListItem
 */
     val AppCompatTheme_textAppearanceListItem = 101
/**
 *
 *
 * @attr description
 * The preferred TextAppearance for the secondary text of list items.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:textAppearanceListItemSecondary
 */
     val AppCompatTheme_textAppearanceListItemSecondary = 102
/**
 *
 *
 * @attr description
 * The preferred TextAppearance for the primary text of small list items.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:textAppearanceListItemSmall
 */
     val AppCompatTheme_textAppearanceListItemSmall = 103
/**
 *
 *
 * @attr description
 * Text color, typeface, size, and style for header text inside of a popup menu.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:textAppearancePopupMenuHeader
 */
     val AppCompatTheme_textAppearancePopupMenuHeader = 104
/**
 *
 *
 * @attr description
 * Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:textAppearanceSearchResultSubtitle
 */
     val AppCompatTheme_textAppearanceSearchResultSubtitle = 105
/**
 *
 *
 * @attr description
 * Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:textAppearanceSearchResultTitle
 */
     val AppCompatTheme_textAppearanceSearchResultTitle = 106
/**
 *
 *
 * @attr description
 * Text color, typeface, size, and style for small text inside of a popup menu.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:textAppearanceSmallPopupMenu
 */
     val AppCompatTheme_textAppearanceSmallPopupMenu = 107
/**
 *
 *
 * @attr description
 * Color of list item text in alert dialogs.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:textColorAlertDialogListItem
 */
     val AppCompatTheme_textColorAlertDialogListItem = 108
/**
 *
 *
 * @attr description
 * Text color for urls in search suggestions, used by things like global search
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:textColorSearchUrl
 */
     val AppCompatTheme_textColorSearchUrl = 109
/**
 *
 *
 * @attr description
 * Default Toolar NavigationButtonStyle
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:toolbarNavigationButtonStyle
 */
     val AppCompatTheme_toolbarNavigationButtonStyle = 110
/**
 *
 *
 * @attr description
 * Default Toolbar style.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:toolbarStyle
 */
     val AppCompatTheme_toolbarStyle = 111
/**
 *
 *
 * @attr description
 * Foreground color to use for tooltips
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:tooltipForegroundColor
 */
     val AppCompatTheme_tooltipForegroundColor = 112
/**
 *
 *
 * @attr description
 * Background to use for tooltips
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:tooltipFrameBackground
 */
     val AppCompatTheme_tooltipFrameBackground = 113
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.viewInflaterClass]
 * attribute's value can be found in the [.AppCompatTheme] array.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:viewInflaterClass
 */
     val AppCompatTheme_viewInflaterClass = 114
/**
 *
 *
 * @attr description
 * Flag indicating whether this window should have an Action Bar
 * in place of the usual title bar.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:windowActionBar
 */
     val AppCompatTheme_windowActionBar = 115
/**
 *
 *
 * @attr description
 * Flag indicating whether this window's Action Bar should overlay
 * application content. Does nothing if the window would not
 * have an Action Bar.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:windowActionBarOverlay
 */
     val AppCompatTheme_windowActionBarOverlay = 116
/**
 *
 *
 * @attr description
 * Flag indicating whether action modes should overlay window content
 * when there is not reserved space for their UI (such as an Action Bar).
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:windowActionModeOverlay
 */
     val AppCompatTheme_windowActionModeOverlay = 117
/**
 *
 *
 * @attr description
 * A fixed height for the window along the major axis of the screen,
 * that is, when in portrait. Can be either an absolute dimension
 * or a fraction of the screen size in that dimension.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name com.kartikeyinc.calculator:windowFixedHeightMajor
 */
     val AppCompatTheme_windowFixedHeightMajor = 118
/**
 *
 *
 * @attr description
 * A fixed height for the window along the minor axis of the screen,
 * that is, when in landscape. Can be either an absolute dimension
 * or a fraction of the screen size in that dimension.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name com.kartikeyinc.calculator:windowFixedHeightMinor
 */
     val AppCompatTheme_windowFixedHeightMinor = 119
/**
 *
 *
 * @attr description
 * A fixed width for the window along the major axis of the screen,
 * that is, when in landscape. Can be either an absolute dimension
 * or a fraction of the screen size in that dimension.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name com.kartikeyinc.calculator:windowFixedWidthMajor
 */
     val AppCompatTheme_windowFixedWidthMajor = 120
/**
 *
 *
 * @attr description
 * A fixed width for the window along the minor axis of the screen,
 * that is, when in portrait. Can be either an absolute dimension
 * or a fraction of the screen size in that dimension.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name com.kartikeyinc.calculator:windowFixedWidthMinor
 */
     val AppCompatTheme_windowFixedWidthMinor = 121
/**
 *
 *
 * @attr description
 * The minimum width the window is allowed to be, along the major
 * axis of the screen.  That is, when in landscape.  Can be either
 * an absolute dimension or a fraction of the screen size in that
 * dimension.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name com.kartikeyinc.calculator:windowMinWidthMajor
 */
     val AppCompatTheme_windowMinWidthMajor = 122
/**
 *
 *
 * @attr description
 * The minimum width the window is allowed to be, along the minor
 * axis of the screen.  That is, when in portrait.  Can be either
 * an absolute dimension or a fraction of the screen size in that
 * dimension.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name com.kartikeyinc.calculator:windowMinWidthMinor
 */
     val AppCompatTheme_windowMinWidthMinor = 123
/**
 *
 *
 * @attr description
 * Flag indicating whether there should be no title on this window.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:windowNoTitle
 */
     val AppCompatTheme_windowNoTitle = 124
/**
 * Attributes that can be used with a ButtonBarLayout.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[com.kartikeyinc.calculator:allowStacking][.ButtonBarLayout_allowStacking]`</td><td>Whether to automatically stack the buttons when there is not
 * enough space to lay them out side-by-side.</td></tr>
</table> *
 * @see .ButtonBarLayout_allowStacking
 */
     val ButtonBarLayout = intArrayOf(0x7f020026)
/**
 *
 *
 * @attr description
 * Whether to automatically stack the buttons when there is not
 * enough space to lay them out side-by-side.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:allowStacking
 */
     val ButtonBarLayout_allowStacking = 0
/**
 * Attributes that can be used with a ColorStateListItem.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:color][.ColorStateListItem_android_color]`</td><td></td></tr>
 * <tr><td>`[android:alpha][.ColorStateListItem_android_alpha]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:alpha][.ColorStateListItem_alpha]`</td><td>Alpha multiplier applied to the base color.</td></tr>
</table> *
 * @see .ColorStateListItem_android_color
 *
 * @see .ColorStateListItem_android_alpha
 *
 * @see .ColorStateListItem_alpha
 */
     val ColorStateListItem = intArrayOf(0x010101a5, 0x0101031f, 0x7f020027)
/**
 *
 *
 * @attr description
 * Base color for this state.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:color
 */
     val ColorStateListItem_android_color = 0
/**
 *
 * This symbol is the offset where the [android.R.attr.alpha]
 * attribute's value can be found in the [.ColorStateListItem] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:alpha
 */
     val ColorStateListItem_android_alpha = 1
/**
 *
 *
 * @attr description
 * Alpha multiplier applied to the base color.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:alpha
 */
     val ColorStateListItem_alpha = 2
/**
 * Attributes that can be used with a CompoundButton.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:button][.CompoundButton_android_button]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:buttonCompat][.CompoundButton_buttonCompat]`</td><td>Compat attr to load backported drawable types</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:buttonTint][.CompoundButton_buttonTint]`</td><td>Tint to apply to the button drawable.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:buttonTintMode][.CompoundButton_buttonTintMode]`</td><td>Blending mode used to apply the button tint.</td></tr>
</table> *
 * @see .CompoundButton_android_button
 *
 * @see .CompoundButton_buttonCompat
 *
 * @see .CompoundButton_buttonTint
 *
 * @see .CompoundButton_buttonTintMode
 */
     val CompoundButton = intArrayOf(0x01010107, 0x7f02003f, 0x7f020045, 0x7f020046)
/**
 *
 * This symbol is the offset where the [android.R.attr.button]
 * attribute's value can be found in the [.CompoundButton] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:button
 */
     val CompoundButton_android_button = 0
/**
 *
 *
 * @attr description
 * Compat attr to load backported drawable types
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:buttonCompat
 */
     val CompoundButton_buttonCompat = 1
/**
 *
 *
 * @attr description
 * Tint to apply to the button drawable.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:buttonTint
 */
     val CompoundButton_buttonTint = 2
/**
 *
 *
 * @attr description
 * Blending mode used to apply the button tint.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and icon color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:buttonTintMode
 */
     val CompoundButton_buttonTintMode = 3
/**
 * Attributes that can be used with a ConstraintLayout_Layout.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:orientation][.ConstraintLayout_Layout_android_orientation]`</td><td></td></tr>
 * <tr><td>`[android:maxWidth][.ConstraintLayout_Layout_android_maxWidth]`</td><td></td></tr>
 * <tr><td>`[android:maxHeight][.ConstraintLayout_Layout_android_maxHeight]`</td><td></td></tr>
 * <tr><td>`[android:minWidth][.ConstraintLayout_Layout_android_minWidth]`</td><td></td></tr>
 * <tr><td>`[android:minHeight][.ConstraintLayout_Layout_android_minHeight]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:barrierAllowsGoneWidgets][.ConstraintLayout_Layout_barrierAllowsGoneWidgets]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:barrierDirection][.ConstraintLayout_Layout_barrierDirection]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:chainUseRtl][.ConstraintLayout_Layout_chainUseRtl]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:constraintSet][.ConstraintLayout_Layout_constraintSet]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:constraint_referenced_ids][.ConstraintLayout_Layout_constraint_referenced_ids]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constrainedHeight][.ConstraintLayout_Layout_layout_constrainedHeight]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constrainedWidth][.ConstraintLayout_Layout_layout_constrainedWidth]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintBaseline_creator][.ConstraintLayout_Layout_layout_constraintBaseline_creator]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintBaseline_toBaselineOf][.ConstraintLayout_Layout_layout_constraintBaseline_toBaselineOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintBottom_creator][.ConstraintLayout_Layout_layout_constraintBottom_creator]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintBottom_toBottomOf][.ConstraintLayout_Layout_layout_constraintBottom_toBottomOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintBottom_toTopOf][.ConstraintLayout_Layout_layout_constraintBottom_toTopOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintCircle][.ConstraintLayout_Layout_layout_constraintCircle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintCircleAngle][.ConstraintLayout_Layout_layout_constraintCircleAngle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintCircleRadius][.ConstraintLayout_Layout_layout_constraintCircleRadius]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintDimensionRatio][.ConstraintLayout_Layout_layout_constraintDimensionRatio]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintEnd_toEndOf][.ConstraintLayout_Layout_layout_constraintEnd_toEndOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintEnd_toStartOf][.ConstraintLayout_Layout_layout_constraintEnd_toStartOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintGuide_begin][.ConstraintLayout_Layout_layout_constraintGuide_begin]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintGuide_end][.ConstraintLayout_Layout_layout_constraintGuide_end]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintGuide_percent][.ConstraintLayout_Layout_layout_constraintGuide_percent]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintHeight_default][.ConstraintLayout_Layout_layout_constraintHeight_default]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintHeight_max][.ConstraintLayout_Layout_layout_constraintHeight_max]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintHeight_min][.ConstraintLayout_Layout_layout_constraintHeight_min]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintHeight_percent][.ConstraintLayout_Layout_layout_constraintHeight_percent]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintHorizontal_bias][.ConstraintLayout_Layout_layout_constraintHorizontal_bias]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintHorizontal_chainStyle][.ConstraintLayout_Layout_layout_constraintHorizontal_chainStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintHorizontal_weight][.ConstraintLayout_Layout_layout_constraintHorizontal_weight]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintLeft_creator][.ConstraintLayout_Layout_layout_constraintLeft_creator]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintLeft_toLeftOf][.ConstraintLayout_Layout_layout_constraintLeft_toLeftOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintLeft_toRightOf][.ConstraintLayout_Layout_layout_constraintLeft_toRightOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintRight_creator][.ConstraintLayout_Layout_layout_constraintRight_creator]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintRight_toLeftOf][.ConstraintLayout_Layout_layout_constraintRight_toLeftOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintRight_toRightOf][.ConstraintLayout_Layout_layout_constraintRight_toRightOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintStart_toEndOf][.ConstraintLayout_Layout_layout_constraintStart_toEndOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintStart_toStartOf][.ConstraintLayout_Layout_layout_constraintStart_toStartOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintTop_creator][.ConstraintLayout_Layout_layout_constraintTop_creator]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintTop_toBottomOf][.ConstraintLayout_Layout_layout_constraintTop_toBottomOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintTop_toTopOf][.ConstraintLayout_Layout_layout_constraintTop_toTopOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintVertical_bias][.ConstraintLayout_Layout_layout_constraintVertical_bias]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintVertical_chainStyle][.ConstraintLayout_Layout_layout_constraintVertical_chainStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintVertical_weight][.ConstraintLayout_Layout_layout_constraintVertical_weight]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintWidth_default][.ConstraintLayout_Layout_layout_constraintWidth_default]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintWidth_max][.ConstraintLayout_Layout_layout_constraintWidth_max]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintWidth_min][.ConstraintLayout_Layout_layout_constraintWidth_min]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintWidth_percent][.ConstraintLayout_Layout_layout_constraintWidth_percent]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_editor_absoluteX][.ConstraintLayout_Layout_layout_editor_absoluteX]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_editor_absoluteY][.ConstraintLayout_Layout_layout_editor_absoluteY]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_goneMarginBottom][.ConstraintLayout_Layout_layout_goneMarginBottom]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_goneMarginEnd][.ConstraintLayout_Layout_layout_goneMarginEnd]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_goneMarginLeft][.ConstraintLayout_Layout_layout_goneMarginLeft]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_goneMarginRight][.ConstraintLayout_Layout_layout_goneMarginRight]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_goneMarginStart][.ConstraintLayout_Layout_layout_goneMarginStart]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_goneMarginTop][.ConstraintLayout_Layout_layout_goneMarginTop]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_optimizationLevel][.ConstraintLayout_Layout_layout_optimizationLevel]`</td><td></td></tr>
</table> *
 * @see .ConstraintLayout_Layout_android_orientation
 *
 * @see .ConstraintLayout_Layout_android_maxWidth
 *
 * @see .ConstraintLayout_Layout_android_maxHeight
 *
 * @see .ConstraintLayout_Layout_android_minWidth
 *
 * @see .ConstraintLayout_Layout_android_minHeight
 *
 * @see .ConstraintLayout_Layout_barrierAllowsGoneWidgets
 *
 * @see .ConstraintLayout_Layout_barrierDirection
 *
 * @see .ConstraintLayout_Layout_chainUseRtl
 *
 * @see .ConstraintLayout_Layout_constraintSet
 *
 * @see .ConstraintLayout_Layout_constraint_referenced_ids
 *
 * @see .ConstraintLayout_Layout_layout_constrainedHeight
 *
 * @see .ConstraintLayout_Layout_layout_constrainedWidth
 *
 * @see .ConstraintLayout_Layout_layout_constraintBaseline_creator
 *
 * @see .ConstraintLayout_Layout_layout_constraintBaseline_toBaselineOf
 *
 * @see .ConstraintLayout_Layout_layout_constraintBottom_creator
 *
 * @see .ConstraintLayout_Layout_layout_constraintBottom_toBottomOf
 *
 * @see .ConstraintLayout_Layout_layout_constraintBottom_toTopOf
 *
 * @see .ConstraintLayout_Layout_layout_constraintCircle
 *
 * @see .ConstraintLayout_Layout_layout_constraintCircleAngle
 *
 * @see .ConstraintLayout_Layout_layout_constraintCircleRadius
 *
 * @see .ConstraintLayout_Layout_layout_constraintDimensionRatio
 *
 * @see .ConstraintLayout_Layout_layout_constraintEnd_toEndOf
 *
 * @see .ConstraintLayout_Layout_layout_constraintEnd_toStartOf
 *
 * @see .ConstraintLayout_Layout_layout_constraintGuide_begin
 *
 * @see .ConstraintLayout_Layout_layout_constraintGuide_end
 *
 * @see .ConstraintLayout_Layout_layout_constraintGuide_percent
 *
 * @see .ConstraintLayout_Layout_layout_constraintHeight_default
 *
 * @see .ConstraintLayout_Layout_layout_constraintHeight_max
 *
 * @see .ConstraintLayout_Layout_layout_constraintHeight_min
 *
 * @see .ConstraintLayout_Layout_layout_constraintHeight_percent
 *
 * @see .ConstraintLayout_Layout_layout_constraintHorizontal_bias
 *
 * @see .ConstraintLayout_Layout_layout_constraintHorizontal_chainStyle
 *
 * @see .ConstraintLayout_Layout_layout_constraintHorizontal_weight
 *
 * @see .ConstraintLayout_Layout_layout_constraintLeft_creator
 *
 * @see .ConstraintLayout_Layout_layout_constraintLeft_toLeftOf
 *
 * @see .ConstraintLayout_Layout_layout_constraintLeft_toRightOf
 *
 * @see .ConstraintLayout_Layout_layout_constraintRight_creator
 *
 * @see .ConstraintLayout_Layout_layout_constraintRight_toLeftOf
 *
 * @see .ConstraintLayout_Layout_layout_constraintRight_toRightOf
 *
 * @see .ConstraintLayout_Layout_layout_constraintStart_toEndOf
 *
 * @see .ConstraintLayout_Layout_layout_constraintStart_toStartOf
 *
 * @see .ConstraintLayout_Layout_layout_constraintTop_creator
 *
 * @see .ConstraintLayout_Layout_layout_constraintTop_toBottomOf
 *
 * @see .ConstraintLayout_Layout_layout_constraintTop_toTopOf
 *
 * @see .ConstraintLayout_Layout_layout_constraintVertical_bias
 *
 * @see .ConstraintLayout_Layout_layout_constraintVertical_chainStyle
 *
 * @see .ConstraintLayout_Layout_layout_constraintVertical_weight
 *
 * @see .ConstraintLayout_Layout_layout_constraintWidth_default
 *
 * @see .ConstraintLayout_Layout_layout_constraintWidth_max
 *
 * @see .ConstraintLayout_Layout_layout_constraintWidth_min
 *
 * @see .ConstraintLayout_Layout_layout_constraintWidth_percent
 *
 * @see .ConstraintLayout_Layout_layout_editor_absoluteX
 *
 * @see .ConstraintLayout_Layout_layout_editor_absoluteY
 *
 * @see .ConstraintLayout_Layout_layout_goneMarginBottom
 *
 * @see .ConstraintLayout_Layout_layout_goneMarginEnd
 *
 * @see .ConstraintLayout_Layout_layout_goneMarginLeft
 *
 * @see .ConstraintLayout_Layout_layout_goneMarginRight
 *
 * @see .ConstraintLayout_Layout_layout_goneMarginStart
 *
 * @see .ConstraintLayout_Layout_layout_goneMarginTop
 *
 * @see .ConstraintLayout_Layout_layout_optimizationLevel
 */
     val ConstraintLayout_Layout = intArrayOf(0x010100c4, 0x0101011f, 0x01010120, 0x0101013f, 0x01010140, 0x7f020037, 0x7f020038, 0x7f020047, 0x7f02005a, 0x7f02005b, 0x7f02009e, 0x7f02009f, 0x7f0200a0, 0x7f0200a1, 0x7f0200a2, 0x7f0200a3, 0x7f0200a4, 0x7f0200a5, 0x7f0200a6, 0x7f0200a7, 0x7f0200a8, 0x7f0200a9, 0x7f0200aa, 0x7f0200ab, 0x7f0200ac, 0x7f0200ad, 0x7f0200ae, 0x7f0200af, 0x7f0200b0, 0x7f0200b1, 0x7f0200b2, 0x7f0200b3, 0x7f0200b4, 0x7f0200b5, 0x7f0200b6, 0x7f0200b7, 0x7f0200b8, 0x7f0200b9, 0x7f0200ba, 0x7f0200bb, 0x7f0200bc, 0x7f0200bd, 0x7f0200be, 0x7f0200bf, 0x7f0200c0, 0x7f0200c1, 0x7f0200c2, 0x7f0200c3, 0x7f0200c4, 0x7f0200c5, 0x7f0200c6, 0x7f0200c7, 0x7f0200c8, 0x7f0200c9, 0x7f0200ca, 0x7f0200cb, 0x7f0200cc, 0x7f0200cd, 0x7f0200ce, 0x7f0200cf)
/**
 *
 * This symbol is the offset where the [android.R.attr.orientation]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>0</td><td></td></tr>
 * <tr><td>vertical</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name android:orientation
 */
     val ConstraintLayout_Layout_android_orientation = 0
/**
 *
 * This symbol is the offset where the [android.R.attr.maxWidth]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:maxWidth
 */
     val ConstraintLayout_Layout_android_maxWidth = 1
/**
 *
 * This symbol is the offset where the [android.R.attr.maxHeight]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:maxHeight
 */
     val ConstraintLayout_Layout_android_maxHeight = 2
/**
 *
 * This symbol is the offset where the [android.R.attr.minWidth]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minWidth
 */
     val ConstraintLayout_Layout_android_minWidth = 3
/**
 *
 * This symbol is the offset where the [android.R.attr.minHeight]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minHeight
 */
     val ConstraintLayout_Layout_android_minHeight = 4
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.barrierAllowsGoneWidgets]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:barrierAllowsGoneWidgets
 */
     val ConstraintLayout_Layout_barrierAllowsGoneWidgets = 5
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.barrierDirection]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>3</td><td></td></tr>
 * <tr><td>end</td><td>6</td><td></td></tr>
 * <tr><td>left</td><td>0</td><td></td></tr>
 * <tr><td>right</td><td>1</td><td></td></tr>
 * <tr><td>start</td><td>5</td><td></td></tr>
 * <tr><td>top</td><td>2</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:barrierDirection
 */
     val ConstraintLayout_Layout_barrierDirection = 6
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.chainUseRtl]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:chainUseRtl
 */
     val ConstraintLayout_Layout_chainUseRtl = 7
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.constraintSet]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:constraintSet
 */
     val ConstraintLayout_Layout_constraintSet = 8
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.constraint_referenced_ids]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:constraint_referenced_ids
 */
     val ConstraintLayout_Layout_constraint_referenced_ids = 9
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constrainedHeight]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constrainedHeight
 */
     val ConstraintLayout_Layout_layout_constrainedHeight = 10
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constrainedWidth]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constrainedWidth
 */
     val ConstraintLayout_Layout_layout_constrainedWidth = 11
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintBaseline_creator]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintBaseline_creator
 */
     val ConstraintLayout_Layout_layout_constraintBaseline_creator = 12
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintBaseline_toBaselineOf]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintBaseline_toBaselineOf
 */
     val ConstraintLayout_Layout_layout_constraintBaseline_toBaselineOf = 13
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintBottom_creator]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintBottom_creator
 */
     val ConstraintLayout_Layout_layout_constraintBottom_creator = 14
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintBottom_toBottomOf]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintBottom_toBottomOf
 */
     val ConstraintLayout_Layout_layout_constraintBottom_toBottomOf = 15
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintBottom_toTopOf]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintBottom_toTopOf
 */
     val ConstraintLayout_Layout_layout_constraintBottom_toTopOf = 16
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintCircle]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintCircle
 */
     val ConstraintLayout_Layout_layout_constraintCircle = 17
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintCircleAngle]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintCircleAngle
 */
     val ConstraintLayout_Layout_layout_constraintCircleAngle = 18
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintCircleRadius]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintCircleRadius
 */
     val ConstraintLayout_Layout_layout_constraintCircleRadius = 19
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintDimensionRatio]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintDimensionRatio
 */
     val ConstraintLayout_Layout_layout_constraintDimensionRatio = 20
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintEnd_toEndOf]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintEnd_toEndOf
 */
     val ConstraintLayout_Layout_layout_constraintEnd_toEndOf = 21
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintEnd_toStartOf]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintEnd_toStartOf
 */
     val ConstraintLayout_Layout_layout_constraintEnd_toStartOf = 22
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintGuide_begin]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintGuide_begin
 */
     val ConstraintLayout_Layout_layout_constraintGuide_begin = 23
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintGuide_end]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintGuide_end
 */
     val ConstraintLayout_Layout_layout_constraintGuide_end = 24
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintGuide_percent]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintGuide_percent
 */
     val ConstraintLayout_Layout_layout_constraintGuide_percent = 25
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintHeight_default]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>percent</td><td>2</td><td></td></tr>
 * <tr><td>spread</td><td>0</td><td></td></tr>
 * <tr><td>wrap</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintHeight_default
 */
     val ConstraintLayout_Layout_layout_constraintHeight_default = 26
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintHeight_max]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap</td><td>fffffffe</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintHeight_max
 */
     val ConstraintLayout_Layout_layout_constraintHeight_max = 27
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintHeight_min]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap</td><td>fffffffe</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintHeight_min
 */
     val ConstraintLayout_Layout_layout_constraintHeight_min = 28
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintHeight_percent]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintHeight_percent
 */
     val ConstraintLayout_Layout_layout_constraintHeight_percent = 29
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintHorizontal_bias]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintHorizontal_bias
 */
     val ConstraintLayout_Layout_layout_constraintHorizontal_bias = 30
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintHorizontal_chainStyle]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>packed</td><td>2</td><td></td></tr>
 * <tr><td>spread</td><td>0</td><td></td></tr>
 * <tr><td>spread_inside</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintHorizontal_chainStyle
 */
     val ConstraintLayout_Layout_layout_constraintHorizontal_chainStyle = 31
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintHorizontal_weight]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintHorizontal_weight
 */
     val ConstraintLayout_Layout_layout_constraintHorizontal_weight = 32
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintLeft_creator]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintLeft_creator
 */
     val ConstraintLayout_Layout_layout_constraintLeft_creator = 33
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintLeft_toLeftOf]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintLeft_toLeftOf
 */
     val ConstraintLayout_Layout_layout_constraintLeft_toLeftOf = 34
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintLeft_toRightOf]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintLeft_toRightOf
 */
     val ConstraintLayout_Layout_layout_constraintLeft_toRightOf = 35
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintRight_creator]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintRight_creator
 */
     val ConstraintLayout_Layout_layout_constraintRight_creator = 36
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintRight_toLeftOf]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintRight_toLeftOf
 */
     val ConstraintLayout_Layout_layout_constraintRight_toLeftOf = 37
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintRight_toRightOf]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintRight_toRightOf
 */
     val ConstraintLayout_Layout_layout_constraintRight_toRightOf = 38
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintStart_toEndOf]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintStart_toEndOf
 */
     val ConstraintLayout_Layout_layout_constraintStart_toEndOf = 39
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintStart_toStartOf]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintStart_toStartOf
 */
     val ConstraintLayout_Layout_layout_constraintStart_toStartOf = 40
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintTop_creator]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintTop_creator
 */
     val ConstraintLayout_Layout_layout_constraintTop_creator = 41
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintTop_toBottomOf]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintTop_toBottomOf
 */
     val ConstraintLayout_Layout_layout_constraintTop_toBottomOf = 42
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintTop_toTopOf]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintTop_toTopOf
 */
     val ConstraintLayout_Layout_layout_constraintTop_toTopOf = 43
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintVertical_bias]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintVertical_bias
 */
     val ConstraintLayout_Layout_layout_constraintVertical_bias = 44
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintVertical_chainStyle]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>packed</td><td>2</td><td></td></tr>
 * <tr><td>spread</td><td>0</td><td></td></tr>
 * <tr><td>spread_inside</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintVertical_chainStyle
 */
     val ConstraintLayout_Layout_layout_constraintVertical_chainStyle = 45
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintVertical_weight]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintVertical_weight
 */
     val ConstraintLayout_Layout_layout_constraintVertical_weight = 46
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintWidth_default]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>percent</td><td>2</td><td></td></tr>
 * <tr><td>spread</td><td>0</td><td></td></tr>
 * <tr><td>wrap</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintWidth_default
 */
     val ConstraintLayout_Layout_layout_constraintWidth_default = 47
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintWidth_max]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap</td><td>fffffffe</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintWidth_max
 */
     val ConstraintLayout_Layout_layout_constraintWidth_max = 48
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintWidth_min]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap</td><td>fffffffe</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintWidth_min
 */
     val ConstraintLayout_Layout_layout_constraintWidth_min = 49
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintWidth_percent]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintWidth_percent
 */
     val ConstraintLayout_Layout_layout_constraintWidth_percent = 50
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_editor_absoluteX]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_editor_absoluteX
 */
     val ConstraintLayout_Layout_layout_editor_absoluteX = 51
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_editor_absoluteY]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_editor_absoluteY
 */
     val ConstraintLayout_Layout_layout_editor_absoluteY = 52
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_goneMarginBottom]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_goneMarginBottom
 */
     val ConstraintLayout_Layout_layout_goneMarginBottom = 53
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_goneMarginEnd]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_goneMarginEnd
 */
     val ConstraintLayout_Layout_layout_goneMarginEnd = 54
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_goneMarginLeft]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_goneMarginLeft
 */
     val ConstraintLayout_Layout_layout_goneMarginLeft = 55
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_goneMarginRight]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_goneMarginRight
 */
     val ConstraintLayout_Layout_layout_goneMarginRight = 56
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_goneMarginStart]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_goneMarginStart
 */
     val ConstraintLayout_Layout_layout_goneMarginStart = 57
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_goneMarginTop]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_goneMarginTop
 */
     val ConstraintLayout_Layout_layout_goneMarginTop = 58
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_optimizationLevel]
 * attribute's value can be found in the [.ConstraintLayout_Layout] array.
 *
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>barrier</td><td>2</td><td></td></tr>
 * <tr><td>chains</td><td>4</td><td></td></tr>
 * <tr><td>dimensions</td><td>8</td><td></td></tr>
 * <tr><td>direct</td><td>1</td><td>direct, barriers, chains</td></tr>
 * <tr><td>groups</td><td>20</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>standard</td><td>7</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_optimizationLevel
 */
     val ConstraintLayout_Layout_layout_optimizationLevel = 59
/**
 * Attributes that can be used with a ConstraintLayout_placeholder.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[com.kartikeyinc.calculator:content][.ConstraintLayout_placeholder_content]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:emptyVisibility][.ConstraintLayout_placeholder_emptyVisibility]`</td><td></td></tr>
</table> *
 * @see .ConstraintLayout_placeholder_content
 *
 * @see .ConstraintLayout_placeholder_emptyVisibility
 */
     val ConstraintLayout_placeholder = intArrayOf(0x7f02005c, 0x7f02007f)
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.content]
 * attribute's value can be found in the [.ConstraintLayout_placeholder] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:content
 */
     val ConstraintLayout_placeholder_content = 0
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.emptyVisibility]
 * attribute's value can be found in the [.ConstraintLayout_placeholder] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>gone</td><td>0</td><td></td></tr>
 * <tr><td>invisible</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:emptyVisibility
 */
     val ConstraintLayout_placeholder_emptyVisibility = 1
/**
 * Attributes that can be used with a ConstraintSet.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:orientation][.ConstraintSet_android_orientation]`</td><td></td></tr>
 * <tr><td>`[android:id][.ConstraintSet_android_id]`</td><td></td></tr>
 * <tr><td>`[android:visibility][.ConstraintSet_android_visibility]`</td><td></td></tr>
 * <tr><td>`[android:layout_width][.ConstraintSet_android_layout_width]`</td><td></td></tr>
 * <tr><td>`[android:layout_height][.ConstraintSet_android_layout_height]`</td><td></td></tr>
 * <tr><td>`[android:layout_marginLeft][.ConstraintSet_android_layout_marginLeft]`</td><td></td></tr>
 * <tr><td>`[android:layout_marginTop][.ConstraintSet_android_layout_marginTop]`</td><td></td></tr>
 * <tr><td>`[android:layout_marginRight][.ConstraintSet_android_layout_marginRight]`</td><td></td></tr>
 * <tr><td>`[android:layout_marginBottom][.ConstraintSet_android_layout_marginBottom]`</td><td></td></tr>
 * <tr><td>`[android:maxWidth][.ConstraintSet_android_maxWidth]`</td><td></td></tr>
 * <tr><td>`[android:maxHeight][.ConstraintSet_android_maxHeight]`</td><td></td></tr>
 * <tr><td>`[android:minWidth][.ConstraintSet_android_minWidth]`</td><td></td></tr>
 * <tr><td>`[android:minHeight][.ConstraintSet_android_minHeight]`</td><td></td></tr>
 * <tr><td>`[android:alpha][.ConstraintSet_android_alpha]`</td><td></td></tr>
 * <tr><td>`[android:transformPivotX][.ConstraintSet_android_transformPivotX]`</td><td></td></tr>
 * <tr><td>`[android:transformPivotY][.ConstraintSet_android_transformPivotY]`</td><td></td></tr>
 * <tr><td>`[android:translationX][.ConstraintSet_android_translationX]`</td><td></td></tr>
 * <tr><td>`[android:translationY][.ConstraintSet_android_translationY]`</td><td></td></tr>
 * <tr><td>`[android:scaleX][.ConstraintSet_android_scaleX]`</td><td></td></tr>
 * <tr><td>`[android:scaleY][.ConstraintSet_android_scaleY]`</td><td></td></tr>
 * <tr><td>`[android:rotation][.ConstraintSet_android_rotation]`</td><td></td></tr>
 * <tr><td>`[android:rotationX][.ConstraintSet_android_rotationX]`</td><td></td></tr>
 * <tr><td>`[android:rotationY][.ConstraintSet_android_rotationY]`</td><td></td></tr>
 * <tr><td>`[android:layout_marginStart][.ConstraintSet_android_layout_marginStart]`</td><td></td></tr>
 * <tr><td>`[android:layout_marginEnd][.ConstraintSet_android_layout_marginEnd]`</td><td></td></tr>
 * <tr><td>`[android:translationZ][.ConstraintSet_android_translationZ]`</td><td></td></tr>
 * <tr><td>`[android:elevation][.ConstraintSet_android_elevation]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:barrierAllowsGoneWidgets][.ConstraintSet_barrierAllowsGoneWidgets]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:barrierDirection][.ConstraintSet_barrierDirection]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:chainUseRtl][.ConstraintSet_chainUseRtl]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:constraint_referenced_ids][.ConstraintSet_constraint_referenced_ids]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constrainedHeight][.ConstraintSet_layout_constrainedHeight]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constrainedWidth][.ConstraintSet_layout_constrainedWidth]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintBaseline_creator][.ConstraintSet_layout_constraintBaseline_creator]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintBaseline_toBaselineOf][.ConstraintSet_layout_constraintBaseline_toBaselineOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintBottom_creator][.ConstraintSet_layout_constraintBottom_creator]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintBottom_toBottomOf][.ConstraintSet_layout_constraintBottom_toBottomOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintBottom_toTopOf][.ConstraintSet_layout_constraintBottom_toTopOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintCircle][.ConstraintSet_layout_constraintCircle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintCircleAngle][.ConstraintSet_layout_constraintCircleAngle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintCircleRadius][.ConstraintSet_layout_constraintCircleRadius]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintDimensionRatio][.ConstraintSet_layout_constraintDimensionRatio]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintEnd_toEndOf][.ConstraintSet_layout_constraintEnd_toEndOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintEnd_toStartOf][.ConstraintSet_layout_constraintEnd_toStartOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintGuide_begin][.ConstraintSet_layout_constraintGuide_begin]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintGuide_end][.ConstraintSet_layout_constraintGuide_end]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintGuide_percent][.ConstraintSet_layout_constraintGuide_percent]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintHeight_default][.ConstraintSet_layout_constraintHeight_default]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintHeight_max][.ConstraintSet_layout_constraintHeight_max]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintHeight_min][.ConstraintSet_layout_constraintHeight_min]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintHeight_percent][.ConstraintSet_layout_constraintHeight_percent]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintHorizontal_bias][.ConstraintSet_layout_constraintHorizontal_bias]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintHorizontal_chainStyle][.ConstraintSet_layout_constraintHorizontal_chainStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintHorizontal_weight][.ConstraintSet_layout_constraintHorizontal_weight]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintLeft_creator][.ConstraintSet_layout_constraintLeft_creator]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintLeft_toLeftOf][.ConstraintSet_layout_constraintLeft_toLeftOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintLeft_toRightOf][.ConstraintSet_layout_constraintLeft_toRightOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintRight_creator][.ConstraintSet_layout_constraintRight_creator]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintRight_toLeftOf][.ConstraintSet_layout_constraintRight_toLeftOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintRight_toRightOf][.ConstraintSet_layout_constraintRight_toRightOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintStart_toEndOf][.ConstraintSet_layout_constraintStart_toEndOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintStart_toStartOf][.ConstraintSet_layout_constraintStart_toStartOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintTop_creator][.ConstraintSet_layout_constraintTop_creator]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintTop_toBottomOf][.ConstraintSet_layout_constraintTop_toBottomOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintTop_toTopOf][.ConstraintSet_layout_constraintTop_toTopOf]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintVertical_bias][.ConstraintSet_layout_constraintVertical_bias]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintVertical_chainStyle][.ConstraintSet_layout_constraintVertical_chainStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintVertical_weight][.ConstraintSet_layout_constraintVertical_weight]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintWidth_default][.ConstraintSet_layout_constraintWidth_default]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintWidth_max][.ConstraintSet_layout_constraintWidth_max]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintWidth_min][.ConstraintSet_layout_constraintWidth_min]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_constraintWidth_percent][.ConstraintSet_layout_constraintWidth_percent]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_editor_absoluteX][.ConstraintSet_layout_editor_absoluteX]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_editor_absoluteY][.ConstraintSet_layout_editor_absoluteY]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_goneMarginBottom][.ConstraintSet_layout_goneMarginBottom]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_goneMarginEnd][.ConstraintSet_layout_goneMarginEnd]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_goneMarginLeft][.ConstraintSet_layout_goneMarginLeft]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_goneMarginRight][.ConstraintSet_layout_goneMarginRight]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_goneMarginStart][.ConstraintSet_layout_goneMarginStart]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout_goneMarginTop][.ConstraintSet_layout_goneMarginTop]`</td><td></td></tr>
</table> *
 * @see .ConstraintSet_android_orientation
 *
 * @see .ConstraintSet_android_id
 *
 * @see .ConstraintSet_android_visibility
 *
 * @see .ConstraintSet_android_layout_width
 *
 * @see .ConstraintSet_android_layout_height
 *
 * @see .ConstraintSet_android_layout_marginLeft
 *
 * @see .ConstraintSet_android_layout_marginTop
 *
 * @see .ConstraintSet_android_layout_marginRight
 *
 * @see .ConstraintSet_android_layout_marginBottom
 *
 * @see .ConstraintSet_android_maxWidth
 *
 * @see .ConstraintSet_android_maxHeight
 *
 * @see .ConstraintSet_android_minWidth
 *
 * @see .ConstraintSet_android_minHeight
 *
 * @see .ConstraintSet_android_alpha
 *
 * @see .ConstraintSet_android_transformPivotX
 *
 * @see .ConstraintSet_android_transformPivotY
 *
 * @see .ConstraintSet_android_translationX
 *
 * @see .ConstraintSet_android_translationY
 *
 * @see .ConstraintSet_android_scaleX
 *
 * @see .ConstraintSet_android_scaleY
 *
 * @see .ConstraintSet_android_rotation
 *
 * @see .ConstraintSet_android_rotationX
 *
 * @see .ConstraintSet_android_rotationY
 *
 * @see .ConstraintSet_android_layout_marginStart
 *
 * @see .ConstraintSet_android_layout_marginEnd
 *
 * @see .ConstraintSet_android_translationZ
 *
 * @see .ConstraintSet_android_elevation
 *
 * @see .ConstraintSet_barrierAllowsGoneWidgets
 *
 * @see .ConstraintSet_barrierDirection
 *
 * @see .ConstraintSet_chainUseRtl
 *
 * @see .ConstraintSet_constraint_referenced_ids
 *
 * @see .ConstraintSet_layout_constrainedHeight
 *
 * @see .ConstraintSet_layout_constrainedWidth
 *
 * @see .ConstraintSet_layout_constraintBaseline_creator
 *
 * @see .ConstraintSet_layout_constraintBaseline_toBaselineOf
 *
 * @see .ConstraintSet_layout_constraintBottom_creator
 *
 * @see .ConstraintSet_layout_constraintBottom_toBottomOf
 *
 * @see .ConstraintSet_layout_constraintBottom_toTopOf
 *
 * @see .ConstraintSet_layout_constraintCircle
 *
 * @see .ConstraintSet_layout_constraintCircleAngle
 *
 * @see .ConstraintSet_layout_constraintCircleRadius
 *
 * @see .ConstraintSet_layout_constraintDimensionRatio
 *
 * @see .ConstraintSet_layout_constraintEnd_toEndOf
 *
 * @see .ConstraintSet_layout_constraintEnd_toStartOf
 *
 * @see .ConstraintSet_layout_constraintGuide_begin
 *
 * @see .ConstraintSet_layout_constraintGuide_end
 *
 * @see .ConstraintSet_layout_constraintGuide_percent
 *
 * @see .ConstraintSet_layout_constraintHeight_default
 *
 * @see .ConstraintSet_layout_constraintHeight_max
 *
 * @see .ConstraintSet_layout_constraintHeight_min
 *
 * @see .ConstraintSet_layout_constraintHeight_percent
 *
 * @see .ConstraintSet_layout_constraintHorizontal_bias
 *
 * @see .ConstraintSet_layout_constraintHorizontal_chainStyle
 *
 * @see .ConstraintSet_layout_constraintHorizontal_weight
 *
 * @see .ConstraintSet_layout_constraintLeft_creator
 *
 * @see .ConstraintSet_layout_constraintLeft_toLeftOf
 *
 * @see .ConstraintSet_layout_constraintLeft_toRightOf
 *
 * @see .ConstraintSet_layout_constraintRight_creator
 *
 * @see .ConstraintSet_layout_constraintRight_toLeftOf
 *
 * @see .ConstraintSet_layout_constraintRight_toRightOf
 *
 * @see .ConstraintSet_layout_constraintStart_toEndOf
 *
 * @see .ConstraintSet_layout_constraintStart_toStartOf
 *
 * @see .ConstraintSet_layout_constraintTop_creator
 *
 * @see .ConstraintSet_layout_constraintTop_toBottomOf
 *
 * @see .ConstraintSet_layout_constraintTop_toTopOf
 *
 * @see .ConstraintSet_layout_constraintVertical_bias
 *
 * @see .ConstraintSet_layout_constraintVertical_chainStyle
 *
 * @see .ConstraintSet_layout_constraintVertical_weight
 *
 * @see .ConstraintSet_layout_constraintWidth_default
 *
 * @see .ConstraintSet_layout_constraintWidth_max
 *
 * @see .ConstraintSet_layout_constraintWidth_min
 *
 * @see .ConstraintSet_layout_constraintWidth_percent
 *
 * @see .ConstraintSet_layout_editor_absoluteX
 *
 * @see .ConstraintSet_layout_editor_absoluteY
 *
 * @see .ConstraintSet_layout_goneMarginBottom
 *
 * @see .ConstraintSet_layout_goneMarginEnd
 *
 * @see .ConstraintSet_layout_goneMarginLeft
 *
 * @see .ConstraintSet_layout_goneMarginRight
 *
 * @see .ConstraintSet_layout_goneMarginStart
 *
 * @see .ConstraintSet_layout_goneMarginTop
 */
     val ConstraintSet = intArrayOf(0x010100c4, 0x010100d0, 0x010100dc, 0x010100f4, 0x010100f5, 0x010100f7, 0x010100f8, 0x010100f9, 0x010100fa, 0x0101011f, 0x01010120, 0x0101013f, 0x01010140, 0x0101031f, 0x01010320, 0x01010321, 0x01010322, 0x01010323, 0x01010324, 0x01010325, 0x01010326, 0x01010327, 0x01010328, 0x010103b5, 0x010103b6, 0x010103fa, 0x01010440, 0x7f020037, 0x7f020038, 0x7f020047, 0x7f02005b, 0x7f02009e, 0x7f02009f, 0x7f0200a0, 0x7f0200a1, 0x7f0200a2, 0x7f0200a3, 0x7f0200a4, 0x7f0200a5, 0x7f0200a6, 0x7f0200a7, 0x7f0200a8, 0x7f0200a9, 0x7f0200aa, 0x7f0200ab, 0x7f0200ac, 0x7f0200ad, 0x7f0200ae, 0x7f0200af, 0x7f0200b0, 0x7f0200b1, 0x7f0200b2, 0x7f0200b3, 0x7f0200b4, 0x7f0200b5, 0x7f0200b6, 0x7f0200b7, 0x7f0200b8, 0x7f0200b9, 0x7f0200ba, 0x7f0200bb, 0x7f0200bc, 0x7f0200bd, 0x7f0200be, 0x7f0200bf, 0x7f0200c0, 0x7f0200c1, 0x7f0200c2, 0x7f0200c3, 0x7f0200c4, 0x7f0200c5, 0x7f0200c6, 0x7f0200c7, 0x7f0200c8, 0x7f0200c9, 0x7f0200ca, 0x7f0200cb, 0x7f0200cc, 0x7f0200cd, 0x7f0200ce)
/**
 *
 * This symbol is the offset where the [android.R.attr.orientation]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>0</td><td></td></tr>
 * <tr><td>vertical</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name android:orientation
 */
     val ConstraintSet_android_orientation = 0
/**
 *
 * This symbol is the offset where the [android.R.attr.id]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:id
 */
     val ConstraintSet_android_id = 1
/**
 *
 * This symbol is the offset where the [android.R.attr.visibility]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>gone</td><td>2</td><td></td></tr>
 * <tr><td>invisible</td><td>1</td><td></td></tr>
 * <tr><td>visible</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name android:visibility
 */
     val ConstraintSet_android_visibility = 2
/**
 *
 * This symbol is the offset where the [android.R.attr.layout_width]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td></td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td></td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td></td></tr>
</table> *
 *
 * @attr name android:layout_width
 */
     val ConstraintSet_android_layout_width = 3
/**
 *
 * This symbol is the offset where the [android.R.attr.layout_height]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td></td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td></td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td></td></tr>
</table> *
 *
 * @attr name android:layout_height
 */
     val ConstraintSet_android_layout_height = 4
/**
 *
 * This symbol is the offset where the [android.R.attr.layout_marginLeft]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_marginLeft
 */
     val ConstraintSet_android_layout_marginLeft = 5
/**
 *
 * This symbol is the offset where the [android.R.attr.layout_marginTop]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_marginTop
 */
     val ConstraintSet_android_layout_marginTop = 6
/**
 *
 * This symbol is the offset where the [android.R.attr.layout_marginRight]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_marginRight
 */
     val ConstraintSet_android_layout_marginRight = 7
/**
 *
 * This symbol is the offset where the [android.R.attr.layout_marginBottom]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_marginBottom
 */
     val ConstraintSet_android_layout_marginBottom = 8
/**
 *
 * This symbol is the offset where the [android.R.attr.maxWidth]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:maxWidth
 */
     val ConstraintSet_android_maxWidth = 9
/**
 *
 * This symbol is the offset where the [android.R.attr.maxHeight]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:maxHeight
 */
     val ConstraintSet_android_maxHeight = 10
/**
 *
 * This symbol is the offset where the [android.R.attr.minWidth]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minWidth
 */
     val ConstraintSet_android_minWidth = 11
/**
 *
 * This symbol is the offset where the [android.R.attr.minHeight]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minHeight
 */
     val ConstraintSet_android_minHeight = 12
/**
 *
 * This symbol is the offset where the [android.R.attr.alpha]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:alpha
 */
     val ConstraintSet_android_alpha = 13
/**
 *
 * This symbol is the offset where the [android.R.attr.transformPivotX]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:transformPivotX
 */
     val ConstraintSet_android_transformPivotX = 14
/**
 *
 * This symbol is the offset where the [android.R.attr.transformPivotY]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:transformPivotY
 */
     val ConstraintSet_android_transformPivotY = 15
/**
 *
 * This symbol is the offset where the [android.R.attr.translationX]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:translationX
 */
     val ConstraintSet_android_translationX = 16
/**
 *
 * This symbol is the offset where the [android.R.attr.translationY]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:translationY
 */
     val ConstraintSet_android_translationY = 17
/**
 *
 * This symbol is the offset where the [android.R.attr.scaleX]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:scaleX
 */
     val ConstraintSet_android_scaleX = 18
/**
 *
 * This symbol is the offset where the [android.R.attr.scaleY]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:scaleY
 */
     val ConstraintSet_android_scaleY = 19
/**
 *
 * This symbol is the offset where the [android.R.attr.rotation]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:rotation
 */
     val ConstraintSet_android_rotation = 20
/**
 *
 * This symbol is the offset where the [android.R.attr.rotationX]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:rotationX
 */
     val ConstraintSet_android_rotationX = 21
/**
 *
 * This symbol is the offset where the [android.R.attr.rotationY]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:rotationY
 */
     val ConstraintSet_android_rotationY = 22
/**
 *
 * This symbol is the offset where the [android.R.attr.layout_marginStart]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_marginStart
 */
     val ConstraintSet_android_layout_marginStart = 23
/**
 *
 * This symbol is the offset where the [android.R.attr.layout_marginEnd]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_marginEnd
 */
     val ConstraintSet_android_layout_marginEnd = 24
/**
 *
 * This symbol is the offset where the [android.R.attr.translationZ]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:translationZ
 */
     val ConstraintSet_android_translationZ = 25
/**
 *
 * This symbol is the offset where the [android.R.attr.elevation]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:elevation
 */
     val ConstraintSet_android_elevation = 26
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.barrierAllowsGoneWidgets]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:barrierAllowsGoneWidgets
 */
     val ConstraintSet_barrierAllowsGoneWidgets = 27
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.barrierDirection]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>3</td><td></td></tr>
 * <tr><td>end</td><td>6</td><td></td></tr>
 * <tr><td>left</td><td>0</td><td></td></tr>
 * <tr><td>right</td><td>1</td><td></td></tr>
 * <tr><td>start</td><td>5</td><td></td></tr>
 * <tr><td>top</td><td>2</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:barrierDirection
 */
     val ConstraintSet_barrierDirection = 28
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.chainUseRtl]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:chainUseRtl
 */
     val ConstraintSet_chainUseRtl = 29
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.constraint_referenced_ids]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:constraint_referenced_ids
 */
     val ConstraintSet_constraint_referenced_ids = 30
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constrainedHeight]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constrainedHeight
 */
     val ConstraintSet_layout_constrainedHeight = 31
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constrainedWidth]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constrainedWidth
 */
     val ConstraintSet_layout_constrainedWidth = 32
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintBaseline_creator]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintBaseline_creator
 */
     val ConstraintSet_layout_constraintBaseline_creator = 33
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintBaseline_toBaselineOf]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintBaseline_toBaselineOf
 */
     val ConstraintSet_layout_constraintBaseline_toBaselineOf = 34
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintBottom_creator]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintBottom_creator
 */
     val ConstraintSet_layout_constraintBottom_creator = 35
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintBottom_toBottomOf]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintBottom_toBottomOf
 */
     val ConstraintSet_layout_constraintBottom_toBottomOf = 36
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintBottom_toTopOf]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintBottom_toTopOf
 */
     val ConstraintSet_layout_constraintBottom_toTopOf = 37
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintCircle]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintCircle
 */
     val ConstraintSet_layout_constraintCircle = 38
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintCircleAngle]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintCircleAngle
 */
     val ConstraintSet_layout_constraintCircleAngle = 39
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintCircleRadius]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintCircleRadius
 */
     val ConstraintSet_layout_constraintCircleRadius = 40
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintDimensionRatio]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintDimensionRatio
 */
     val ConstraintSet_layout_constraintDimensionRatio = 41
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintEnd_toEndOf]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintEnd_toEndOf
 */
     val ConstraintSet_layout_constraintEnd_toEndOf = 42
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintEnd_toStartOf]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintEnd_toStartOf
 */
     val ConstraintSet_layout_constraintEnd_toStartOf = 43
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintGuide_begin]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintGuide_begin
 */
     val ConstraintSet_layout_constraintGuide_begin = 44
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintGuide_end]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintGuide_end
 */
     val ConstraintSet_layout_constraintGuide_end = 45
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintGuide_percent]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintGuide_percent
 */
     val ConstraintSet_layout_constraintGuide_percent = 46
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintHeight_default]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>percent</td><td>2</td><td></td></tr>
 * <tr><td>spread</td><td>0</td><td></td></tr>
 * <tr><td>wrap</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintHeight_default
 */
     val ConstraintSet_layout_constraintHeight_default = 47
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintHeight_max]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap</td><td>fffffffe</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintHeight_max
 */
     val ConstraintSet_layout_constraintHeight_max = 48
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintHeight_min]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap</td><td>fffffffe</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintHeight_min
 */
     val ConstraintSet_layout_constraintHeight_min = 49
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintHeight_percent]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintHeight_percent
 */
     val ConstraintSet_layout_constraintHeight_percent = 50
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintHorizontal_bias]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintHorizontal_bias
 */
     val ConstraintSet_layout_constraintHorizontal_bias = 51
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintHorizontal_chainStyle]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>packed</td><td>2</td><td></td></tr>
 * <tr><td>spread</td><td>0</td><td></td></tr>
 * <tr><td>spread_inside</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintHorizontal_chainStyle
 */
     val ConstraintSet_layout_constraintHorizontal_chainStyle = 52
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintHorizontal_weight]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintHorizontal_weight
 */
     val ConstraintSet_layout_constraintHorizontal_weight = 53
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintLeft_creator]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintLeft_creator
 */
     val ConstraintSet_layout_constraintLeft_creator = 54
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintLeft_toLeftOf]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintLeft_toLeftOf
 */
     val ConstraintSet_layout_constraintLeft_toLeftOf = 55
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintLeft_toRightOf]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintLeft_toRightOf
 */
     val ConstraintSet_layout_constraintLeft_toRightOf = 56
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintRight_creator]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintRight_creator
 */
     val ConstraintSet_layout_constraintRight_creator = 57
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintRight_toLeftOf]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintRight_toLeftOf
 */
     val ConstraintSet_layout_constraintRight_toLeftOf = 58
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintRight_toRightOf]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintRight_toRightOf
 */
     val ConstraintSet_layout_constraintRight_toRightOf = 59
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintStart_toEndOf]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintStart_toEndOf
 */
     val ConstraintSet_layout_constraintStart_toEndOf = 60
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintStart_toStartOf]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintStart_toStartOf
 */
     val ConstraintSet_layout_constraintStart_toStartOf = 61
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintTop_creator]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintTop_creator
 */
     val ConstraintSet_layout_constraintTop_creator = 62
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintTop_toBottomOf]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintTop_toBottomOf
 */
     val ConstraintSet_layout_constraintTop_toBottomOf = 63
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintTop_toTopOf]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>parent</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintTop_toTopOf
 */
     val ConstraintSet_layout_constraintTop_toTopOf = 64
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintVertical_bias]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintVertical_bias
 */
     val ConstraintSet_layout_constraintVertical_bias = 65
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintVertical_chainStyle]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>packed</td><td>2</td><td></td></tr>
 * <tr><td>spread</td><td>0</td><td></td></tr>
 * <tr><td>spread_inside</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintVertical_chainStyle
 */
     val ConstraintSet_layout_constraintVertical_chainStyle = 66
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintVertical_weight]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintVertical_weight
 */
     val ConstraintSet_layout_constraintVertical_weight = 67
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintWidth_default]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>percent</td><td>2</td><td></td></tr>
 * <tr><td>spread</td><td>0</td><td></td></tr>
 * <tr><td>wrap</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintWidth_default
 */
     val ConstraintSet_layout_constraintWidth_default = 68
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintWidth_max]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap</td><td>fffffffe</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintWidth_max
 */
     val ConstraintSet_layout_constraintWidth_max = 69
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintWidth_min]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap</td><td>fffffffe</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintWidth_min
 */
     val ConstraintSet_layout_constraintWidth_min = 70
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_constraintWidth_percent]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name com.kartikeyinc.calculator:layout_constraintWidth_percent
 */
     val ConstraintSet_layout_constraintWidth_percent = 71
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_editor_absoluteX]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_editor_absoluteX
 */
     val ConstraintSet_layout_editor_absoluteX = 72
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_editor_absoluteY]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_editor_absoluteY
 */
     val ConstraintSet_layout_editor_absoluteY = 73
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_goneMarginBottom]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_goneMarginBottom
 */
     val ConstraintSet_layout_goneMarginBottom = 74
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_goneMarginEnd]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_goneMarginEnd
 */
     val ConstraintSet_layout_goneMarginEnd = 75
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_goneMarginLeft]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_goneMarginLeft
 */
     val ConstraintSet_layout_goneMarginLeft = 76
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_goneMarginRight]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_goneMarginRight
 */
     val ConstraintSet_layout_goneMarginRight = 77
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_goneMarginStart]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_goneMarginStart
 */
     val ConstraintSet_layout_goneMarginStart = 78
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.layout_goneMarginTop]
 * attribute's value can be found in the [.ConstraintSet] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:layout_goneMarginTop
 */
     val ConstraintSet_layout_goneMarginTop = 79
/**
 * Attributes that can be used with a DrawerArrowToggle.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[com.kartikeyinc.calculator:arrowHeadLength][.DrawerArrowToggle_arrowHeadLength]`</td><td>The length of the arrow head when formed to make an arrow</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:arrowShaftLength][.DrawerArrowToggle_arrowShaftLength]`</td><td>The length of the shaft when formed to make an arrow</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:barLength][.DrawerArrowToggle_barLength]`</td><td>The length of the bars when they are parallel to each other</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:color][.DrawerArrowToggle_color]`</td><td>The drawing color for the bars</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:drawableSize][.DrawerArrowToggle_drawableSize]`</td><td>The total size of the drawable</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:gapBetweenBars][.DrawerArrowToggle_gapBetweenBars]`</td><td>The max gap between the bars when they are parallel to each other</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:spinBars][.DrawerArrowToggle_spinBars]`</td><td>Whether bars should rotate or not during transition</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:thickness][.DrawerArrowToggle_thickness]`</td><td>The thickness (stroke size) for the bar paint</td></tr>
</table> *
 * @see .DrawerArrowToggle_arrowHeadLength
 *
 * @see .DrawerArrowToggle_arrowShaftLength
 *
 * @see .DrawerArrowToggle_barLength
 *
 * @see .DrawerArrowToggle_color
 *
 * @see .DrawerArrowToggle_drawableSize
 *
 * @see .DrawerArrowToggle_gapBetweenBars
 *
 * @see .DrawerArrowToggle_spinBars
 *
 * @see .DrawerArrowToggle_thickness
 */
     val DrawerArrowToggle = intArrayOf(0x7f020029, 0x7f02002a, 0x7f020036, 0x7f02004e, 0x7f020073, 0x7f02008d, 0x7f020109, 0x7f020127)
/**
 *
 *
 * @attr description
 * The length of the arrow head when formed to make an arrow
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:arrowHeadLength
 */
     val DrawerArrowToggle_arrowHeadLength = 0
/**
 *
 *
 * @attr description
 * The length of the shaft when formed to make an arrow
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:arrowShaftLength
 */
     val DrawerArrowToggle_arrowShaftLength = 1
/**
 *
 *
 * @attr description
 * The length of the bars when they are parallel to each other
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:barLength
 */
     val DrawerArrowToggle_barLength = 2
/**
 *
 *
 * @attr description
 * The drawing color for the bars
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:color
 */
     val DrawerArrowToggle_color = 3
/**
 *
 *
 * @attr description
 * The total size of the drawable
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:drawableSize
 */
     val DrawerArrowToggle_drawableSize = 4
/**
 *
 *
 * @attr description
 * The max gap between the bars when they are parallel to each other
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:gapBetweenBars
 */
     val DrawerArrowToggle_gapBetweenBars = 5
/**
 *
 *
 * @attr description
 * Whether bars should rotate or not during transition
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:spinBars
 */
     val DrawerArrowToggle_spinBars = 6
/**
 *
 *
 * @attr description
 * The thickness (stroke size) for the bar paint
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:thickness
 */
     val DrawerArrowToggle_thickness = 7
/**
 * Attributes that can be used with a FontFamily.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[com.kartikeyinc.calculator:fontProviderAuthority][.FontFamily_fontProviderAuthority]`</td><td>The authority of the Font Provider to be used for the request.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:fontProviderCerts][.FontFamily_fontProviderCerts]`</td><td>The sets of hashes for the certificates the provider should be signed with.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:fontProviderFetchStrategy][.FontFamily_fontProviderFetchStrategy]`</td><td>The strategy to be used when fetching font data from a font provider in XML layouts.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:fontProviderFetchTimeout][.FontFamily_fontProviderFetchTimeout]`</td><td>The length of the timeout during fetching.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:fontProviderPackage][.FontFamily_fontProviderPackage]`</td><td>The package for the Font Provider to be used for the request.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:fontProviderQuery][.FontFamily_fontProviderQuery]`</td><td>The query to be sent over to the provider.</td></tr>
</table> *
 * @see .FontFamily_fontProviderAuthority
 *
 * @see .FontFamily_fontProviderCerts
 *
 * @see .FontFamily_fontProviderFetchStrategy
 *
 * @see .FontFamily_fontProviderFetchTimeout
 *
 * @see .FontFamily_fontProviderPackage
 *
 * @see .FontFamily_fontProviderQuery
 */
     val FontFamily = intArrayOf(0x7f020084, 0x7f020085, 0x7f020086, 0x7f020087, 0x7f020088, 0x7f020089)
/**
 *
 *
 * @attr description
 * The authority of the Font Provider to be used for the request.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:fontProviderAuthority
 */
     val FontFamily_fontProviderAuthority = 0
/**
 *
 *
 * @attr description
 * The sets of hashes for the certificates the provider should be signed with. This is
 * used to verify the identity of the provider, and is only required if the provider is not
 * part of the system image. This value may point to one list or a list of lists, where each
 * individual list represents one collection of signature hashes. Refer to your font provider's
 * documentation for these values.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:fontProviderCerts
 */
     val FontFamily_fontProviderCerts = 1
/**
 *
 *
 * @attr description
 * The strategy to be used when fetching font data from a font provider in XML layouts.
 * This attribute is ignored when the resource is loaded from code, as it is equivalent to the
 * choice of API between [ ][androidx.core.content.res.ResourcesCompat.getFont] (blocking) and
 * [ ][androidx.core.content.res.ResourcesCompat.getFont]
 * (async).
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>async</td><td>1</td><td>The async font fetch works as follows.
 * First, check the local cache, then if the requeted font is not cached, trigger a
 * request the font and continue with layout inflation. Once the font fetch succeeds, the
 * target text view will be refreshed with the downloaded font data. The
 * fontProviderFetchTimeout will be ignored if async loading is specified.</td></tr>
 * <tr><td>blocking</td><td>0</td><td>The blocking font fetch works as follows.
 * First, check the local cache, then if the requested font is not cached, request the
 * font from the provider and wait until it is finished.  You can change the length of
 * the timeout by modifying fontProviderFetchTimeout.  If the timeout happens, the
 * default typeface will be used instead.</td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:fontProviderFetchStrategy
 */
     val FontFamily_fontProviderFetchStrategy = 2
/**
 *
 *
 * @attr description
 * The length of the timeout during fetching.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>forever</td><td>ffffffff</td><td>A special value for the timeout. In this case, the blocking font fetching will not
 * timeout and wait until a reply is received from the font provider.</td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:fontProviderFetchTimeout
 */
     val FontFamily_fontProviderFetchTimeout = 3
/**
 *
 *
 * @attr description
 * The package for the Font Provider to be used for the request. This is used to verify
 * the identity of the provider.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:fontProviderPackage
 */
     val FontFamily_fontProviderPackage = 4
/**
 *
 *
 * @attr description
 * The query to be sent over to the provider. Refer to your font provider's documentation
 * on the format of this string.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:fontProviderQuery
 */
     val FontFamily_fontProviderQuery = 5
/**
 * Attributes that can be used with a FontFamilyFont.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:font][.FontFamilyFont_android_font]`</td><td></td></tr>
 * <tr><td>`[android:fontWeight][.FontFamilyFont_android_fontWeight]`</td><td></td></tr>
 * <tr><td>`[android:fontStyle][.FontFamilyFont_android_fontStyle]`</td><td></td></tr>
 * <tr><td>`[android:ttcIndex][.FontFamilyFont_android_ttcIndex]`</td><td></td></tr>
 * <tr><td>`[android:fontVariationSettings][.FontFamilyFont_android_fontVariationSettings]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:font][.FontFamilyFont_font]`</td><td>The reference to the font file to be used.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:fontStyle][.FontFamilyFont_fontStyle]`</td><td>The style of the given font file.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:fontVariationSettings][.FontFamilyFont_fontVariationSettings]`</td><td>The variation settings to be applied to the font.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:fontWeight][.FontFamilyFont_fontWeight]`</td><td>The weight of the given font file.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:ttcIndex][.FontFamilyFont_ttcIndex]`</td><td>The index of the font in the tcc font file.</td></tr>
</table> *
 * @see .FontFamilyFont_android_font
 *
 * @see .FontFamilyFont_android_fontWeight
 *
 * @see .FontFamilyFont_android_fontStyle
 *
 * @see .FontFamilyFont_android_ttcIndex
 *
 * @see .FontFamilyFont_android_fontVariationSettings
 *
 * @see .FontFamilyFont_font
 *
 * @see .FontFamilyFont_fontStyle
 *
 * @see .FontFamilyFont_fontVariationSettings
 *
 * @see .FontFamilyFont_fontWeight
 *
 * @see .FontFamilyFont_ttcIndex
 */
     val FontFamilyFont = intArrayOf(0x01010532, 0x01010533, 0x0101053f, 0x0101056f, 0x01010570, 0x7f020082, 0x7f02008a, 0x7f02008b, 0x7f02008c, 0x7f020142)
/**
 *
 * This symbol is the offset where the [android.R.attr.font]
 * attribute's value can be found in the [.FontFamilyFont] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:font
 */
     val FontFamilyFont_android_font = 0
/**
 *
 * This symbol is the offset where the [android.R.attr.fontWeight]
 * attribute's value can be found in the [.FontFamilyFont] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name android:fontWeight
 */
     val FontFamilyFont_android_fontWeight = 1
/**
 *
 *
 * @attr description
 * References to the framework attrs
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>italic</td><td>1</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name android:fontStyle
 */
     val FontFamilyFont_android_fontStyle = 2
/**
 *
 * This symbol is the offset where the [android.R.attr.ttcIndex]
 * attribute's value can be found in the [.FontFamilyFont] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name android:ttcIndex
 */
     val FontFamilyFont_android_ttcIndex = 3
/**
 *
 * This symbol is the offset where the [android.R.attr.fontVariationSettings]
 * attribute's value can be found in the [.FontFamilyFont] array.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:fontVariationSettings
 */
     val FontFamilyFont_android_fontVariationSettings = 4
/**
 *
 *
 * @attr description
 * The reference to the font file to be used. This should be a file in the res/font folder
 * and should therefore have an R reference value. E.g. @font/myfont
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:font
 */
     val FontFamilyFont_font = 5
/**
 *
 *
 * @attr description
 * The style of the given font file. This will be used when the font is being loaded into
 * the font stack and will override any style information in the font's header tables. If
 * unspecified, the value in the font's header tables will be used.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>italic</td><td>1</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:fontStyle
 */
     val FontFamilyFont_fontStyle = 6
/**
 *
 *
 * @attr description
 * The variation settings to be applied to the font. The string should be in the following
 * format: "'tag1' value1, 'tag2' value2, ...". If the default variation settings should be
 * used, or the font used does not support variation settings, this attribute needs not be
 * specified.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:fontVariationSettings
 */
     val FontFamilyFont_fontVariationSettings = 7
/**
 *
 *
 * @attr description
 * The weight of the given font file. This will be used when the font is being loaded into
 * the font stack and will override any weight information in the font's header tables. Must
 * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
 * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
 * in the font's header tables will be used.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name com.kartikeyinc.calculator:fontWeight
 */
     val FontFamilyFont_fontWeight = 8
/**
 *
 *
 * @attr description
 * The index of the font in the tcc font file. If the font file referenced is not in the
 * tcc format, this attribute needs not be specified.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name com.kartikeyinc.calculator:ttcIndex
 */
     val FontFamilyFont_ttcIndex = 9
/**
 * Attributes that can be used with a GradientColor.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:startColor][.GradientColor_android_startColor]`</td><td></td></tr>
 * <tr><td>`[android:endColor][.GradientColor_android_endColor]`</td><td></td></tr>
 * <tr><td>`[android:type][.GradientColor_android_type]`</td><td></td></tr>
 * <tr><td>`[android:centerX][.GradientColor_android_centerX]`</td><td></td></tr>
 * <tr><td>`[android:centerY][.GradientColor_android_centerY]`</td><td></td></tr>
 * <tr><td>`[android:gradientRadius][.GradientColor_android_gradientRadius]`</td><td></td></tr>
 * <tr><td>`[android:tileMode][.GradientColor_android_tileMode]`</td><td></td></tr>
 * <tr><td>`[android:centerColor][.GradientColor_android_centerColor]`</td><td></td></tr>
 * <tr><td>`[android:startX][.GradientColor_android_startX]`</td><td></td></tr>
 * <tr><td>`[android:startY][.GradientColor_android_startY]`</td><td></td></tr>
 * <tr><td>`[android:endX][.GradientColor_android_endX]`</td><td></td></tr>
 * <tr><td>`[android:endY][.GradientColor_android_endY]`</td><td></td></tr>
</table> *
 * @see .GradientColor_android_startColor
 *
 * @see .GradientColor_android_endColor
 *
 * @see .GradientColor_android_type
 *
 * @see .GradientColor_android_centerX
 *
 * @see .GradientColor_android_centerY
 *
 * @see .GradientColor_android_gradientRadius
 *
 * @see .GradientColor_android_tileMode
 *
 * @see .GradientColor_android_centerColor
 *
 * @see .GradientColor_android_startX
 *
 * @see .GradientColor_android_startY
 *
 * @see .GradientColor_android_endX
 *
 * @see .GradientColor_android_endY
 */
     val GradientColor = intArrayOf(0x0101019d, 0x0101019e, 0x010101a1, 0x010101a2, 0x010101a3, 0x010101a4, 0x01010201, 0x0101020b, 0x01010510, 0x01010511, 0x01010512, 0x01010513)
/**
 *
 *
 * @attr description
 * Start color of the gradient.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:startColor
 */
     val GradientColor_android_startColor = 0
/**
 *
 *
 * @attr description
 * End color of the gradient.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:endColor
 */
     val GradientColor_android_endColor = 1
/**
 *
 *
 * @attr description
 * Type of gradient. The default type is linear.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>linear</td><td>0</td><td></td></tr>
 * <tr><td>radial</td><td>1</td><td></td></tr>
 * <tr><td>sweep</td><td>2</td><td></td></tr>
</table> *
 *
 * @attr name android:type
 */
     val GradientColor_android_type = 2
/**
 *
 *
 * @attr description
 * X coordinate of the center of the gradient within the path.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:centerX
 */
     val GradientColor_android_centerX = 3
/**
 *
 *
 * @attr description
 * Y coordinate of the center of the gradient within the path.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:centerY
 */
     val GradientColor_android_centerY = 4
/**
 *
 *
 * @attr description
 * Radius of the gradient, used only with radial gradient.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "`14.5%`".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:gradientRadius
 */
     val GradientColor_android_gradientRadius = 5
/**
 *
 *
 * @attr description
 * Defines the tile mode of the gradient. SweepGradient doesn't support tiling.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clamp</td><td>0</td><td></td></tr>
 * <tr><td>disabled</td><td>ffffffff</td><td></td></tr>
 * <tr><td>mirror</td><td>2</td><td></td></tr>
 * <tr><td>repeat</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name android:tileMode
 */
     val GradientColor_android_tileMode = 6
/**
 *
 *
 * @attr description
 * Optional center color.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:centerColor
 */
     val GradientColor_android_centerColor = 7
/**
 *
 *
 * @attr description
 * X coordinate of the start point origin of the gradient.
 * Defined in same coordinates as the path itself
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:startX
 */
     val GradientColor_android_startX = 8
/**
 *
 *
 * @attr description
 * Y coordinate of the start point of the gradient within the shape.
 * Defined in same coordinates as the path itself
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:startY
 */
     val GradientColor_android_startY = 9
/**
 *
 *
 * @attr description
 * X coordinate of the end point origin of the gradient.
 * Defined in same coordinates as the path itself
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:endX
 */
     val GradientColor_android_endX = 10
/**
 *
 *
 * @attr description
 * Y coordinate of the end point of the gradient within the shape.
 * Defined in same coordinates as the path itself
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:endY
 */
     val GradientColor_android_endY = 11
/**
 * Attributes that can be used with a GradientColorItem.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:color][.GradientColorItem_android_color]`</td><td></td></tr>
 * <tr><td>`[android:offset][.GradientColorItem_android_offset]`</td><td></td></tr>
</table> *
 * @see .GradientColorItem_android_color
 *
 * @see .GradientColorItem_android_offset
 */
     val GradientColorItem = intArrayOf(0x010101a5, 0x01010514)
/**
 *
 *
 * @attr description
 * The current color for the offset inside the gradient.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:color
 */
     val GradientColorItem_android_color = 0
/**
 *
 *
 * @attr description
 * The offset (or ratio) of this current color item inside the gradient.
 * The value is only meaningful when it is between 0 and 1.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:offset
 */
     val GradientColorItem_android_offset = 1
/**
 * Attributes that can be used with a LinearConstraintLayout.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:orientation][.LinearConstraintLayout_android_orientation]`</td><td></td></tr>
</table> *
 * @see .LinearConstraintLayout_android_orientation
 */
     val LinearConstraintLayout = intArrayOf(0x010100c4)
/**
 *
 * This symbol is the offset where the [android.R.attr.orientation]
 * attribute's value can be found in the [.LinearConstraintLayout] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>0</td><td></td></tr>
 * <tr><td>vertical</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name android:orientation
 */
     val LinearConstraintLayout_android_orientation = 0
/**
 * Attributes that can be used with a LinearLayoutCompat.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:gravity][.LinearLayoutCompat_android_gravity]`</td><td></td></tr>
 * <tr><td>`[android:orientation][.LinearLayoutCompat_android_orientation]`</td><td></td></tr>
 * <tr><td>`[android:baselineAligned][.LinearLayoutCompat_android_baselineAligned]`</td><td></td></tr>
 * <tr><td>`[android:baselineAlignedChildIndex][.LinearLayoutCompat_android_baselineAlignedChildIndex]`</td><td></td></tr>
 * <tr><td>`[android:weightSum][.LinearLayoutCompat_android_weightSum]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:divider][.LinearLayoutCompat_divider]`</td><td>Specifies the drawable used for item dividers.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:dividerPadding][.LinearLayoutCompat_dividerPadding]`</td><td>Size of padding on either end of a divider.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:measureWithLargestChild][.LinearLayoutCompat_measureWithLargestChild]`</td><td>When set to true, all children with a weight will be considered having
 * the minimum size of the largest child.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:showDividers][.LinearLayoutCompat_showDividers]`</td><td>Setting for which dividers to show.</td></tr>
</table> *
 * @see .LinearLayoutCompat_android_gravity
 *
 * @see .LinearLayoutCompat_android_orientation
 *
 * @see .LinearLayoutCompat_android_baselineAligned
 *
 * @see .LinearLayoutCompat_android_baselineAlignedChildIndex
 *
 * @see .LinearLayoutCompat_android_weightSum
 *
 * @see .LinearLayoutCompat_divider
 *
 * @see .LinearLayoutCompat_dividerPadding
 *
 * @see .LinearLayoutCompat_measureWithLargestChild
 *
 * @see .LinearLayoutCompat_showDividers
 */
     val LinearLayoutCompat = intArrayOf(0x010100af, 0x010100c4, 0x01010126, 0x01010127, 0x01010128, 0x7f02006b, 0x7f02006d, 0x7f0200e3, 0x7f020105)
/**
 *
 * This symbol is the offset where the [android.R.attr.gravity]
 * attribute's value can be found in the [.LinearLayoutCompat] array.
 *
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td></td></tr>
 * <tr><td>center</td><td>11</td><td></td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td></td></tr>
 * <tr><td>center_vertical</td><td>10</td><td></td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td></td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td></td></tr>
 * <tr><td>end</td><td>800005</td><td></td></tr>
 * <tr><td>fill</td><td>77</td><td></td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td></td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td></td></tr>
 * <tr><td>left</td><td>3</td><td></td></tr>
 * <tr><td>right</td><td>5</td><td></td></tr>
 * <tr><td>start</td><td>800003</td><td></td></tr>
 * <tr><td>top</td><td>30</td><td></td></tr>
</table> *
 *
 * @attr name android:gravity
 */
     val LinearLayoutCompat_android_gravity = 0
/**
 *
 *
 * @attr description
 * Should the layout be a column or a row?  Use "horizontal"
 * for a row, "vertical" for a column.  The default is
 * horizontal.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>0</td><td></td></tr>
 * <tr><td>vertical</td><td>1</td><td></td></tr>
</table> *
 *
 * @attr name android:orientation
 */
     val LinearLayoutCompat_android_orientation = 1
/**
 *
 *
 * @attr description
 * When set to false, prevents the layout from aligning its children's
 * baselines. This attribute is particularly useful when the children
 * use different values for gravity. The default value is true.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:baselineAligned
 */
     val LinearLayoutCompat_android_baselineAligned = 2
/**
 *
 *
 * @attr description
 * When a linear layout is part of another layout that is baseline
 * aligned, it can specify which of its children to baseline align to
 * (that is, which child TextView).
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name android:baselineAlignedChildIndex
 */
     val LinearLayoutCompat_android_baselineAlignedChildIndex = 3
/**
 *
 *
 * @attr description
 * Defines the maximum weight sum. If unspecified, the sum is computed
 * by adding the layout_weight of all of the children. This can be
 * used for instance to give a single child 50% of the total available
 * space by giving it a layout_weight of 0.5 and setting the weightSum
 * to 1.0.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:weightSum
 */
     val LinearLayoutCompat_android_weightSum = 4
/**
 *
 *
 * @attr description
 * Drawable to use as a vertical divider between buttons.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:divider
 */
     val LinearLayoutCompat_divider = 5
/**
 *
 *
 * @attr description
 * Size of padding on either end of a divider.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:dividerPadding
 */
     val LinearLayoutCompat_dividerPadding = 6
/**
 *
 *
 * @attr description
 * When set to true, all children with a weight will be considered having
 * the minimum size of the largest child. If false, all children are
 * measured normally.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:measureWithLargestChild
 */
     val LinearLayoutCompat_measureWithLargestChild = 7
/**
 *
 *
 * @attr description
 * Setting for which dividers to show.
 *
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>beginning</td><td>1</td><td></td></tr>
 * <tr><td>end</td><td>4</td><td></td></tr>
 * <tr><td>middle</td><td>2</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:showDividers
 */
     val LinearLayoutCompat_showDividers = 8
/**
 * Attributes that can be used with a LinearLayoutCompat_Layout.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:layout_gravity][.LinearLayoutCompat_Layout_android_layout_gravity]`</td><td></td></tr>
 * <tr><td>`[android:layout_width][.LinearLayoutCompat_Layout_android_layout_width]`</td><td></td></tr>
 * <tr><td>`[android:layout_height][.LinearLayoutCompat_Layout_android_layout_height]`</td><td></td></tr>
 * <tr><td>`[android:layout_weight][.LinearLayoutCompat_Layout_android_layout_weight]`</td><td></td></tr>
</table> *
 * @see .LinearLayoutCompat_Layout_android_layout_gravity
 *
 * @see .LinearLayoutCompat_Layout_android_layout_width
 *
 * @see .LinearLayoutCompat_Layout_android_layout_height
 *
 * @see .LinearLayoutCompat_Layout_android_layout_weight
 */
     val LinearLayoutCompat_Layout = intArrayOf(0x010100b3, 0x010100f4, 0x010100f5, 0x01010181)
/**
 *
 * This symbol is the offset where the [android.R.attr.layout_gravity]
 * attribute's value can be found in the [.LinearLayoutCompat_Layout] array.
 *
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td></td></tr>
 * <tr><td>center</td><td>11</td><td></td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td></td></tr>
 * <tr><td>center_vertical</td><td>10</td><td></td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td></td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td></td></tr>
 * <tr><td>end</td><td>800005</td><td></td></tr>
 * <tr><td>fill</td><td>77</td><td></td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td></td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td></td></tr>
 * <tr><td>left</td><td>3</td><td></td></tr>
 * <tr><td>right</td><td>5</td><td></td></tr>
 * <tr><td>start</td><td>800003</td><td></td></tr>
 * <tr><td>top</td><td>30</td><td></td></tr>
</table> *
 *
 * @attr name android:layout_gravity
 */
     val LinearLayoutCompat_Layout_android_layout_gravity = 0
/**
 *
 * This symbol is the offset where the [android.R.attr.layout_width]
 * attribute's value can be found in the [.LinearLayoutCompat_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td></td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td></td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td></td></tr>
</table> *
 *
 * @attr name android:layout_width
 */
     val LinearLayoutCompat_Layout_android_layout_width = 1
/**
 *
 * This symbol is the offset where the [android.R.attr.layout_height]
 * attribute's value can be found in the [.LinearLayoutCompat_Layout] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td></td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td></td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td></td></tr>
</table> *
 *
 * @attr name android:layout_height
 */
     val LinearLayoutCompat_Layout_android_layout_height = 2
/**
 *
 * This symbol is the offset where the [android.R.attr.layout_weight]
 * attribute's value can be found in the [.LinearLayoutCompat_Layout] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:layout_weight
 */
     val LinearLayoutCompat_Layout_android_layout_weight = 3
/**
 * Attributes that can be used with a ListPopupWindow.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:dropDownHorizontalOffset][.ListPopupWindow_android_dropDownHorizontalOffset]`</td><td></td></tr>
 * <tr><td>`[android:dropDownVerticalOffset][.ListPopupWindow_android_dropDownVerticalOffset]`</td><td></td></tr>
</table> *
 * @see .ListPopupWindow_android_dropDownHorizontalOffset
 *
 * @see .ListPopupWindow_android_dropDownVerticalOffset
 */
     val ListPopupWindow = intArrayOf(0x010102ac, 0x010102ad)
/**
 *
 *
 * @attr description
 * Amount of pixels by which the drop down should be offset horizontally.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:dropDownHorizontalOffset
 */
     val ListPopupWindow_android_dropDownHorizontalOffset = 0
/**
 *
 *
 * @attr description
 * Amount of pixels by which the drop down should be offset vertically.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:dropDownVerticalOffset
 */
     val ListPopupWindow_android_dropDownVerticalOffset = 1
/**
 * Attributes that can be used with a MenuGroup.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:enabled][.MenuGroup_android_enabled]`</td><td></td></tr>
 * <tr><td>`[android:id][.MenuGroup_android_id]`</td><td></td></tr>
 * <tr><td>`[android:visible][.MenuGroup_android_visible]`</td><td></td></tr>
 * <tr><td>`[android:menuCategory][.MenuGroup_android_menuCategory]`</td><td></td></tr>
 * <tr><td>`[android:orderInCategory][.MenuGroup_android_orderInCategory]`</td><td></td></tr>
 * <tr><td>`[android:checkableBehavior][.MenuGroup_android_checkableBehavior]`</td><td></td></tr>
</table> *
 * @see .MenuGroup_android_enabled
 *
 * @see .MenuGroup_android_id
 *
 * @see .MenuGroup_android_visible
 *
 * @see .MenuGroup_android_menuCategory
 *
 * @see .MenuGroup_android_orderInCategory
 *
 * @see .MenuGroup_android_checkableBehavior
 */
     val MenuGroup = intArrayOf(0x0101000e, 0x010100d0, 0x01010194, 0x010101de, 0x010101df, 0x010101e0)
/**
 *
 *
 * @attr description
 * Whether the items are enabled.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:enabled
 */
     val MenuGroup_android_enabled = 0
/**
 *
 *
 * @attr description
 * The ID of the group.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:id
 */
     val MenuGroup_android_id = 1
/**
 *
 *
 * @attr description
 * Whether the items are shown/visible.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:visible
 */
     val MenuGroup_android_visible = 2
/**
 *
 *
 * @attr description
 * The category applied to all items within this group.
 * (This will be or'ed with the orderInCategory attribute.)
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alternative</td><td>40000</td><td></td></tr>
 * <tr><td>container</td><td>10000</td><td></td></tr>
 * <tr><td>secondary</td><td>30000</td><td></td></tr>
 * <tr><td>system</td><td>20000</td><td></td></tr>
</table> *
 *
 * @attr name android:menuCategory
 */
     val MenuGroup_android_menuCategory = 3
/**
 *
 *
 * @attr description
 * The order within the category applied to all items within this group.
 * (This will be or'ed with the category attribute.)
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name android:orderInCategory
 */
     val MenuGroup_android_orderInCategory = 4
/**
 *
 *
 * @attr description
 * Whether the items are capable of displaying a check mark.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>all</td><td>1</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>single</td><td>2</td><td></td></tr>
</table> *
 *
 * @attr name android:checkableBehavior
 */
     val MenuGroup_android_checkableBehavior = 5
/**
 * Attributes that can be used with a MenuItem.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:icon][.MenuItem_android_icon]`</td><td></td></tr>
 * <tr><td>`[android:enabled][.MenuItem_android_enabled]`</td><td></td></tr>
 * <tr><td>`[android:id][.MenuItem_android_id]`</td><td></td></tr>
 * <tr><td>`[android:checked][.MenuItem_android_checked]`</td><td></td></tr>
 * <tr><td>`[android:visible][.MenuItem_android_visible]`</td><td></td></tr>
 * <tr><td>`[android:menuCategory][.MenuItem_android_menuCategory]`</td><td></td></tr>
 * <tr><td>`[android:orderInCategory][.MenuItem_android_orderInCategory]`</td><td></td></tr>
 * <tr><td>`[android:title][.MenuItem_android_title]`</td><td></td></tr>
 * <tr><td>`[android:titleCondensed][.MenuItem_android_titleCondensed]`</td><td></td></tr>
 * <tr><td>`[android:alphabeticShortcut][.MenuItem_android_alphabeticShortcut]`</td><td></td></tr>
 * <tr><td>`[android:numericShortcut][.MenuItem_android_numericShortcut]`</td><td></td></tr>
 * <tr><td>`[android:checkable][.MenuItem_android_checkable]`</td><td></td></tr>
 * <tr><td>`[android:onClick][.MenuItem_android_onClick]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionLayout][.MenuItem_actionLayout]`</td><td>An optional layout to be used as an action view.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionProviderClass][.MenuItem_actionProviderClass]`</td><td>The name of an optional ActionProvider class to instantiate an action view
 * and perform operations such as default action for that menu item.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:actionViewClass][.MenuItem_actionViewClass]`</td><td>The name of an optional View class to instantiate and use as an
 * action view.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:alphabeticModifiers][.MenuItem_alphabeticModifiers]`</td><td>The alphabetic modifier key.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:contentDescription][.MenuItem_contentDescription]`</td><td>The content description associated with the item.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:iconTint][.MenuItem_iconTint]`</td><td>Tint to apply to the icon.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:iconTintMode][.MenuItem_iconTintMode]`</td><td>Blending mode used to apply the icon tint.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:numericModifiers][.MenuItem_numericModifiers]`</td><td>The numeric modifier key.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:showAsAction][.MenuItem_showAsAction]`</td><td>How this item should display in the Action Bar, if present.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:tooltipText][.MenuItem_tooltipText]`</td><td>The tooltip text associated with the item.</td></tr>
</table> *
 * @see .MenuItem_android_icon
 *
 * @see .MenuItem_android_enabled
 *
 * @see .MenuItem_android_id
 *
 * @see .MenuItem_android_checked
 *
 * @see .MenuItem_android_visible
 *
 * @see .MenuItem_android_menuCategory
 *
 * @see .MenuItem_android_orderInCategory
 *
 * @see .MenuItem_android_title
 *
 * @see .MenuItem_android_titleCondensed
 *
 * @see .MenuItem_android_alphabeticShortcut
 *
 * @see .MenuItem_android_numericShortcut
 *
 * @see .MenuItem_android_checkable
 *
 * @see .MenuItem_android_onClick
 *
 * @see .MenuItem_actionLayout
 *
 * @see .MenuItem_actionProviderClass
 *
 * @see .MenuItem_actionViewClass
 *
 * @see .MenuItem_alphabeticModifiers
 *
 * @see .MenuItem_contentDescription
 *
 * @see .MenuItem_iconTint
 *
 * @see .MenuItem_iconTintMode
 *
 * @see .MenuItem_numericModifiers
 *
 * @see .MenuItem_showAsAction
 *
 * @see .MenuItem_tooltipText
 */
     val MenuItem = intArrayOf(0x01010002, 0x0101000e, 0x010100d0, 0x01010106, 0x01010194, 0x010101de, 0x010101df, 0x010101e1, 0x010101e2, 0x010101e3, 0x010101e4, 0x010101e5, 0x0101026f, 0x7f02000d, 0x7f02001f, 0x7f020020, 0x7f020028, 0x7f02005d, 0x7f020094, 0x7f020095, 0x7f0200e9, 0x7f020104, 0x7f02013e)
/**
 *
 *
 * @attr description
 * The icon associated with this item.  This icon will not always be shown, so
 * the title should be sufficient in describing this item.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:icon
 */
     val MenuItem_android_icon = 0
/**
 *
 *
 * @attr description
 * Whether the item is enabled.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:enabled
 */
     val MenuItem_android_enabled = 1
/**
 *
 *
 * @attr description
 * The ID of the item.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:id
 */
     val MenuItem_android_id = 2
/**
 *
 *
 * @attr description
 * Whether the item is checked.  Note that you must first have enabled checking with
 * the checkable attribute or else the check mark will not appear.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:checked
 */
     val MenuItem_android_checked = 3
/**
 *
 *
 * @attr description
 * Whether the item is shown/visible.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:visible
 */
     val MenuItem_android_visible = 4
/**
 *
 *
 * @attr description
 * The category applied to the item.
 * (This will be or'ed with the orderInCategory attribute.)
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alternative</td><td>40000</td><td></td></tr>
 * <tr><td>container</td><td>10000</td><td></td></tr>
 * <tr><td>secondary</td><td>30000</td><td></td></tr>
 * <tr><td>system</td><td>20000</td><td></td></tr>
</table> *
 *
 * @attr name android:menuCategory
 */
     val MenuItem_android_menuCategory = 5
/**
 *
 *
 * @attr description
 * The order within the category applied to the item.
 * (This will be or'ed with the category attribute.)
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name android:orderInCategory
 */
     val MenuItem_android_orderInCategory = 6
/**
 *
 *
 * @attr description
 * The title associated with the item.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:title
 */
     val MenuItem_android_title = 7
/**
 *
 *
 * @attr description
 * The condensed title associated with the item.  This is used in situations where the
 * normal title may be too long to be displayed.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:titleCondensed
 */
     val MenuItem_android_titleCondensed = 8
/**
 *
 *
 * @attr description
 * The alphabetic shortcut key.  This is the shortcut when using a keyboard
 * with alphabetic keys.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:alphabeticShortcut
 */
     val MenuItem_android_alphabeticShortcut = 9
/**
 *
 *
 * @attr description
 * The numeric shortcut key.  This is the shortcut when using a numeric (e.g., 12-key)
 * keyboard.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:numericShortcut
 */
     val MenuItem_android_numericShortcut = 10
/**
 *
 *
 * @attr description
 * Whether the item is capable of displaying a check mark.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:checkable
 */
     val MenuItem_android_checkable = 11
/**
 *
 *
 * @attr description
 * Name of a method on the Context used to inflate the menu that will be
 * called when the item is clicked.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:onClick
 */
     val MenuItem_android_onClick = 12
/**
 *
 *
 * @attr description
 * An optional layout to be used as an action view.
 * See [android.view.MenuItem.setActionView]
 * for more info.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:actionLayout
 */
     val MenuItem_actionLayout = 13
/**
 *
 *
 * @attr description
 * The name of an optional ActionProvider class to instantiate an action view
 * and perform operations such as default action for that menu item.
 * See [android.view.MenuItem.setActionProvider]
 * for more info.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:actionProviderClass
 */
     val MenuItem_actionProviderClass = 14
/**
 *
 *
 * @attr description
 * The name of an optional View class to instantiate and use as an
 * action view. See [android.view.MenuItem.setActionView]
 * for more info.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:actionViewClass
 */
     val MenuItem_actionViewClass = 15
/**
 *
 *
 * @attr description
 * The alphabetic modifier key. This is the modifier when using a keyboard
 * with alphabetic keys. The values should be kept in sync with KeyEvent
 *
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>ALT</td><td>2</td><td></td></tr>
 * <tr><td>CTRL</td><td>1000</td><td></td></tr>
 * <tr><td>FUNCTION</td><td>8</td><td></td></tr>
 * <tr><td>META</td><td>10000</td><td></td></tr>
 * <tr><td>SHIFT</td><td>1</td><td></td></tr>
 * <tr><td>SYM</td><td>4</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:alphabeticModifiers
 */
     val MenuItem_alphabeticModifiers = 16
/**
 *
 *
 * @attr description
 * The content description associated with the item.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:contentDescription
 */
     val MenuItem_contentDescription = 17
/**
 *
 *
 * @attr description
 * Tint to apply to the icon.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:iconTint
 */
     val MenuItem_iconTint = 18
/**
 *
 *
 * @attr description
 * Blending mode used to apply the icon tint.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and icon color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the icon with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the icon, but with the icon’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the icon. The icon’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the icon.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:iconTintMode
 */
     val MenuItem_iconTintMode = 19
/**
 *
 *
 * @attr description
 * The numeric modifier key. This is the modifier when using a numeric (e.g., 12-key)
 * keyboard. The values should be kept in sync with KeyEvent
 *
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>ALT</td><td>2</td><td></td></tr>
 * <tr><td>CTRL</td><td>1000</td><td></td></tr>
 * <tr><td>FUNCTION</td><td>8</td><td></td></tr>
 * <tr><td>META</td><td>10000</td><td></td></tr>
 * <tr><td>SHIFT</td><td>1</td><td></td></tr>
 * <tr><td>SYM</td><td>4</td><td></td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:numericModifiers
 */
     val MenuItem_numericModifiers = 20
/**
 *
 *
 * @attr description
 * How this item should display in the Action Bar, if present.
 *
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>always</td><td>2</td><td>Always show this item in an actionbar, even if it would override
 * the system's limits of how much stuff to put there. This may make
 * your action bar look bad on some screens. In most cases you should
 * use "ifRoom" instead. Mutually exclusive with "ifRoom" and "never".</td></tr>
 * <tr><td>collapseActionView</td><td>8</td><td>This item's action view collapses to a normal menu
 * item. When expanded, the action view takes over a
 * larger segment of its container.</td></tr>
 * <tr><td>ifRoom</td><td>1</td><td>Show this item in an action bar if there is room for it as determined
 * by the system. Favor this option over "always" where possible.
 * Mutually exclusive with "never" and "always".</td></tr>
 * <tr><td>never</td><td>0</td><td>Never show this item in an action bar, show it in the overflow menu instead.
 * Mutually exclusive with "ifRoom" and "always".</td></tr>
 * <tr><td>withText</td><td>4</td><td>When this item is shown as an action in the action bar, show a text
 * label with it even if it has an icon representation.</td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:showAsAction
 */
     val MenuItem_showAsAction = 21
/**
 *
 *
 * @attr description
 * The tooltip text associated with the item.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:tooltipText
 */
     val MenuItem_tooltipText = 22
/**
 * Attributes that can be used with a MenuView.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:windowAnimationStyle][.MenuView_android_windowAnimationStyle]`</td><td></td></tr>
 * <tr><td>`[android:itemTextAppearance][.MenuView_android_itemTextAppearance]`</td><td></td></tr>
 * <tr><td>`[android:horizontalDivider][.MenuView_android_horizontalDivider]`</td><td></td></tr>
 * <tr><td>`[android:verticalDivider][.MenuView_android_verticalDivider]`</td><td></td></tr>
 * <tr><td>`[android:headerBackground][.MenuView_android_headerBackground]`</td><td></td></tr>
 * <tr><td>`[android:itemBackground][.MenuView_android_itemBackground]`</td><td></td></tr>
 * <tr><td>`[android:itemIconDisabledAlpha][.MenuView_android_itemIconDisabledAlpha]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:preserveIconSpacing][.MenuView_preserveIconSpacing]`</td><td>Whether space should be reserved in layout when an icon is missing.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:subMenuArrow][.MenuView_subMenuArrow]`</td><td>Drawable for the arrow icon indicating a particular item is a submenu.</td></tr>
</table> *
 * @see .MenuView_android_windowAnimationStyle
 *
 * @see .MenuView_android_itemTextAppearance
 *
 * @see .MenuView_android_horizontalDivider
 *
 * @see .MenuView_android_verticalDivider
 *
 * @see .MenuView_android_headerBackground
 *
 * @see .MenuView_android_itemBackground
 *
 * @see .MenuView_android_itemIconDisabledAlpha
 *
 * @see .MenuView_preserveIconSpacing
 *
 * @see .MenuView_subMenuArrow
 */
     val MenuView = intArrayOf(0x010100ae, 0x0101012c, 0x0101012d, 0x0101012e, 0x0101012f, 0x01010130, 0x01010131, 0x7f0200f5, 0x7f02010f)
/**
 *
 *
 * @attr description
 * Default animations for the menu.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:windowAnimationStyle
 */
     val MenuView_android_windowAnimationStyle = 0
/**
 *
 *
 * @attr description
 * Default appearance of menu item text.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:itemTextAppearance
 */
     val MenuView_android_itemTextAppearance = 1
/**
 *
 *
 * @attr description
 * Default horizontal divider between rows of menu items.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:horizontalDivider
 */
     val MenuView_android_horizontalDivider = 2
/**
 *
 *
 * @attr description
 * Default vertical divider between menu items.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:verticalDivider
 */
     val MenuView_android_verticalDivider = 3
/**
 *
 *
 * @attr description
 * Default background for the menu header.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:headerBackground
 */
     val MenuView_android_headerBackground = 4
/**
 *
 *
 * @attr description
 * Default background for each menu item.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:itemBackground
 */
     val MenuView_android_itemBackground = 5
/**
 *
 *
 * @attr description
 * Default disabled icon alpha for each menu item that shows an icon.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:itemIconDisabledAlpha
 */
     val MenuView_android_itemIconDisabledAlpha = 6
/**
 *
 *
 * @attr description
 * Whether space should be reserved in layout when an icon is missing.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:preserveIconSpacing
 */
     val MenuView_preserveIconSpacing = 7
/**
 *
 *
 * @attr description
 * Drawable for the arrow icon indicating a particular item is a submenu.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:subMenuArrow
 */
     val MenuView_subMenuArrow = 8
/**
 * Attributes that can be used with a PopupWindow.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:popupBackground][.PopupWindow_android_popupBackground]`</td><td></td></tr>
 * <tr><td>`[android:popupAnimationStyle][.PopupWindow_android_popupAnimationStyle]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:overlapAnchor][.PopupWindow_overlapAnchor]`</td><td>Whether the popup window should overlap its anchor view.</td></tr>
</table> *
 * @see .PopupWindow_android_popupBackground
 *
 * @see .PopupWindow_android_popupAnimationStyle
 *
 * @see .PopupWindow_overlapAnchor
 */
     val PopupWindow = intArrayOf(0x01010176, 0x010102c9, 0x7f0200ea)
/**
 *
 * This symbol is the offset where the [android.R.attr.popupBackground]
 * attribute's value can be found in the [.PopupWindow] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:popupBackground
 */
     val PopupWindow_android_popupBackground = 0
/**
 *
 * This symbol is the offset where the [android.R.attr.popupAnimationStyle]
 * attribute's value can be found in the [.PopupWindow] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:popupAnimationStyle
 */
     val PopupWindow_android_popupAnimationStyle = 1
/**
 *
 *
 * @attr description
 * Whether the popup window should overlap its anchor view.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:overlapAnchor
 */
     val PopupWindow_overlapAnchor = 2
/**
 * Attributes that can be used with a PopupWindowBackgroundState.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[com.kartikeyinc.calculator:state_above_anchor][.PopupWindowBackgroundState_state_above_anchor]`</td><td>State identifier indicating the popup will be above the anchor.</td></tr>
</table> *
 * @see .PopupWindowBackgroundState_state_above_anchor
 */
     val PopupWindowBackgroundState = intArrayOf(0x7f02010e)
/**
 *
 *
 * @attr description
 * State identifier indicating the popup will be above the anchor.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:state_above_anchor
 */
     val PopupWindowBackgroundState_state_above_anchor = 0
/**
 * Attributes that can be used with a RecycleListView.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[com.kartikeyinc.calculator:paddingBottomNoButtons][.RecycleListView_paddingBottomNoButtons]`</td><td>Bottom padding to use when no buttons are present.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:paddingTopNoTitle][.RecycleListView_paddingTopNoTitle]`</td><td>Top padding to use when no title is present.</td></tr>
</table> *
 * @see .RecycleListView_paddingBottomNoButtons
 *
 * @see .RecycleListView_paddingTopNoTitle
 */
     val RecycleListView = intArrayOf(0x7f0200eb, 0x7f0200ee)
/**
 *
 *
 * @attr description
 * Bottom padding to use when no buttons are present.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:paddingBottomNoButtons
 */
     val RecycleListView_paddingBottomNoButtons = 0
/**
 *
 *
 * @attr description
 * Top padding to use when no title is present.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:paddingTopNoTitle
 */
     val RecycleListView_paddingTopNoTitle = 1
/**
 * Attributes that can be used with a SearchView.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:focusable][.SearchView_android_focusable]`</td><td></td></tr>
 * <tr><td>`[android:maxWidth][.SearchView_android_maxWidth]`</td><td></td></tr>
 * <tr><td>`[android:inputType][.SearchView_android_inputType]`</td><td></td></tr>
 * <tr><td>`[android:imeOptions][.SearchView_android_imeOptions]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:closeIcon][.SearchView_closeIcon]`</td><td>Close button icon</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:commitIcon][.SearchView_commitIcon]`</td><td>Commit icon shown in the query suggestion row</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:defaultQueryHint][.SearchView_defaultQueryHint]`</td><td>Default query hint used when `queryHint` is undefined and
 * the search view's `SearchableInfo` does not provide a hint.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:goIcon][.SearchView_goIcon]`</td><td>Go button icon</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:iconifiedByDefault][.SearchView_iconifiedByDefault]`</td><td>The default state of the SearchView.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:layout][.SearchView_layout]`</td><td>The layout to use for the search view.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:queryBackground][.SearchView_queryBackground]`</td><td>Background for the section containing the search query</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:queryHint][.SearchView_queryHint]`</td><td>An optional user-defined query hint string to be displayed in the empty query field.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:searchHintIcon][.SearchView_searchHintIcon]`</td><td>Search icon displayed as a text field hint</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:searchIcon][.SearchView_searchIcon]`</td><td>Search icon</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:submitBackground][.SearchView_submitBackground]`</td><td>Background for the section containing the action (e.g.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:suggestionRowLayout][.SearchView_suggestionRowLayout]`</td><td>Layout for query suggestion rows</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:voiceIcon][.SearchView_voiceIcon]`</td><td>Voice button icon</td></tr>
</table> *
 * @see .SearchView_android_focusable
 *
 * @see .SearchView_android_maxWidth
 *
 * @see .SearchView_android_inputType
 *
 * @see .SearchView_android_imeOptions
 *
 * @see .SearchView_closeIcon
 *
 * @see .SearchView_commitIcon
 *
 * @see .SearchView_defaultQueryHint
 *
 * @see .SearchView_goIcon
 *
 * @see .SearchView_iconifiedByDefault
 *
 * @see .SearchView_layout
 *
 * @see .SearchView_queryBackground
 *
 * @see .SearchView_queryHint
 *
 * @see .SearchView_searchHintIcon
 *
 * @see .SearchView_searchIcon
 *
 * @see .SearchView_submitBackground
 *
 * @see .SearchView_suggestionRowLayout
 *
 * @see .SearchView_voiceIcon
 */
     val SearchView = intArrayOf(0x010100da, 0x0101011f, 0x01010220, 0x01010264, 0x7f02004a, 0x7f020059, 0x7f020066, 0x7f02008e, 0x7f020096, 0x7f02009d, 0x7f0200f8, 0x7f0200f9, 0x7f0200fe, 0x7f0200ff, 0x7f020110, 0x7f020115, 0x7f020144)
/**
 *
 * This symbol is the offset where the [android.R.attr.focusable]
 * attribute's value can be found in the [.SearchView] array.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>10</td><td></td></tr>
</table> *
 *
 * @attr name android:focusable
 */
     val SearchView_android_focusable = 0
/**
 *
 *
 * @attr description
 * An optional maximum width of the SearchView.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:maxWidth
 */
     val SearchView_android_maxWidth = 1
/**
 *
 *
 * @attr description
 * The input type to set on the query text field.
 *
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>date</td><td>14</td><td></td></tr>
 * <tr><td>datetime</td><td>4</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>number</td><td>2</td><td></td></tr>
 * <tr><td>numberDecimal</td><td>2002</td><td></td></tr>
 * <tr><td>numberPassword</td><td>12</td><td></td></tr>
 * <tr><td>numberSigned</td><td>1002</td><td></td></tr>
 * <tr><td>phone</td><td>3</td><td></td></tr>
 * <tr><td>text</td><td>1</td><td></td></tr>
 * <tr><td>textAutoComplete</td><td>10001</td><td></td></tr>
 * <tr><td>textAutoCorrect</td><td>8001</td><td></td></tr>
 * <tr><td>textCapCharacters</td><td>1001</td><td></td></tr>
 * <tr><td>textCapSentences</td><td>4001</td><td></td></tr>
 * <tr><td>textCapWords</td><td>2001</td><td></td></tr>
 * <tr><td>textEmailAddress</td><td>21</td><td></td></tr>
 * <tr><td>textEmailSubject</td><td>31</td><td></td></tr>
 * <tr><td>textFilter</td><td>b1</td><td></td></tr>
 * <tr><td>textImeMultiLine</td><td>40001</td><td></td></tr>
 * <tr><td>textLongMessage</td><td>51</td><td></td></tr>
 * <tr><td>textMultiLine</td><td>20001</td><td></td></tr>
 * <tr><td>textNoSuggestions</td><td>80001</td><td></td></tr>
 * <tr><td>textPassword</td><td>81</td><td></td></tr>
 * <tr><td>textPersonName</td><td>61</td><td></td></tr>
 * <tr><td>textPhonetic</td><td>c1</td><td></td></tr>
 * <tr><td>textPostalAddress</td><td>71</td><td></td></tr>
 * <tr><td>textShortMessage</td><td>41</td><td></td></tr>
 * <tr><td>textUri</td><td>11</td><td></td></tr>
 * <tr><td>textVisiblePassword</td><td>91</td><td></td></tr>
 * <tr><td>textWebEditText</td><td>a1</td><td></td></tr>
 * <tr><td>textWebEmailAddress</td><td>d1</td><td></td></tr>
 * <tr><td>textWebPassword</td><td>e1</td><td></td></tr>
 * <tr><td>time</td><td>24</td><td></td></tr>
</table> *
 *
 * @attr name android:inputType
 */
     val SearchView_android_inputType = 2
/**
 *
 *
 * @attr description
 * The IME options to set on the query text field.
 *
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>actionDone</td><td>6</td><td></td></tr>
 * <tr><td>actionGo</td><td>2</td><td></td></tr>
 * <tr><td>actionNext</td><td>5</td><td></td></tr>
 * <tr><td>actionNone</td><td>1</td><td></td></tr>
 * <tr><td>actionPrevious</td><td>7</td><td></td></tr>
 * <tr><td>actionSearch</td><td>3</td><td></td></tr>
 * <tr><td>actionSend</td><td>4</td><td></td></tr>
 * <tr><td>actionUnspecified</td><td>0</td><td></td></tr>
 * <tr><td>flagForceAscii</td><td>80000000</td><td></td></tr>
 * <tr><td>flagNavigateNext</td><td>8000000</td><td></td></tr>
 * <tr><td>flagNavigatePrevious</td><td>4000000</td><td></td></tr>
 * <tr><td>flagNoAccessoryAction</td><td>20000000</td><td></td></tr>
 * <tr><td>flagNoEnterAction</td><td>40000000</td><td></td></tr>
 * <tr><td>flagNoExtractUi</td><td>10000000</td><td></td></tr>
 * <tr><td>flagNoFullscreen</td><td>2000000</td><td></td></tr>
 * <tr><td>flagNoPersonalizedLearning</td><td>1000000</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name android:imeOptions
 */
     val SearchView_android_imeOptions = 3
/**
 *
 *
 * @attr description
 * Close button icon
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:closeIcon
 */
     val SearchView_closeIcon = 4
/**
 *
 *
 * @attr description
 * Commit icon shown in the query suggestion row
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:commitIcon
 */
     val SearchView_commitIcon = 5
/**
 *
 *
 * @attr description
 * Default query hint used when `queryHint` is undefined and
 * the search view's `SearchableInfo` does not provide a hint.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:defaultQueryHint
 */
     val SearchView_defaultQueryHint = 6
/**
 *
 *
 * @attr description
 * Go button icon
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:goIcon
 */
     val SearchView_goIcon = 7
/**
 *
 *
 * @attr description
 * The default state of the SearchView. If true, it will be iconified when not in
 * use and expanded when clicked.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:iconifiedByDefault
 */
     val SearchView_iconifiedByDefault = 8
/**
 *
 *
 * @attr description
 * The layout to use for the search view.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:layout
 */
     val SearchView_layout = 9
/**
 *
 *
 * @attr description
 * Background for the section containing the search query
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:queryBackground
 */
     val SearchView_queryBackground = 10
/**
 *
 *
 * @attr description
 * An optional user-defined query hint string to be displayed in the empty query field.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:queryHint
 */
     val SearchView_queryHint = 11
/**
 *
 *
 * @attr description
 * Search icon displayed as a text field hint
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:searchHintIcon
 */
     val SearchView_searchHintIcon = 12
/**
 *
 *
 * @attr description
 * Search icon
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:searchIcon
 */
     val SearchView_searchIcon = 13
/**
 *
 *
 * @attr description
 * Background for the section containing the action (e.g. voice search)
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:submitBackground
 */
     val SearchView_submitBackground = 14
/**
 *
 *
 * @attr description
 * Layout for query suggestion rows
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:suggestionRowLayout
 */
     val SearchView_suggestionRowLayout = 15
/**
 *
 *
 * @attr description
 * Voice button icon
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:voiceIcon
 */
     val SearchView_voiceIcon = 16
/**
 * Attributes that can be used with a Spinner.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:entries][.Spinner_android_entries]`</td><td></td></tr>
 * <tr><td>`[android:popupBackground][.Spinner_android_popupBackground]`</td><td></td></tr>
 * <tr><td>`[android:prompt][.Spinner_android_prompt]`</td><td></td></tr>
 * <tr><td>`[android:dropDownWidth][.Spinner_android_dropDownWidth]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:popupTheme][.Spinner_popupTheme]`</td><td>Reference to a theme that should be used to inflate popups
 * shown by widgets in the action bar.</td></tr>
</table> *
 * @see .Spinner_android_entries
 *
 * @see .Spinner_android_popupBackground
 *
 * @see .Spinner_android_prompt
 *
 * @see .Spinner_android_dropDownWidth
 *
 * @see .Spinner_popupTheme
 */
     val Spinner = intArrayOf(0x010100b2, 0x01010176, 0x0101017b, 0x01010262, 0x7f0200f3)
/**
 *
 *
 * @attr description
 * Reference to an array resource that will populate the Spinner.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:entries
 */
     val Spinner_android_entries = 0
/**
 *
 *
 * @attr description
 * Background drawable to use for the dropdown in spinnerMode="dropdown".
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:popupBackground
 */
     val Spinner_android_popupBackground = 1
/**
 *
 *
 * @attr description
 * The prompt to display when the spinner's dialog is shown.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:prompt
 */
     val Spinner_android_prompt = 2
/**
 *
 *
 * @attr description
 * Width of the dropdown in spinnerMode="dropdown".
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td></td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td></td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td></td></tr>
</table> *
 *
 * @attr name android:dropDownWidth
 */
     val Spinner_android_dropDownWidth = 3
/**
 *
 *
 * @attr description
 * Theme to use for the drop-down or dialog popup window.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:popupTheme
 */
     val Spinner_popupTheme = 4
/**
 * Attributes that can be used with a StateListDrawable.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:dither][.StateListDrawable_android_dither]`</td><td></td></tr>
 * <tr><td>`[android:visible][.StateListDrawable_android_visible]`</td><td></td></tr>
 * <tr><td>`[android:variablePadding][.StateListDrawable_android_variablePadding]`</td><td></td></tr>
 * <tr><td>`[android:constantSize][.StateListDrawable_android_constantSize]`</td><td></td></tr>
 * <tr><td>`[android:enterFadeDuration][.StateListDrawable_android_enterFadeDuration]`</td><td></td></tr>
 * <tr><td>`[android:exitFadeDuration][.StateListDrawable_android_exitFadeDuration]`</td><td></td></tr>
</table> *
 * @see .StateListDrawable_android_dither
 *
 * @see .StateListDrawable_android_visible
 *
 * @see .StateListDrawable_android_variablePadding
 *
 * @see .StateListDrawable_android_constantSize
 *
 * @see .StateListDrawable_android_enterFadeDuration
 *
 * @see .StateListDrawable_android_exitFadeDuration
 */
     val StateListDrawable = intArrayOf(0x0101011c, 0x01010194, 0x01010195, 0x01010196, 0x0101030c, 0x0101030d)
/**
 *
 *
 * @attr description
 * Enables or disables dithering of the bitmap if the bitmap does not have the
 * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
 * an RGB 565 screen).
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:dither
 */
     val StateListDrawable_android_dither = 0
/**
 *
 *
 * @attr description
 * Indicates whether the drawable should be initially visible.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:visible
 */
     val StateListDrawable_android_visible = 1
/**
 *
 *
 * @attr description
 * If true, allows the drawable's padding to change based on the
 * current state that is selected.  If false, the padding will
 * stay the same (based on the maximum padding of all the states).
 * Enabling this feature requires that the owner of the drawable
 * deal with performing layout when the state changes, which is
 * often not supported.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:variablePadding
 */
     val StateListDrawable_android_variablePadding = 2
/**
 *
 *
 * @attr description
 * If true, the drawable's reported internal size will remain
 * constant as the state changes; the size is the maximum of all
 * of the states.  If false, the size will vary based on the
 * current state.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name android:constantSize
 */
     val StateListDrawable_android_constantSize = 3
/**
 *
 *
 * @attr description
 * Amount of time (in milliseconds) to fade in a new state drawable.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name android:enterFadeDuration
 */
     val StateListDrawable_android_enterFadeDuration = 4
/**
 *
 *
 * @attr description
 * Amount of time (in milliseconds) to fade out an old state drawable.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name android:exitFadeDuration
 */
     val StateListDrawable_android_exitFadeDuration = 5
/**
 * Attributes that can be used with a StateListDrawableItem.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:drawable][.StateListDrawableItem_android_drawable]`</td><td></td></tr>
</table> *
 * @see .StateListDrawableItem_android_drawable
 */
     val StateListDrawableItem = intArrayOf(0x01010199)
/**
 *
 *
 * @attr description
 * Reference to a drawable resource to use for the state. If not
 * given, the drawable must be defined by the first child tag.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:drawable
 */
     val StateListDrawableItem_android_drawable = 0
/**
 * Attributes that can be used with a SwitchCompat.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:textOn][.SwitchCompat_android_textOn]`</td><td></td></tr>
 * <tr><td>`[android:textOff][.SwitchCompat_android_textOff]`</td><td></td></tr>
 * <tr><td>`[android:thumb][.SwitchCompat_android_thumb]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:showText][.SwitchCompat_showText]`</td><td>Whether to draw on/off text.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:splitTrack][.SwitchCompat_splitTrack]`</td><td>Whether to split the track and leave a gap for the thumb drawable.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:switchMinWidth][.SwitchCompat_switchMinWidth]`</td><td>Minimum width for the switch component</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:switchPadding][.SwitchCompat_switchPadding]`</td><td>Minimum space between the switch and caption text</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:switchTextAppearance][.SwitchCompat_switchTextAppearance]`</td><td>TextAppearance style for text displayed on the switch thumb.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:thumbTextPadding][.SwitchCompat_thumbTextPadding]`</td><td>Amount of padding on either side of text within the switch thumb.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:thumbTint][.SwitchCompat_thumbTint]`</td><td>Tint to apply to the thumb drawable.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:thumbTintMode][.SwitchCompat_thumbTintMode]`</td><td>Blending mode used to apply the thumb tint.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:track][.SwitchCompat_track]`</td><td>Drawable to use as the "track" that the switch thumb slides within.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:trackTint][.SwitchCompat_trackTint]`</td><td>Tint to apply to the track.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:trackTintMode][.SwitchCompat_trackTintMode]`</td><td>Blending mode used to apply the track tint.</td></tr>
</table> *
 * @see .SwitchCompat_android_textOn
 *
 * @see .SwitchCompat_android_textOff
 *
 * @see .SwitchCompat_android_thumb
 *
 * @see .SwitchCompat_showText
 *
 * @see .SwitchCompat_splitTrack
 *
 * @see .SwitchCompat_switchMinWidth
 *
 * @see .SwitchCompat_switchPadding
 *
 * @see .SwitchCompat_switchTextAppearance
 *
 * @see .SwitchCompat_thumbTextPadding
 *
 * @see .SwitchCompat_thumbTint
 *
 * @see .SwitchCompat_thumbTintMode
 *
 * @see .SwitchCompat_track
 *
 * @see .SwitchCompat_trackTint
 *
 * @see .SwitchCompat_trackTintMode
 */
     val SwitchCompat = intArrayOf(0x01010124, 0x01010125, 0x01010142, 0x7f020106, 0x7f02010c, 0x7f020116, 0x7f020117, 0x7f020119, 0x7f020128, 0x7f020129, 0x7f02012a, 0x7f02013f, 0x7f020140, 0x7f020141)
/**
 *
 *
 * @attr description
 * Text to use when the switch is in the checked/"on" state.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:textOn
 */
     val SwitchCompat_android_textOn = 0
/**
 *
 *
 * @attr description
 * Text to use when the switch is in the unchecked/"off" state.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:textOff
 */
     val SwitchCompat_android_textOff = 1
/**
 *
 *
 * @attr description
 * Drawable to use as the "thumb" that switches back and forth.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:thumb
 */
     val SwitchCompat_android_thumb = 2
/**
 *
 *
 * @attr description
 * Whether to draw on/off text.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:showText
 */
     val SwitchCompat_showText = 3
/**
 *
 *
 * @attr description
 * Whether to split the track and leave a gap for the thumb drawable.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:splitTrack
 */
     val SwitchCompat_splitTrack = 4
/**
 *
 *
 * @attr description
 * Minimum width for the switch component
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:switchMinWidth
 */
     val SwitchCompat_switchMinWidth = 5
/**
 *
 *
 * @attr description
 * Minimum space between the switch and caption text
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:switchPadding
 */
     val SwitchCompat_switchPadding = 6
/**
 *
 *
 * @attr description
 * TextAppearance style for text displayed on the switch thumb.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:switchTextAppearance
 */
     val SwitchCompat_switchTextAppearance = 7
/**
 *
 *
 * @attr description
 * Amount of padding on either side of text within the switch thumb.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:thumbTextPadding
 */
     val SwitchCompat_thumbTextPadding = 8
/**
 *
 *
 * @attr description
 * Tint to apply to the thumb drawable.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:thumbTint
 */
     val SwitchCompat_thumbTint = 9
/**
 *
 *
 * @attr description
 * Blending mode used to apply the thumb tint.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:thumbTintMode
 */
     val SwitchCompat_thumbTintMode = 10
/**
 *
 *
 * @attr description
 * Drawable to use as the "track" that the switch thumb slides within.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:track
 */
     val SwitchCompat_track = 11
/**
 *
 *
 * @attr description
 * Tint to apply to the track.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:trackTint
 */
     val SwitchCompat_trackTint = 12
/**
 *
 *
 * @attr description
 * Blending mode used to apply the track tint.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:trackTintMode
 */
     val SwitchCompat_trackTintMode = 13
/**
 * Attributes that can be used with a TextAppearance.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:textSize][.TextAppearance_android_textSize]`</td><td></td></tr>
 * <tr><td>`[android:typeface][.TextAppearance_android_typeface]`</td><td></td></tr>
 * <tr><td>`[android:textStyle][.TextAppearance_android_textStyle]`</td><td></td></tr>
 * <tr><td>`[android:textColor][.TextAppearance_android_textColor]`</td><td></td></tr>
 * <tr><td>`[android:textColorHint][.TextAppearance_android_textColorHint]`</td><td></td></tr>
 * <tr><td>`[android:textColorLink][.TextAppearance_android_textColorLink]`</td><td></td></tr>
 * <tr><td>`[android:shadowColor][.TextAppearance_android_shadowColor]`</td><td></td></tr>
 * <tr><td>`[android:shadowDx][.TextAppearance_android_shadowDx]`</td><td></td></tr>
 * <tr><td>`[android:shadowDy][.TextAppearance_android_shadowDy]`</td><td></td></tr>
 * <tr><td>`[android:shadowRadius][.TextAppearance_android_shadowRadius]`</td><td></td></tr>
 * <tr><td>`[android:fontFamily][.TextAppearance_android_fontFamily]`</td><td></td></tr>
 * <tr><td>`[android:textFontWeight][.TextAppearance_android_textFontWeight]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:fontFamily][.TextAppearance_fontFamily]`</td><td>The attribute for the font family.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:fontVariationSettings][.TextAppearance_fontVariationSettings]`</td><td>The variation settings to be applied to the font.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:textAllCaps][.TextAppearance_textAllCaps]`</td><td>Present the text in ALL CAPS.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:textLocale][.TextAppearance_textLocale]`</td><td>Set the textLocale by a comma-separated language tag string,
 * for example "ja-JP,zh-CN".</td></tr>
</table> *
 * @see .TextAppearance_android_textSize
 *
 * @see .TextAppearance_android_typeface
 *
 * @see .TextAppearance_android_textStyle
 *
 * @see .TextAppearance_android_textColor
 *
 * @see .TextAppearance_android_textColorHint
 *
 * @see .TextAppearance_android_textColorLink
 *
 * @see .TextAppearance_android_shadowColor
 *
 * @see .TextAppearance_android_shadowDx
 *
 * @see .TextAppearance_android_shadowDy
 *
 * @see .TextAppearance_android_shadowRadius
 *
 * @see .TextAppearance_android_fontFamily
 *
 * @see .TextAppearance_android_textFontWeight
 *
 * @see .TextAppearance_fontFamily
 *
 * @see .TextAppearance_fontVariationSettings
 *
 * @see .TextAppearance_textAllCaps
 *
 * @see .TextAppearance_textLocale
 */
     val TextAppearance = intArrayOf(0x01010095, 0x01010096, 0x01010097, 0x01010098, 0x0101009a, 0x0101009b, 0x01010161, 0x01010162, 0x01010163, 0x01010164, 0x010103ac, 0x01010585, 0x7f020083, 0x7f02008b, 0x7f02011a, 0x7f020125)
/**
 *
 * This symbol is the offset where the [android.R.attr.textSize]
 * attribute's value can be found in the [.TextAppearance] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:textSize
 */
     val TextAppearance_android_textSize = 0
/**
 *
 * This symbol is the offset where the [android.R.attr.typeface]
 * attribute's value can be found in the [.TextAppearance] array.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>monospace</td><td>3</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
 * <tr><td>sans</td><td>1</td><td></td></tr>
 * <tr><td>serif</td><td>2</td><td></td></tr>
</table> *
 *
 * @attr name android:typeface
 */
     val TextAppearance_android_typeface = 1
/**
 *
 * This symbol is the offset where the [android.R.attr.textStyle]
 * attribute's value can be found in the [.TextAppearance] array.
 *
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bold</td><td>1</td><td></td></tr>
 * <tr><td>italic</td><td>2</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
</table> *
 *
 * @attr name android:textStyle
 */
     val TextAppearance_android_textStyle = 2
/**
 *
 * This symbol is the offset where the [android.R.attr.textColor]
 * attribute's value can be found in the [.TextAppearance] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:textColor
 */
     val TextAppearance_android_textColor = 3
/**
 *
 * This symbol is the offset where the [android.R.attr.textColorHint]
 * attribute's value can be found in the [.TextAppearance] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:textColorHint
 */
     val TextAppearance_android_textColorHint = 4
/**
 *
 * This symbol is the offset where the [android.R.attr.textColorLink]
 * attribute's value can be found in the [.TextAppearance] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:textColorLink
 */
     val TextAppearance_android_textColorLink = 5
/**
 *
 * This symbol is the offset where the [android.R.attr.shadowColor]
 * attribute's value can be found in the [.TextAppearance] array.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:shadowColor
 */
     val TextAppearance_android_shadowColor = 6
/**
 *
 * This symbol is the offset where the [android.R.attr.shadowDx]
 * attribute's value can be found in the [.TextAppearance] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:shadowDx
 */
     val TextAppearance_android_shadowDx = 7
/**
 *
 * This symbol is the offset where the [android.R.attr.shadowDy]
 * attribute's value can be found in the [.TextAppearance] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:shadowDy
 */
     val TextAppearance_android_shadowDy = 8
/**
 *
 * This symbol is the offset where the [android.R.attr.shadowRadius]
 * attribute's value can be found in the [.TextAppearance] array.
 *
 *
 * May be a floating point value, such as "`1.2`".
 *
 * @attr name android:shadowRadius
 */
     val TextAppearance_android_shadowRadius = 9
/**
 *
 * This symbol is the offset where the [android.R.attr.fontFamily]
 * attribute's value can be found in the [.TextAppearance] array.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:fontFamily
 */
     val TextAppearance_android_fontFamily = 10
/**
 *
 * This symbol is the offset where the [android.R.attr.textFontWeight]
 * attribute's value can be found in the [.TextAppearance] array.
 *
 *
 * May be an integer value, such as "`100`".
 *
 * @attr name android:textFontWeight
 */
     val TextAppearance_android_textFontWeight = 11
/**
 *
 *
 * @attr description
 * The attribute for the font family.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:fontFamily
 */
     val TextAppearance_fontFamily = 12
/**
 *
 *
 * @attr description
 * OpenType font variation settings, available aftear api 26.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:fontVariationSettings
 */
     val TextAppearance_fontVariationSettings = 13
/**
 *
 *
 * @attr description
 * Present the text in ALL CAPS. This may use a small-caps form when available.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * @attr name com.kartikeyinc.calculator:textAllCaps
 */
     val TextAppearance_textAllCaps = 14
/**
 *
 *
 * @attr description
 * Set the textLocale by a comma-separated language tag string,
 * for example "ja-JP,zh-CN". This attribute only takes effect on API 21 and above.
 * Before API 24, only the first language tag is used. Starting from API 24,
 * the string will be converted into a [android.os.LocaleList] and then used by
 * [android.widget.TextView]
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:textLocale
 */
     val TextAppearance_textLocale = 15
/**
 * Attributes that can be used with a Toolbar.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:gravity][.Toolbar_android_gravity]`</td><td></td></tr>
 * <tr><td>`[android:minHeight][.Toolbar_android_minHeight]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:buttonGravity][.Toolbar_buttonGravity]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:collapseContentDescription][.Toolbar_collapseContentDescription]`</td><td>Text to set as the content description for the collapse button.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:collapseIcon][.Toolbar_collapseIcon]`</td><td>Icon drawable to use for the collapse button.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:contentInsetEnd][.Toolbar_contentInsetEnd]`</td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:contentInsetEndWithActions][.Toolbar_contentInsetEndWithActions]`</td><td>Minimum inset for content views within a bar when actions from a menu
 * are present.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:contentInsetLeft][.Toolbar_contentInsetLeft]`</td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:contentInsetRight][.Toolbar_contentInsetRight]`</td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:contentInsetStart][.Toolbar_contentInsetStart]`</td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:contentInsetStartWithNavigation][.Toolbar_contentInsetStartWithNavigation]`</td><td>Minimum inset for content views within a bar when a navigation button
 * is present, such as the Up button.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:logo][.Toolbar_logo]`</td><td>Specifies the drawable used for the application logo.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:logoDescription][.Toolbar_logoDescription]`</td><td>A content description string to describe the appearance of the
 * associated logo image.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:maxButtonHeight][.Toolbar_maxButtonHeight]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:menu][.Toolbar_menu]`</td><td>Menu resource to inflate to be shown in the toolbar</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:navigationContentDescription][.Toolbar_navigationContentDescription]`</td><td>Text to set as the content description for the navigation button
 * located at the start of the toolbar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:navigationIcon][.Toolbar_navigationIcon]`</td><td>Icon drawable to use for the navigation button located at
 * the start of the toolbar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:popupTheme][.Toolbar_popupTheme]`</td><td>Reference to a theme that should be used to inflate popups
 * shown by widgets in the action bar.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:subtitle][.Toolbar_subtitle]`</td><td>Specifies subtitle text used for navigationMode="normal"</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:subtitleTextAppearance][.Toolbar_subtitleTextAppearance]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:subtitleTextColor][.Toolbar_subtitleTextColor]`</td><td>A color to apply to the subtitle string.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:title][.Toolbar_title]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:titleMargin][.Toolbar_titleMargin]`</td><td>Specifies extra space on the left, start, right and end sides
 * of the toolbar's title.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:titleMarginBottom][.Toolbar_titleMarginBottom]`</td><td>Specifies extra space on the bottom side of the toolbar's title.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:titleMarginEnd][.Toolbar_titleMarginEnd]`</td><td>Specifies extra space on the end side of the toolbar's title.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:titleMarginStart][.Toolbar_titleMarginStart]`</td><td>Specifies extra space on the start side of the toolbar's title.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:titleMarginTop][.Toolbar_titleMarginTop]`</td><td>Specifies extra space on the top side of the toolbar's title.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:titleMargins][.Toolbar_titleMargins]`</td><td>{@deprecated Use titleMargin}</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:titleTextAppearance][.Toolbar_titleTextAppearance]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:titleTextColor][.Toolbar_titleTextColor]`</td><td>A color to apply to the title string.</td></tr>
</table> *
 * @see .Toolbar_android_gravity
 *
 * @see .Toolbar_android_minHeight
 *
 * @see .Toolbar_buttonGravity
 *
 * @see .Toolbar_collapseContentDescription
 *
 * @see .Toolbar_collapseIcon
 *
 * @see .Toolbar_contentInsetEnd
 *
 * @see .Toolbar_contentInsetEndWithActions
 *
 * @see .Toolbar_contentInsetLeft
 *
 * @see .Toolbar_contentInsetRight
 *
 * @see .Toolbar_contentInsetStart
 *
 * @see .Toolbar_contentInsetStartWithNavigation
 *
 * @see .Toolbar_logo
 *
 * @see .Toolbar_logoDescription
 *
 * @see .Toolbar_maxButtonHeight
 *
 * @see .Toolbar_menu
 *
 * @see .Toolbar_navigationContentDescription
 *
 * @see .Toolbar_navigationIcon
 *
 * @see .Toolbar_popupTheme
 *
 * @see .Toolbar_subtitle
 *
 * @see .Toolbar_subtitleTextAppearance
 *
 * @see .Toolbar_subtitleTextColor
 *
 * @see .Toolbar_title
 *
 * @see .Toolbar_titleMargin
 *
 * @see .Toolbar_titleMarginBottom
 *
 * @see .Toolbar_titleMarginEnd
 *
 * @see .Toolbar_titleMarginStart
 *
 * @see .Toolbar_titleMarginTop
 *
 * @see .Toolbar_titleMargins
 *
 * @see .Toolbar_titleTextAppearance
 *
 * @see .Toolbar_titleTextColor
 */
    @Deprecated("")
 val Toolbar = intArrayOf(0x010100af, 0x01010140, 0x7f020040, 0x7f02004c, 0x7f02004d, 0x7f02005e, 0x7f02005f, 0x7f020060, 0x7f020061, 0x7f020062, 0x7f020063, 0x7f0200e0, 0x7f0200e1, 0x7f0200e2, 0x7f0200e4, 0x7f0200e6, 0x7f0200e7, 0x7f0200f3, 0x7f020111, 0x7f020112, 0x7f020113, 0x7f020130, 0x7f020131, 0x7f020132, 0x7f020133, 0x7f020134, 0x7f020135, 0x7f020136, 0x7f020137, 0x7f020138)
/**
 *
 * This symbol is the offset where the [android.R.attr.gravity]
 * attribute's value can be found in the [.Toolbar] array.
 *
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td></td></tr>
 * <tr><td>center</td><td>11</td><td></td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td></td></tr>
 * <tr><td>center_vertical</td><td>10</td><td></td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td></td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td></td></tr>
 * <tr><td>end</td><td>800005</td><td></td></tr>
 * <tr><td>fill</td><td>77</td><td></td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td></td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td></td></tr>
 * <tr><td>left</td><td>3</td><td></td></tr>
 * <tr><td>right</td><td>5</td><td></td></tr>
 * <tr><td>start</td><td>800003</td><td></td></tr>
 * <tr><td>top</td><td>30</td><td></td></tr>
</table> *
 *
 * @attr name android:gravity
 */
     val Toolbar_android_gravity = 0
/**
 *
 * This symbol is the offset where the [android.R.attr.minHeight]
 * attribute's value can be found in the [.Toolbar] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minHeight
 */
     val Toolbar_android_minHeight = 1
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.buttonGravity]
 * attribute's value can be found in the [.Toolbar] array.
 *
 *
 * Must be one or more (separated by '|') of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:buttonGravity
 */
     val Toolbar_buttonGravity = 2
/**
 *
 *
 * @attr description
 * Text to set as the content description for the collapse button.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:collapseContentDescription
 */
     val Toolbar_collapseContentDescription = 3
/**
 *
 *
 * @attr description
 * Icon drawable to use for the collapse button.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:collapseIcon
 */
     val Toolbar_collapseIcon = 4
/**
 *
 *
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:contentInsetEnd
 */
     val Toolbar_contentInsetEnd = 5
/**
 *
 *
 * @attr description
 * Minimum inset for content views within a bar when actions from a menu
 * are present. Only valid for some themes and configurations.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:contentInsetEndWithActions
 */
     val Toolbar_contentInsetEndWithActions = 6
/**
 *
 *
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:contentInsetLeft
 */
     val Toolbar_contentInsetLeft = 7
/**
 *
 *
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:contentInsetRight
 */
     val Toolbar_contentInsetRight = 8
/**
 *
 *
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:contentInsetStart
 */
     val Toolbar_contentInsetStart = 9
/**
 *
 *
 * @attr description
 * Minimum inset for content views within a bar when a navigation button
 * is present, such as the Up button. Only valid for some themes and configurations.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:contentInsetStartWithNavigation
 */
     val Toolbar_contentInsetStartWithNavigation = 10
/**
 *
 *
 * @attr description
 * Drawable to set as the logo that appears at the starting side of
 * the Toolbar, just after the navigation button.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:logo
 */
     val Toolbar_logo = 11
/**
 *
 *
 * @attr description
 * A content description string to describe the appearance of the
 * associated logo image.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:logoDescription
 */
     val Toolbar_logoDescription = 12
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.maxButtonHeight]
 * attribute's value can be found in the [.Toolbar] array.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:maxButtonHeight
 */
     val Toolbar_maxButtonHeight = 13
/**
 *
 *
 * @attr description
 * Menu resource to inflate to be shown in the toolbar
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:menu
 */
     val Toolbar_menu = 14
/**
 *
 *
 * @attr description
 * Text to set as the content description for the navigation button
 * located at the start of the toolbar.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:navigationContentDescription
 */
     val Toolbar_navigationContentDescription = 15
/**
 *
 *
 * @attr description
 * Icon drawable to use for the navigation button located at
 * the start of the toolbar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:navigationIcon
 */
     val Toolbar_navigationIcon = 16
/**
 *
 *
 * @attr description
 * Reference to a theme that should be used to inflate popups
 * shown by widgets in the toolbar.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:popupTheme
 */
     val Toolbar_popupTheme = 17
/**
 *
 *
 * @attr description
 * Specifies subtitle text used for navigationMode="normal"
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:subtitle
 */
     val Toolbar_subtitle = 18
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.subtitleTextAppearance]
 * attribute's value can be found in the [.Toolbar] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:subtitleTextAppearance
 */
     val Toolbar_subtitleTextAppearance = 19
/**
 *
 *
 * @attr description
 * A color to apply to the subtitle string.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:subtitleTextColor
 */
     val Toolbar_subtitleTextColor = 20
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.title]
 * attribute's value can be found in the [.Toolbar] array.
 *
 *
 * May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name com.kartikeyinc.calculator:title
 */
     val Toolbar_title = 21
/**
 *
 *
 * @attr description
 * Specifies extra space on the left, start, right and end sides
 * of the toolbar's title. Margin values should be positive.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:titleMargin
 */
     val Toolbar_titleMargin = 22
/**
 *
 *
 * @attr description
 * Specifies extra space on the bottom side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:titleMarginBottom
 */
     val Toolbar_titleMarginBottom = 23
/**
 *
 *
 * @attr description
 * Specifies extra space on the end side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:titleMarginEnd
 */
     val Toolbar_titleMarginEnd = 24
/**
 *
 *
 * @attr description
 * Specifies extra space on the start side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:titleMarginStart
 */
     val Toolbar_titleMarginStart = 25
/**
 *
 *
 * @attr description
 * Specifies extra space on the top side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:titleMarginTop
 */
     val Toolbar_titleMarginTop = 26
/**
 *
 *
 * @attr description
 * {@deprecated Use titleMargin}
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:titleMargins
 */
    @Deprecated("")
 val Toolbar_titleMargins = 27
/**
 *
 * This symbol is the offset where the [com.kartikeyinc.calculator.R.attr.titleTextAppearance]
 * attribute's value can be found in the [.Toolbar] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:titleTextAppearance
 */
     val Toolbar_titleTextAppearance = 28
/**
 *
 *
 * @attr description
 * A color to apply to the title string.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:titleTextColor
 */
     val Toolbar_titleTextColor = 29
/**
 * Attributes that can be used with a View.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:theme][.View_android_theme]`</td><td></td></tr>
 * <tr><td>`[android:focusable][.View_android_focusable]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:paddingEnd][.View_paddingEnd]`</td><td>Sets the padding, in pixels, of the end edge; see [android.R.attr.padding].</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:paddingStart][.View_paddingStart]`</td><td>Sets the padding, in pixels, of the start edge; see [android.R.attr.padding].</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:theme][.View_theme]`</td><td>Deprecated.</td></tr>
</table> *
 * @see .View_android_theme
 *
 * @see .View_android_focusable
 *
 * @see .View_paddingEnd
 *
 * @see .View_paddingStart
 *
 * @see .View_theme
 */
     val View = intArrayOf(0x01010000, 0x010100da, 0x7f0200ec, 0x7f0200ed, 0x7f020126)
/**
 *
 *
 * @attr description
 * Specifies a theme override for a view. When a theme override is set, the
 * view will be inflated using a [android.content.Context] themed with
 * the specified resource.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:theme
 */
     val View_android_theme = 0
/**
 *
 *
 * @attr description
 * Boolean that controls whether a view can take focus.  By default the user can not
 * move focus to a view; by setting this attribute to true the view is
 * allowed to take focus.  This value does not impact the behavior of
 * directly calling [android.view.View.requestFocus], which will
 * always request focus regardless of this view.  It only impacts where
 * focus navigation will try to move focus.
 *
 *
 * May be a boolean value, such as "`true`" or
 * "`false`".
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>10</td><td></td></tr>
</table> *
 *
 * @attr name android:focusable
 */
     val View_android_focusable = 1
/**
 *
 *
 * @attr description
 * Sets the padding, in pixels, of the end edge; see [android.R.attr.padding].
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:paddingEnd
 */
     val View_paddingEnd = 2
/**
 *
 *
 * @attr description
 * Sets the padding, in pixels, of the start edge; see [android.R.attr.padding].
 *
 *
 * May be a dimension value, which is a floating point number appended with a
 * unit such as "`14.5sp`".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name com.kartikeyinc.calculator:paddingStart
 */
     val View_paddingStart = 3
/**
 *
 *
 * @attr description
 * Deprecated.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name com.kartikeyinc.calculator:theme
 */
     val View_theme = 4
/**
 * Attributes that can be used with a ViewBackgroundHelper.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:background][.ViewBackgroundHelper_android_background]`</td><td></td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:backgroundTint][.ViewBackgroundHelper_backgroundTint]`</td><td>Tint to apply to the background.</td></tr>
 * <tr><td>`[com.kartikeyinc.calculator:backgroundTintMode][.ViewBackgroundHelper_backgroundTintMode]`</td><td>Blending mode used to apply the background tint.</td></tr>
</table> *
 * @see .ViewBackgroundHelper_android_background
 *
 * @see .ViewBackgroundHelper_backgroundTint
 *
 * @see .ViewBackgroundHelper_backgroundTintMode
 */
     val ViewBackgroundHelper = intArrayOf(0x010100d4, 0x7f020034, 0x7f020035)
/**
 *
 * This symbol is the offset where the [android.R.attr.background]
 * attribute's value can be found in the [.ViewBackgroundHelper] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name android:background
 */
     val ViewBackgroundHelper_android_background = 0
/**
 *
 *
 * @attr description
 * Tint to apply to the background.
 *
 *
 * May be a color value, in the form of "`#*rgb*`",
 * "`#*argb*`", "`#*rrggbb*`", or
 * "`#*aarrggbb*`".
 *
 * @attr name com.kartikeyinc.calculator:backgroundTint
 */
     val ViewBackgroundHelper_backgroundTint = 1
/**
 *
 *
 * @attr description
 * Blending mode used to apply the background tint.
 *
 *
 * Must be one of the following constant values.
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and icon color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
</table> *
 *
 * @attr name com.kartikeyinc.calculator:backgroundTintMode
 */
     val ViewBackgroundHelper_backgroundTintMode = 2
/**
 * Attributes that can be used with a ViewStubCompat.
 *
 * Includes the following attributes:
 * <table>
 * <colgroup align="left"></colgroup>
 * <colgroup align="left"></colgroup>
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td>`[android:id][.ViewStubCompat_android_id]`</td><td></td></tr>
 * <tr><td>`[android:layout][.ViewStubCompat_android_layout]`</td><td></td></tr>
 * <tr><td>`[android:inflatedId][.ViewStubCompat_android_inflatedId]`</td><td></td></tr>
</table> *
 * @see .ViewStubCompat_android_id
 *
 * @see .ViewStubCompat_android_layout
 *
 * @see .ViewStubCompat_android_inflatedId
 */
     val ViewStubCompat = intArrayOf(0x010100d0, 0x010100f2, 0x010100f3)
/**
 *
 * This symbol is the offset where the [android.R.attr.id]
 * attribute's value can be found in the [.ViewStubCompat] array.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:id
 */
     val ViewStubCompat_android_id = 0
/**
 *
 *
 * @attr description
 * Supply an identifier for the layout resource to inflate when the ViewStub
 * becomes visible or when forced to do so. The layout resource must be a
 * valid reference to a layout.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:layout
 */
     val ViewStubCompat_android_layout = 1
/**
 *
 *
 * @attr description
 * Overrides the id of the inflated View with this value.
 *
 *
 * May be a reference to another resource, in the form
 * "`@[+][*package*:]*type*/*name*`" or a theme
 * attribute in the form
 * "`?[*package*:]*type*/*name*`".
 *
 * @attr name android:inflatedId
 */
     val ViewStubCompat_android_inflatedId = 2
}
}